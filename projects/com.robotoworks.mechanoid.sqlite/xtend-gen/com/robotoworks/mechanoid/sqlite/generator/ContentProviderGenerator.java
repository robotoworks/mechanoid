package com.robotoworks.mechanoid.sqlite.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.robotoworks.mechanoid.common.util.Strings;
import com.robotoworks.mechanoid.sqlite.generator.Extensions;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActionBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActionStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.DatabaseBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.MigrationBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model;
import com.robotoworks.mechanoid.sqlite.sqliteModel.Statment;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ContentProviderGenerator {
  public CharSequence generate(final Model model, final MigrationBlock snapshot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Robotoworks Mechanoid");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import android.content.ContentProviderOperation;");
    _builder.newLine();
    _builder.append("import android.content.ContentProviderResult;");
    _builder.newLine();
    _builder.append("import android.content.ContentValues;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.OperationApplicationException;");
    _builder.newLine();
    _builder.append("import android.content.UriMatcher;");
    _builder.newLine();
    _builder.append("import android.database.Cursor;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteDatabase;");
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.content.MechanoidContentProvider;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.sqlite.MechanoidSQLiteOpenHelper;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Statment> _statements = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter = Iterables.<CreateTableStatement>filter(_statements, CreateTableStatement.class);
      for(final CreateTableStatement tbl : _filter) {
        _builder.append("import ");
        String _packageName_1 = model.getPackageName();
        _builder.append(_packageName_1, "");
        _builder.append(".");
        DatabaseBlock _database = model.getDatabase();
        String _name = _database.getName();
        String _pascalize = Strings.pascalize(_name);
        _builder.append(_pascalize, "");
        _builder.append("Contract.");
        String _name_1 = tbl.getName();
        String _pascalize_1 = Strings.pascalize(_name_1);
        _builder.append(_pascalize_1, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Statment> _statements_1 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_1 = Iterables.<CreateViewStatement>filter(_statements_1, CreateViewStatement.class);
      for(final CreateViewStatement vw : _filter_1) {
        _builder.append("import ");
        String _packageName_2 = model.getPackageName();
        _builder.append(_packageName_2, "");
        _builder.append(".");
        DatabaseBlock _database_1 = model.getDatabase();
        String _name_2 = _database_1.getName();
        String _pascalize_2 = Strings.pascalize(_name_2);
        _builder.append(_pascalize_2, "");
        _builder.append("Contract.");
        String _name_3 = vw.getName();
        String _pascalize_3 = Strings.pascalize(_name_3);
        _builder.append(_pascalize_3, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<Statment> _statements_2 = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter_2 = Iterables.<CreateTableStatement>filter(_statements_2, CreateTableStatement.class);
      for(final CreateTableStatement tbl_1 : _filter_2) {
        _builder.append("import ");
        String _packageName_3 = model.getPackageName();
        _builder.append(_packageName_3, "");
        _builder.append(".actions.");
        String _name_4 = tbl_1.getName();
        String _pascalize_4 = Strings.pascalize(_name_4);
        _builder.append(_pascalize_4, "");
        _builder.append("Actions;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey = Extensions.hasAndroidPrimaryKey(tbl_1);
          if (_hasAndroidPrimaryKey) {
            _builder.append("import ");
            String _packageName_4 = model.getPackageName();
            _builder.append(_packageName_4, "");
            _builder.append(".actions.");
            String _name_5 = tbl_1.getName();
            String _pascalize_5 = Strings.pascalize(_name_5);
            _builder.append(_pascalize_5, "");
            _builder.append("ByIdActions;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Statment> _statements_3 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_3 = Iterables.<CreateViewStatement>filter(_statements_3, CreateViewStatement.class);
      for(final CreateViewStatement vw_1 : _filter_3) {
        _builder.append("import ");
        String _packageName_5 = model.getPackageName();
        _builder.append(_packageName_5, "");
        _builder.append(".actions.");
        String _name_6 = vw_1.getName();
        String _pascalize_6 = Strings.pascalize(_name_6);
        _builder.append(_pascalize_6, "");
        _builder.append("Actions;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_1 = Extensions.hasAndroidPrimaryKey(vw_1);
          if (_hasAndroidPrimaryKey_1) {
            _builder.append("import ");
            String _packageName_6 = model.getPackageName();
            _builder.append(_packageName_6, "");
            _builder.append(".actions.");
            String _name_7 = vw_1.getName();
            String _pascalize_7 = Strings.pascalize(_name_7);
            _builder.append(_pascalize_7, "");
            _builder.append("ByIdActions;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      DatabaseBlock _database_2 = model.getDatabase();
      ActionBlock _actions = _database_2.getActions();
      boolean _notEquals = (!Objects.equal(_actions, null));
      if (_notEquals) {
        _builder.newLine();
        {
          DatabaseBlock _database_3 = model.getDatabase();
          ActionBlock _actions_1 = _database_3.getActions();
          EList<ActionStatement> _actions_2 = _actions_1.getActions();
          for(final ActionStatement a : _actions_2) {
            _builder.append("import ");
            String _packageName_7 = model.getPackageName();
            _builder.append(_packageName_7, "");
            _builder.append(".actions.");
            String _name_8 = a.getName();
            String _pascalize_8 = Strings.pascalize(_name_8);
            _builder.append(_pascalize_8, "");
            _builder.append("Actions;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
      }
    }
    _builder.append("public abstract class Abstract");
    DatabaseBlock _database_4 = model.getDatabase();
    String _name_9 = _database_4.getName();
    String _pascalize_9 = Strings.pascalize(_name_9);
    _builder.append(_pascalize_9, "");
    _builder.append("ContentProvider extends MechanoidContentProvider {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final UriMatcher sUriMatcher;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String[] sContentTypes;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Class<?>[] sActions;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    int counter = (-1);
    _builder.newLineIfNotEmpty();
    {
      EList<Statment> _statements_4 = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter_4 = Iterables.<CreateTableStatement>filter(_statements_4, CreateTableStatement.class);
      for(final CreateTableStatement tbl_2 : _filter_4) {
        _builder.append("\t");
        _builder.append("private static final int ");
        String _name_10 = tbl_2.getName();
        String _underscore = Strings.underscore(_name_10);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "	");
        _builder.append(" = ");
        int _plus = (counter + 1);
        int _counter = counter = _plus;
        _builder.append(_counter, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_2 = Extensions.hasAndroidPrimaryKey(tbl_2);
          if (_hasAndroidPrimaryKey_2) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_11 = tbl_2.getName();
            String _underscore_1 = Strings.underscore(_name_11);
            String _upperCase_1 = _underscore_1.toUpperCase();
            _builder.append(_upperCase_1, "	");
            _builder.append("_ID = ");
            int _plus_1 = (counter + 1);
            int _counter_1 = counter = _plus_1;
            _builder.append(_counter_1, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<Statment> _statements_5 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_5 = Iterables.<CreateViewStatement>filter(_statements_5, CreateViewStatement.class);
      for(final CreateViewStatement vw_2 : _filter_5) {
        _builder.append("\t");
        _builder.append("private static final int ");
        String _name_12 = vw_2.getName();
        String _underscore_2 = Strings.underscore(_name_12);
        String _upperCase_2 = _underscore_2.toUpperCase();
        _builder.append(_upperCase_2, "	");
        _builder.append(" = ");
        int _plus_2 = (counter + 1);
        int _counter_2 = counter = _plus_2;
        _builder.append(_counter_2, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_3 = Extensions.hasAndroidPrimaryKey(vw_2);
          if (_hasAndroidPrimaryKey_3) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_13 = vw_2.getName();
            String _underscore_3 = Strings.underscore(_name_13);
            String _upperCase_3 = _underscore_3.toUpperCase();
            _builder.append(_upperCase_3, "	");
            _builder.append("_ID = ");
            int _plus_3 = (counter + 1);
            int _counter_3 = counter = _plus_3;
            _builder.append(_counter_3, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      DatabaseBlock _database_5 = model.getDatabase();
      ActionBlock _actions_3 = _database_5.getActions();
      boolean _notEquals_1 = (!Objects.equal(_actions_3, null));
      if (_notEquals_1) {
        {
          DatabaseBlock _database_6 = model.getDatabase();
          ActionBlock _actions_4 = _database_6.getActions();
          EList<ActionStatement> _actions_5 = _actions_4.getActions();
          for(final ActionStatement a_1 : _actions_5) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_14 = a_1.getName();
            String _underscore_4 = Strings.underscore(_name_14);
            String _upperCase_4 = _underscore_4.toUpperCase();
            _builder.append(_upperCase_4, "	");
            _builder.append(" = ");
            int _plus_4 = (counter + 1);
            int _counter_4 = counter = _plus_4;
            _builder.append(_counter_4, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("public static final int NUM_URI_MATCHERS = ");
    int _plus_5 = (counter + 1);
    _builder.append(_plus_5, "	");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sUriMatcher = buildUriMatcher();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sContentTypes = new String[NUM_URI_MATCHERS];");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Statment> _statements_6 = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter_6 = Iterables.<CreateTableStatement>filter(_statements_6, CreateTableStatement.class);
      for(final CreateTableStatement tbl_3 : _filter_6) {
        _builder.append("\t\t");
        _builder.append("sContentTypes[");
        String _name_15 = tbl_3.getName();
        String _underscore_5 = Strings.underscore(_name_15);
        String _upperCase_5 = _underscore_5.toUpperCase();
        _builder.append(_upperCase_5, "		");
        _builder.append("] = ");
        String _name_16 = tbl_3.getName();
        String _pascalize_10 = Strings.pascalize(_name_16);
        _builder.append(_pascalize_10, "		");
        _builder.append(".CONTENT_TYPE;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_4 = Extensions.hasAndroidPrimaryKey(tbl_3);
          if (_hasAndroidPrimaryKey_4) {
            _builder.append("\t\t");
            _builder.append("sContentTypes[");
            String _name_17 = tbl_3.getName();
            String _underscore_6 = Strings.underscore(_name_17);
            String _upperCase_6 = _underscore_6.toUpperCase();
            _builder.append(_upperCase_6, "		");
            _builder.append("_ID] = ");
            String _name_18 = tbl_3.getName();
            String _pascalize_11 = Strings.pascalize(_name_18);
            _builder.append(_pascalize_11, "		");
            _builder.append(".ITEM_CONTENT_TYPE;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Statment> _statements_7 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_7 = Iterables.<CreateViewStatement>filter(_statements_7, CreateViewStatement.class);
      for(final CreateViewStatement vw_3 : _filter_7) {
        _builder.append("\t\t");
        _builder.append("sContentTypes[");
        String _name_19 = vw_3.getName();
        String _underscore_7 = Strings.underscore(_name_19);
        String _upperCase_7 = _underscore_7.toUpperCase();
        _builder.append(_upperCase_7, "		");
        _builder.append("] = ");
        String _name_20 = vw_3.getName();
        String _pascalize_12 = Strings.pascalize(_name_20);
        _builder.append(_pascalize_12, "		");
        _builder.append(".CONTENT_TYPE;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_5 = Extensions.hasAndroidPrimaryKey(vw_3);
          if (_hasAndroidPrimaryKey_5) {
            _builder.append("\t\t");
            _builder.append("sContentTypes[");
            String _name_21 = vw_3.getName();
            String _underscore_8 = Strings.underscore(_name_21);
            String _upperCase_8 = _underscore_8.toUpperCase();
            _builder.append(_upperCase_8, "		");
            _builder.append("_ID] = ");
            String _name_22 = vw_3.getName();
            String _pascalize_13 = Strings.pascalize(_name_22);
            _builder.append(_pascalize_13, "		");
            _builder.append(".ITEM_CONTENT_TYPE;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sActions = new Class<?>[NUM_URI_MATCHERS];");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Statment> _statements_8 = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter_8 = Iterables.<CreateTableStatement>filter(_statements_8, CreateTableStatement.class);
      for(final CreateTableStatement tbl_4 : _filter_8) {
        _builder.append("\t\t");
        _builder.append("sActions[");
        String _name_23 = tbl_4.getName();
        String _underscore_9 = Strings.underscore(_name_23);
        String _upperCase_9 = _underscore_9.toUpperCase();
        _builder.append(_upperCase_9, "		");
        _builder.append("] = ");
        String _name_24 = tbl_4.getName();
        String _pascalize_14 = Strings.pascalize(_name_24);
        _builder.append(_pascalize_14, "		");
        _builder.append("Actions.class;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_6 = Extensions.hasAndroidPrimaryKey(tbl_4);
          if (_hasAndroidPrimaryKey_6) {
            _builder.append("\t\t");
            _builder.append("sActions[");
            String _name_25 = tbl_4.getName();
            String _underscore_10 = Strings.underscore(_name_25);
            String _upperCase_10 = _underscore_10.toUpperCase();
            _builder.append(_upperCase_10, "		");
            _builder.append("_ID] = ");
            String _name_26 = tbl_4.getName();
            String _pascalize_15 = Strings.pascalize(_name_26);
            _builder.append(_pascalize_15, "		");
            _builder.append("ByIdActions.class;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Statment> _statements_9 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_9 = Iterables.<CreateViewStatement>filter(_statements_9, CreateViewStatement.class);
      for(final CreateViewStatement vw_4 : _filter_9) {
        _builder.append("\t\t");
        _builder.append("sActions[");
        String _name_27 = vw_4.getName();
        String _underscore_11 = Strings.underscore(_name_27);
        String _upperCase_11 = _underscore_11.toUpperCase();
        _builder.append(_upperCase_11, "		");
        _builder.append("] = ");
        String _name_28 = vw_4.getName();
        String _pascalize_16 = Strings.pascalize(_name_28);
        _builder.append(_pascalize_16, "		");
        _builder.append("Actions.class;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_7 = Extensions.hasAndroidPrimaryKey(vw_4);
          if (_hasAndroidPrimaryKey_7) {
            _builder.append("\t\t");
            _builder.append("sActions[");
            String _name_29 = vw_4.getName();
            String _underscore_12 = Strings.underscore(_name_29);
            String _upperCase_12 = _underscore_12.toUpperCase();
            _builder.append(_upperCase_12, "		");
            _builder.append("_ID] = ");
            String _name_30 = vw_4.getName();
            String _pascalize_17 = Strings.pascalize(_name_30);
            _builder.append(_pascalize_17, "		");
            _builder.append("ByIdActions.class;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      DatabaseBlock _database_7 = model.getDatabase();
      ActionBlock _actions_6 = _database_7.getActions();
      boolean _notEquals_2 = (!Objects.equal(_actions_6, null));
      if (_notEquals_2) {
        {
          DatabaseBlock _database_8 = model.getDatabase();
          ActionBlock _actions_7 = _database_8.getActions();
          EList<ActionStatement> _actions_8 = _actions_7.getActions();
          for(final ActionStatement a_2 : _actions_8) {
            _builder.append("\t\t");
            _builder.append("sActions[");
            String _name_31 = a_2.getName();
            String _underscore_13 = Strings.underscore(_name_31);
            String _upperCase_13 = _underscore_13.toUpperCase();
            _builder.append(_upperCase_13, "		");
            _builder.append("] = ");
            String _name_32 = a_2.getName();
            String _pascalize_18 = Strings.pascalize(_name_32);
            _builder.append(_pascalize_18, "		");
            _builder.append("Actions.class;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static UriMatcher buildUriMatcher() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String authority = ");
    DatabaseBlock _database_9 = model.getDatabase();
    String _name_33 = _database_9.getName();
    String _pascalize_19 = Strings.pascalize(_name_33);
    _builder.append(_pascalize_19, "        ");
    _builder.append("Contract.CONTENT_AUTHORITY;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Tables");
    _builder.newLine();
    {
      EList<Statment> _statements_10 = snapshot.getStatements();
      Iterable<CreateTableStatement> _filter_10 = Iterables.<CreateTableStatement>filter(_statements_10, CreateTableStatement.class);
      for(final CreateTableStatement tbl_5 : _filter_10) {
        _builder.append("\t\t");
        _builder.append("matcher.addURI(authority, \"");
        String _name_34 = tbl_5.getName();
        _builder.append(_name_34, "		");
        _builder.append("\", ");
        String _name_35 = tbl_5.getName();
        String _underscore_14 = Strings.underscore(_name_35);
        String _upperCase_14 = _underscore_14.toUpperCase();
        _builder.append(_upperCase_14, "		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_8 = Extensions.hasAndroidPrimaryKey(tbl_5);
          if (_hasAndroidPrimaryKey_8) {
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _name_36 = tbl_5.getName();
            _builder.append(_name_36, "		");
            _builder.append("/#\", ");
            String _name_37 = tbl_5.getName();
            String _underscore_15 = Strings.underscore(_name_37);
            String _upperCase_15 = _underscore_15.toUpperCase();
            _builder.append(_upperCase_15, "		");
            _builder.append("_ID);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Views");
    _builder.newLine();
    {
      EList<Statment> _statements_11 = snapshot.getStatements();
      Iterable<CreateViewStatement> _filter_11 = Iterables.<CreateViewStatement>filter(_statements_11, CreateViewStatement.class);
      for(final CreateViewStatement vw_5 : _filter_11) {
        _builder.append("\t\t");
        _builder.append("matcher.addURI(authority, \"");
        String _name_38 = vw_5.getName();
        _builder.append(_name_38, "		");
        _builder.append("\", ");
        String _name_39 = vw_5.getName();
        String _underscore_16 = Strings.underscore(_name_39);
        String _upperCase_16 = _underscore_16.toUpperCase();
        _builder.append(_upperCase_16, "		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_9 = Extensions.hasAndroidPrimaryKey(vw_5);
          if (_hasAndroidPrimaryKey_9) {
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _name_40 = vw_5.getName();
            _builder.append(_name_40, "		");
            _builder.append("/#\", ");
            String _name_41 = vw_5.getName();
            String _underscore_17 = Strings.underscore(_name_41);
            String _upperCase_17 = _underscore_17.toUpperCase();
            _builder.append(_upperCase_17, "		");
            _builder.append("_ID);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// User Actions");
    _builder.newLine();
    {
      DatabaseBlock _database_10 = model.getDatabase();
      ActionBlock _actions_9 = _database_10.getActions();
      boolean _notEquals_3 = (!Objects.equal(_actions_9, null));
      if (_notEquals_3) {
        {
          DatabaseBlock _database_11 = model.getDatabase();
          ActionBlock _actions_10 = _database_11.getActions();
          EList<ActionStatement> _actions_11 = _actions_10.getActions();
          for(final ActionStatement a_3 : _actions_11) {
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _path = a_3.getPath();
            _builder.append(_path, "		");
            _builder.append("\", ");
            String _name_42 = a_3.getName();
            String _underscore_18 = Strings.underscore(_name_42);
            String _upperCase_18 = _underscore_18.toUpperCase();
            _builder.append(_upperCase_18, "		");
            _builder.append("); ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("return matcher;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getType(Uri uri) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sContentTypes[match];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int delete(Uri uri, String selection, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return createActions(sActions[match]).delete(this, uri, selection, selectionArgs);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Uri insert(Uri uri, ContentValues values) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return createActions(sActions[match]).insert(this, uri, values);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int bulkInsert(Uri uri, ContentValues[] values) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return createActions(sActions[match]).bulkInsert(this, uri, values);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    DatabaseBlock _database_12 = model.getDatabase();
    String _name_43 = _database_12.getName();
    String _pascalize_20 = Strings.pascalize(_name_43);
    _builder.append(_pascalize_20, "        ");
    _builder.append("OpenHelper(context);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Cursor cursor = createActions(sActions[match]).query(this, uri, projection, selection, selectionArgs, sortOrder);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(cursor != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cursor.setNotificationUri(getContext().getContentResolver(), uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return cursor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return createActions(sActions[match]).update(this, uri, values, selection, selectionArgs);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throws OperationApplicationException {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final SQLiteDatabase db = getOpenHelper().getWritableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("db.beginTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final int numOperations = operations.size();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final ContentProviderResult[] results = new ContentProviderResult[numOperations];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int i = 0; i < numOperations; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("results[i] = operations.get(i).apply(this, results, i);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("db.setTransactionSuccessful();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return results;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("db.endTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStub(final Model model, final MigrationBlock snapshot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*******************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2012, Robotoworks Limited");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved. This program and the accompanying materials");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* which accompanies this distribution, and is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*******************************************************************************/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "");
    _builder.append(".Abstract");
    DatabaseBlock _database = model.getDatabase();
    String _name = _database.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("ContentProvider;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    DatabaseBlock _database_1 = model.getDatabase();
    String _name_1 = _database_1.getName();
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append("ContentProvider extends Abstract");
    DatabaseBlock _database_2 = model.getDatabase();
    String _name_2 = _database_2.getName();
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "");
    _builder.append("ContentProvider {}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
