/*
* generated by Xtext
*/
grammar InternalSqliteModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.robotoworks.mechanoid.sqlite.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.robotoworks.mechanoid.sqlite.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.robotoworks.mechanoid.sqlite.services.SqliteModelGrammarAccess;

}

@parser::members {

 	private SqliteModelGrammarAccess grammarAccess;
 	
    public InternalSqliteModelParser(TokenStream input, SqliteModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SqliteModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackageNameFQNParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDatabaseDatabaseBlockParserRuleCall_2_0()); 
	    }
		lv_database_2_0=ruleDatabaseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_2_0, 
        		"DatabaseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDatabaseBlock
entryRuleDatabaseBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseBlockRule()); }
	 iv_ruleDatabaseBlock=ruleDatabaseBlock 
	 { $current=$iv_ruleDatabaseBlock.current; } 
	 EOF 
;

// Rule DatabaseBlock
ruleDatabaseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='database' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatabaseBlockAccess().getDatabaseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDatabaseBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDatabaseBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseBlockAccess().getConfigConfigBlockParserRuleCall_3_0()); 
	    }
		lv_config_3_0=ruleConfigBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseBlockRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_3_0, 
        		"ConfigBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseBlockAccess().getMigrationsMigrationBlockParserRuleCall_4_0()); 
	    }
		lv_migrations_4_0=ruleMigrationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseBlockRule());
	        }
       		add(
       			$current, 
       			"migrations",
        		lv_migrations_4_0, 
        		"MigrationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDatabaseBlockAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConfigBlock
entryRuleConfigBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigBlockRule()); }
	 iv_ruleConfigBlock=ruleConfigBlock 
	 { $current=$iv_ruleConfigBlock.current; } 
	 EOF 
;

// Rule ConfigBlock
ruleConfigBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfigBlockAccess().getConfigBlockAction_0(),
            $current);
    }
)	otherlv_1='config' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigBlockAccess().getConfigKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigBlockAccess().getStatementsConfigurationStatementParserRuleCall_3_0()); 
	    }
		lv_statements_3_0=ruleConfigurationStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"ConfigurationStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleConfigurationStatement
entryRuleConfigurationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationStatementRule()); }
	 iv_ruleConfigurationStatement=ruleConfigurationStatement 
	 { $current=$iv_ruleConfigurationStatement.current; } 
	 EOF 
;

// Rule ConfigurationStatement
ruleConfigurationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfigurationStatementAccess().getActionStatementAction_0_0(),
            $current);
    }
)	otherlv_1='action' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigurationStatementAccess().getActionKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConfigurationStatementAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigurationStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		lv_path_3_0=RULE_STRING
		{
			newLeafNode(lv_path_3_0, grammarAccess.getConfigurationStatementAccess().getPathSTRINGTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigurationStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfigurationStatementAccess().getActiveRecordRegistrationStatementAction_1_0(),
            $current);
    }
)	otherlv_5='active' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfigurationStatementAccess().getActiveKeyword_1_1());
    }
(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getConfigurationStatementAccess().getNameIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigurationStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleMigrationBlock
entryRuleMigrationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMigrationBlockRule()); }
	 iv_ruleMigrationBlock=ruleMigrationBlock 
	 { $current=$iv_ruleMigrationBlock.current; } 
	 EOF 
;

// Rule MigrationBlock
ruleMigrationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMigrationBlockAccess().getMigrationBlockAction_0(),
            $current);
    }
)	otherlv_1='migration' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMigrationBlockAccess().getMigrationKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMigrationBlockAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMigrationBlockAccess().getStatementsStatmentParserRuleCall_3_0_0()); 
	    }
		lv_statements_3_0=ruleStatment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMigrationBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMigrationBlockAccess().getSemicolonKeyword_3_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMigrationBlockAccess().getStatementsStatmentParserRuleCall_3_2_0_0()); 
	    }
		lv_statements_5_0=ruleStatment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMigrationBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"Statment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMigrationBlockAccess().getSemicolonKeyword_3_2_1());
    }
)*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMigrationBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSqlExpression
entryRuleSqlExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSqlExpressionRule()); }
	 iv_ruleSqlExpression=ruleSqlExpression 
	 { $current=$iv_ruleSqlExpression.current; } 
	 EOF 
;

// Rule SqlExpression
ruleSqlExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqlExpressionAccess().getRootExprConcatParserRuleCall_0()); 
	    }
		lv_root_0_0=ruleExprConcat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlExpressionRule());
	        }
       		set(
       			$current, 
       			"root",
        		lv_root_0_0, 
        		"ExprConcat");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExprConcat
entryRuleExprConcat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprConcatRule()); }
	 iv_ruleExprConcat=ruleExprConcat 
	 { $current=$iv_ruleExprConcat.current; } 
	 EOF 
;

// Rule ExprConcat
ruleExprConcat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprConcatAccess().getExprMultParserRuleCall_0()); 
    }
    this_ExprMult_0=ruleExprMult
    { 
        $current = $this_ExprMult_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprConcatAccess().getExprConcatLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExprConcatAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprConcatRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprConcatAccess().getRightExprMultParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprMult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprConcatRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprMult");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprMult
entryRuleExprMult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprMultRule()); }
	 iv_ruleExprMult=ruleExprMult 
	 { $current=$iv_ruleExprMult.current; } 
	 EOF 
;

// Rule ExprMult
ruleExprMult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprMultAccess().getExprAddParserRuleCall_0()); 
    }
    this_ExprAdd_0=ruleExprAdd
    { 
        $current = $this_ExprAdd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getExprMultAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprMultRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getExprMultAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprMultRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getExprMultAccess().getOpPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprMultRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprMultAccess().getRightExprAddParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprMultRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprAdd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprAdd
entryRuleExprAdd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprAddRule()); }
	 iv_ruleExprAdd=ruleExprAdd 
	 { $current=$iv_ruleExprAdd.current; } 
	 EOF 
;

// Rule ExprAdd
ruleExprAdd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAddAccess().getExprBitParserRuleCall_0()); 
    }
    this_ExprBit_0=ruleExprBit
    { 
        $current = $this_ExprBit_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprAddAccess().getExprAddLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getExprAddAccess().getOpPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprAddRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getExprAddAccess().getOpHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprAddRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAddAccess().getRightExprBitParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprBit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAddRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprBit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprBit
entryRuleExprBit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprBitRule()); }
	 iv_ruleExprBit=ruleExprBit 
	 { $current=$iv_ruleExprBit.current; } 
	 EOF 
;

// Rule ExprBit
ruleExprBit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprBitAccess().getExprRelateParserRuleCall_0()); 
    }
    this_ExprRelate_0=ruleExprRelate
    { 
        $current = $this_ExprRelate_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprBitAccess().getExprBitLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getExprBitAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprBitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'>>' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getExprBitAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprBitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'&' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getExprBitAccess().getOpAmpersandKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprBitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'|' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getExprBitAccess().getOpVerticalLineKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprBitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprBitAccess().getRightExprRelateParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprRelate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprBitRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprRelate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprRelate
entryRuleExprRelate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRelateRule()); }
	 iv_ruleExprRelate=ruleExprRelate 
	 { $current=$iv_ruleExprRelate.current; } 
	 EOF 
;

// Rule ExprRelate
ruleExprRelate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprRelateAccess().getExprEqualParserRuleCall_0()); 
    }
    this_ExprEqual_0=ruleExprEqual
    { 
        $current = $this_ExprEqual_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprRelateAccess().getExprRelateLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getExprRelateAccess().getOpLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRelateRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getExprRelateAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRelateRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getExprRelateAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRelateRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getExprRelateAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRelateRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprRelateAccess().getRightExprEqualParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprEqual		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRelateRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprEqual");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprEqual
entryRuleExprEqual returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprEqualRule()); }
	 iv_ruleExprEqual=ruleExprEqual 
	 { $current=$iv_ruleExprEqual.current; } 
	 EOF 
;

// Rule ExprEqual
ruleExprEqual returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprEqualAccess().getExprAndParserRuleCall_0()); 
    }
    this_ExprAnd_0=ruleExprAnd
    { 
        $current = $this_ExprAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprEqualAccess().getExprEqualLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getExprEqualAccess().getOpEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'==' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getExprEqualAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'!=' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getExprEqualAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<>' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getExprEqualAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'is' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getExprEqualAccess().getOpIsKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'is not' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getExprEqualAccess().getOpIsNotKeyword_1_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

    |		lv_op_2_7=	'in' 
    {
        newLeafNode(lv_op_2_7, grammarAccess.getExprEqualAccess().getOpInKeyword_1_1_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_7, null);
	    }

    |		lv_op_2_8=	'like' 
    {
        newLeafNode(lv_op_2_8, grammarAccess.getExprEqualAccess().getOpLikeKeyword_1_1_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_8, null);
	    }

    |		lv_op_2_9=	'glob' 
    {
        newLeafNode(lv_op_2_9, grammarAccess.getExprEqualAccess().getOpGlobKeyword_1_1_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_9, null);
	    }

    |		lv_op_2_10=	'match' 
    {
        newLeafNode(lv_op_2_10, grammarAccess.getExprEqualAccess().getOpMatchKeyword_1_1_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_10, null);
	    }

    |		lv_op_2_11=	'regexp' 
    {
        newLeafNode(lv_op_2_11, grammarAccess.getExprEqualAccess().getOpRegexpKeyword_1_1_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprEqualRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_11, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqualAccess().getRightExprAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqualRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	 iv_ruleExprAnd=ruleExprAnd 
	 { $current=$iv_ruleExprAnd.current; } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0()); 
    }
    this_ExprOr_0=ruleExprOr
    { 
        $current = $this_ExprOr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExprAndAccess().getOpAndKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprAndRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAndAccess().getRightExprOrParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExprOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExprOr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprOr
entryRuleExprOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	 iv_ruleExprOr=ruleExprOr 
	 { $current=$iv_ruleExprOr.current; } 
	 EOF 
;

// Rule ExprOr
ruleExprOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'or' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExprOrAccess().getOpOrKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprOrRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprOrAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getColumnLiteralAction_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNameFQNParserRuleCall_0_0_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getLiteralAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralValueLiteralValueParserRuleCall_0_1_1_0()); 
	    }
		lv_literalValue_3_0=ruleLiteralValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"literalValue",
        		lv_literalValue_3_0, 
        		"LiteralValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSqlExpressionParserRuleCall_0_2_1()); 
    }
    this_SqlExpression_5=ruleSqlExpression
    { 
        $current = $this_SqlExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getSelectStatementExpressionAction_0_3_0(),
            $current);
    }
)(
(
		lv_not_8_0=	'not' 
    {
        newLeafNode(lv_not_8_0, grammarAccess.getPrimaryExpressionAccess().getNotNotKeyword_0_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "not", true, "not");
	    }

)
)?(
(
		lv_exists_9_0=	'exists' 
    {
        newLeafNode(lv_exists_9_0, grammarAccess.getPrimaryExpressionAccess().getExistsExistsKeyword_0_3_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "exists", true, "exists");
	    }

)
)?	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_3_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSelectSelectStatementParserRuleCall_0_3_4_0()); 
	    }
		lv_select_11_0=ruleSelectStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"select",
        		lv_select_11_0, 
        		"SelectStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_3_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getCaseExpressionAction_0_4_0(),
            $current);
    }
)	otherlv_14='case' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPrimaryExpressionAccess().getCaseKeyword_0_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionSqlExpressionParserRuleCall_0_4_2_0()); 
	    }
		lv_caseExpression_15_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"caseExpression",
        		lv_caseExpression_15_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCasesCaseParserRuleCall_0_4_3_0()); 
	    }
		lv_cases_16_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_16_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCasesCaseParserRuleCall_0_4_4_0()); 
	    }
		lv_cases_17_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_17_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_18='else' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPrimaryExpressionAccess().getElseKeyword_0_4_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0()); 
	    }
		lv_elseExpression_19_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_19_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimaryExpressionAccess().getEndKeyword_0_4_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getFunctionAction_0_5_0(),
            $current);
    }
)(
(
		lv_name_22_0=RULE_ID
		{
			newLeafNode(lv_name_22_0, grammarAccess.getPrimaryExpressionAccess().getNameIDTerminalRuleCall_0_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_22_0, 
        		"ID");
	    }

)
)	otherlv_23='(' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_5_2());
    }
((
(
		lv_all_24_0=	'*' 
    {
        newLeafNode(lv_all_24_0, grammarAccess.getPrimaryExpressionAccess().getAllAsteriskKeyword_0_5_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "all", true, "*");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0()); 
	    }
		lv_arguments_25_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_25_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_0_5_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0()); 
	    }
		lv_arugments_27_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"arugments",
        		lv_arugments_27_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))	otherlv_28=')' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_5_4());
    }
))(
(
(
		lv_isnull_29_1=	'is null' 
    {
        newLeafNode(lv_isnull_29_1, grammarAccess.getPrimaryExpressionAccess().getIsnullIsNullKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "isnull", true, null);
	    }

    |		lv_isnull_29_2=	'not null' 
    {
        newLeafNode(lv_isnull_29_2, grammarAccess.getPrimaryExpressionAccess().getIsnullNotNullKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "isnull", true, null);
	    }

    |		lv_isnull_29_3=	'notnull' 
    {
        newLeafNode(lv_isnull_29_3, grammarAccess.getPrimaryExpressionAccess().getIsnullNotnullKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "isnull", true, null);
	    }

)

)
)?)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getWhenExpressionSqlExpressionParserRuleCall_1_0()); 
	    }
		lv_whenExpression_1_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"whenExpression",
        		lv_whenExpression_1_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getThenExpressionSqlExpressionParserRuleCall_3_0()); 
	    }
		lv_thenExpression_3_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"thenExpression",
        		lv_thenExpression_3_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;









// Entry rule entryRuleStatment
entryRuleStatment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatmentRule()); }
	 iv_ruleStatment=ruleStatment 
	 { $current=$iv_ruleStatment.current; } 
	 EOF 
;

// Rule Statment
ruleStatment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getCreateTableStatementAction_0_0(),
            $current);
    }
)	otherlv_1='create' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatmentAccess().getCreateKeyword_0_1());
    }
	otherlv_2='table' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatmentAccess().getTableKeyword_0_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatmentAccess().getLeftParenthesisKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getColumnDefsColumnDefParserRuleCall_0_5_0()); 
	    }
		lv_columnDefs_5_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"columnDefs",
        		lv_columnDefs_5_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatmentAccess().getCommaKeyword_0_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getColumnDefsColumnDefParserRuleCall_0_6_1_0()); 
	    }
		lv_columnDefs_7_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"columnDefs",
        		lv_columnDefs_7_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatmentAccess().getCommaKeyword_0_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getConstraintsTableConstraintParserRuleCall_0_7_1_0()); 
	    }
		lv_constraints_9_0=ruleTableConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_9_0, 
        		"TableConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatmentAccess().getRightParenthesisKeyword_0_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getAlterTableStatementAction_1_0(),
            $current);
    }
)	otherlv_12='alter' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatmentAccess().getAlterKeyword_1_1());
    }
	otherlv_13='table' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStatmentAccess().getTableKeyword_1_2());
    }
(
(
		lv_name_14_0=RULE_ID
		{
			newLeafNode(lv_name_14_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_14_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getClauseAlterTableClauseParserRuleCall_1_4_0()); 
	    }
		lv_clause_15_0=ruleAlterTableClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_15_0, 
        		"AlterTableClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getCreateViewStatementAction_2_0(),
            $current);
    }
)	otherlv_17='create' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatmentAccess().getCreateKeyword_2_1());
    }
	otherlv_18='view' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStatmentAccess().getViewKeyword_2_2());
    }
(
(
		lv_name_19_0=RULE_ID
		{
			newLeafNode(lv_name_19_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_19_0, 
        		"ID");
	    }

)
)	otherlv_20='as' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStatmentAccess().getAsKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getSelectStatementSelectStatementParserRuleCall_2_5_0()); 
	    }
		lv_selectStatement_21_0=ruleSelectStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		set(
       			$current, 
       			"selectStatement",
        		lv_selectStatement_21_0, 
        		"SelectStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getDropTableStatementAction_3_0(),
            $current);
    }
)	otherlv_23='drop' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStatmentAccess().getDropKeyword_3_1());
    }
	otherlv_24='table' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getStatmentAccess().getTableKeyword_3_2());
    }
(	otherlv_25='if' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getStatmentAccess().getIfKeyword_3_3_0());
    }
	otherlv_26='exists' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStatmentAccess().getExistsKeyword_3_3_1());
    }
)?(
(
		lv_name_27_0=RULE_ID
		{
			newLeafNode(lv_name_27_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_3_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_27_0, 
        		"ID");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getDropViewStatementAction_4_0(),
            $current);
    }
)	otherlv_29='drop' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getStatmentAccess().getDropKeyword_4_1());
    }
	otherlv_30='view' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getStatmentAccess().getViewKeyword_4_2());
    }
(	otherlv_31='if' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getStatmentAccess().getIfKeyword_4_3_0());
    }
	otherlv_32='exists' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getStatmentAccess().getExistsKeyword_4_3_1());
    }
)?(
(
		lv_name_33_0=RULE_ID
		{
			newLeafNode(lv_name_33_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_4_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_33_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleAlterTableClause
entryRuleAlterTableClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlterTableClauseRule()); }
	 iv_ruleAlterTableClause=ruleAlterTableClause 
	 { $current=$iv_ruleAlterTableClause.current; } 
	 EOF 
;

// Rule AlterTableClause
ruleAlterTableClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlterTableClauseAccess().getAlterTableRenameClauseAction_0_0(),
            $current);
    }
)	otherlv_1='rename to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlterTableClauseAccess().getRenameToKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAlterTableClauseAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlterTableClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlterTableClauseAccess().getAlterTableAddColumnClauseAction_1_0(),
            $current);
    }
)	otherlv_4='add column' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlterTableClauseAccess().getAddColumnKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlterTableClauseAccess().getColumnDefColumnDefParserRuleCall_1_2_0()); 
	    }
		lv_columnDef_5_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlterTableClauseRule());
	        }
       		set(
       			$current, 
       			"columnDef",
        		lv_columnDef_5_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleColumnDef
entryRuleColumnDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnDefRule()); }
	 iv_ruleColumnDef=ruleColumnDef 
	 { $current=$iv_ruleColumnDef.current; } 
	 EOF 
;

// Rule ColumnDef
ruleColumnDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getColumnDefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnDefAccess().getTypeColumnTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleColumnType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ColumnType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnDefAccess().getConstraintsColumnConstraintParserRuleCall_2_0()); 
	    }
		lv_constraints_2_0=ruleColumnConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnDefRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"ColumnConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleColumnConstraint
entryRuleColumnConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnConstraintRule()); }
	 iv_ruleColumnConstraint=ruleColumnConstraint 
	 { $current=$iv_ruleColumnConstraint.current; } 
	 EOF 
;

// Rule ColumnConstraint
ruleColumnConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getPrimaryKeyColumnConstraintAction_0_0(),
            $current);
    }
)	otherlv_1='primary' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnConstraintAccess().getPrimaryKeyword_0_1());
    }
	otherlv_2='key' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getColumnConstraintAccess().getKeyKeyword_0_2());
    }
((
(
		lv_asc_3_0=	'asc' 
    {
        newLeafNode(lv_asc_3_0, grammarAccess.getColumnConstraintAccess().getAscAscKeyword_0_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "asc", true, "asc");
	    }

)
)
    |(
(
		lv_desc_4_0=	'desc' 
    {
        newLeafNode(lv_desc_4_0, grammarAccess.getColumnConstraintAccess().getDescDescKeyword_0_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "desc", true, "desc");
	    }

)
))?(
(
		lv_autoincrement_5_0=	'autoincrement' 
    {
        newLeafNode(lv_autoincrement_5_0, grammarAccess.getColumnConstraintAccess().getAutoincrementAutoincrementKeyword_0_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "autoincrement", true, "autoincrement");
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getNotNullConstraintAction_1_0(),
            $current);
    }
)	otherlv_7='not' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getColumnConstraintAccess().getNotKeyword_1_1());
    }
	otherlv_8='null' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getColumnConstraintAccess().getNullKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnConstraintAccess().getConflictClauseConflictClauseParserRuleCall_1_3_0()); 
	    }
		lv_conflictClause_9_0=ruleConflictClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnConstraintRule());
	        }
       		set(
       			$current, 
       			"conflictClause",
        		lv_conflictClause_9_0, 
        		"ConflictClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getDefaultConstraintAction_2_0(),
            $current);
    }
)	otherlv_11='default' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getColumnConstraintAccess().getDefaultKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnConstraintAccess().getDefaultValueDefaultValueParserRuleCall_2_2_0()); 
	    }
		lv_defaultValue_12_0=ruleDefaultValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnConstraintRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_12_0, 
        		"DefaultValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDefaultValue
entryRuleDefaultValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueRule()); }
	 iv_ruleDefaultValue=ruleDefaultValue 
	 { $current=$iv_ruleDefaultValue.current; } 
	 EOF 
;

// Rule DefaultValue
ruleDefaultValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultValueAccess().getLiteralDefaultValueAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getLiteralLiteralValueParserRuleCall_0_1_0()); 
	    }
		lv_literal_1_0=ruleLiteralValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"LiteralValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultValueAccess().getExpressionDefaultValueAction_1_0(),
            $current);
    }
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefaultValueAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getExpressionSqlExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expression_4_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefaultValueAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleTableConstraint
entryRuleTableConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableConstraintRule()); }
	 iv_ruleTableConstraint=ruleTableConstraint 
	 { $current=$iv_ruleTableConstraint.current; } 
	 EOF 
;

// Rule TableConstraint
ruleTableConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTableConstraintAccess().getUniqueTableContraintAction_0_0(),
            $current);
    }
)(	otherlv_1='constraint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTableConstraintAccess().getConstraintKeyword_0_1_0());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTableConstraintAccess().getNameIDTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))?	otherlv_3='unique' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTableConstraintAccess().getUniqueKeyword_0_2());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTableConstraintAccess().getLeftParenthesisKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getColumnsIndexedColumnParserRuleCall_0_4_0()); 
	    }
		lv_columns_5_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_5_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTableConstraintAccess().getCommaKeyword_0_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getColumnsIndexedColumnParserRuleCall_0_5_1_0()); 
	    }
		lv_columns_7_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_7_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTableConstraintAccess().getRightParenthesisKeyword_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getConflictClauseConflictClauseParserRuleCall_0_7_0()); 
	    }
		lv_conflictClause_9_0=ruleConflictClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		set(
       			$current, 
       			"conflictClause",
        		lv_conflictClause_9_0, 
        		"ConflictClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTableConstraintAccess().getPrimaryContraintAction_1_0(),
            $current);
    }
)(	otherlv_11='constraint' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTableConstraintAccess().getConstraintKeyword_1_1_0());
    }
(
(
		lv_name_12_0=RULE_ID
		{
			newLeafNode(lv_name_12_0, grammarAccess.getTableConstraintAccess().getNameIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_12_0, 
        		"ID");
	    }

)
))?	otherlv_13='primary' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTableConstraintAccess().getPrimaryKeyword_1_2());
    }
	otherlv_14='key' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTableConstraintAccess().getKeyKeyword_1_3());
    }
	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTableConstraintAccess().getLeftParenthesisKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getColumnsIndexedColumnParserRuleCall_1_5_0()); 
	    }
		lv_columns_16_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_16_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTableConstraintAccess().getCommaKeyword_1_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getColumnsIndexedColumnParserRuleCall_1_6_1_0()); 
	    }
		lv_columns_18_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_18_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTableConstraintAccess().getRightParenthesisKeyword_1_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getConflictClauseConflictClauseParserRuleCall_1_8_0()); 
	    }
		lv_conflictClause_20_0=ruleConflictClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		set(
       			$current, 
       			"conflictClause",
        		lv_conflictClause_20_0, 
        		"ConflictClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTableConstraintAccess().getCheckTableConstraintAction_2_0(),
            $current);
    }
)(	otherlv_22='constraint' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTableConstraintAccess().getConstraintKeyword_2_1_0());
    }
(
(
		lv_name_23_0=RULE_ID
		{
			newLeafNode(lv_name_23_0, grammarAccess.getTableConstraintAccess().getNameIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_23_0, 
        		"ID");
	    }

)
))?	otherlv_24='check' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getTableConstraintAccess().getCheckKeyword_2_2());
    }
	otherlv_25='(' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTableConstraintAccess().getLeftParenthesisKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableConstraintAccess().getExpressionSqlExpressionParserRuleCall_2_4_0()); 
	    }
		lv_expression_26_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableConstraintRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_26_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTableConstraintAccess().getRightParenthesisKeyword_2_5());
    }
))
;





// Entry rule entryRuleIndexedColumn
entryRuleIndexedColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedColumnRule()); }
	 iv_ruleIndexedColumn=ruleIndexedColumn 
	 { $current=$iv_ruleIndexedColumn.current; } 
	 EOF 
;

// Rule IndexedColumn
ruleIndexedColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIndexedColumnAccess().getNameColumnDefCrossReference_0_0()); 
	}

)
)((
(
		lv_asc_1_0=	'asc' 
    {
        newLeafNode(lv_asc_1_0, grammarAccess.getIndexedColumnAccess().getAscAscKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
       		setWithLastConsumed($current, "asc", true, "asc");
	    }

)
)
    |(
(
		lv_desc_2_0=	'desc' 
    {
        newLeafNode(lv_desc_2_0, grammarAccess.getIndexedColumnAccess().getDescDescKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
       		setWithLastConsumed($current, "desc", true, "desc");
	    }

)
))?)
;





// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	 iv_ruleSelectStatement=ruleSelectStatement 
	 { $current=$iv_ruleSelectStatement.current; } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getCoreStatementsSelectCoreParserRuleCall_0_0()); 
	    }
		lv_coreStatements_0_0=ruleSelectCore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		add(
       			$current, 
       			"coreStatements",
        		lv_coreStatements_0_0, 
        		"SelectCore");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getSelectStatementAccess().getCompoundOperatorParserRuleCall_1_0()); 
    }
ruleCompoundOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getCoreStatementsSelectCoreParserRuleCall_1_1_0()); 
	    }
		lv_coreStatements_2_0=ruleSelectCore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		add(
       			$current, 
       			"coreStatements",
        		lv_coreStatements_2_0, 
        		"SelectCore");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3='order' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectStatementAccess().getOrderKeyword_2_0());
    }
	otherlv_4='by' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectStatementAccess().getByKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getOrderingTermsOrderingTermParserRuleCall_2_2_0()); 
	    }
		lv_orderingTerms_5_0=ruleOrderingTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		add(
       			$current, 
       			"orderingTerms",
        		lv_orderingTerms_5_0, 
        		"OrderingTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectStatementAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getOrderingTermsOrderingTermParserRuleCall_2_3_1_0()); 
	    }
		lv_orderingTerms_7_0=ruleOrderingTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		add(
       			$current, 
       			"orderingTerms",
        		lv_orderingTerms_7_0, 
        		"OrderingTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleCompoundOperator
entryRuleCompoundOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundOperatorRule()); } 
	 iv_ruleCompoundOperator=ruleCompoundOperator 
	 { $current=$iv_ruleCompoundOperator.current.getText(); }  
	 EOF 
;

// Rule CompoundOperator
ruleCompoundOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='union all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundOperatorAccess().getUnionAllKeyword_0()); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundOperatorAccess().getUnionKeyword_1()); 
    }

    |
	kw='intersect' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundOperatorAccess().getIntersectKeyword_2()); 
    }

    |
	kw='except' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundOperatorAccess().getExceptKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleOrderingTerm
entryRuleOrderingTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrderingTermRule()); }
	 iv_ruleOrderingTerm=ruleOrderingTerm 
	 { $current=$iv_ruleOrderingTerm.current; } 
	 EOF 
;

// Rule OrderingTerm
ruleOrderingTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrderingTermAccess().getExpressionSqlExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderingTermRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_asc_1_0=	'asc' 
    {
        newLeafNode(lv_asc_1_0, grammarAccess.getOrderingTermAccess().getAscAscKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderingTermRule());
	        }
       		setWithLastConsumed($current, "asc", true, "asc");
	    }

)
)
    |(
(
		lv_desc_2_0=	'desc' 
    {
        newLeafNode(lv_desc_2_0, grammarAccess.getOrderingTermAccess().getDescDescKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderingTermRule());
	        }
       		setWithLastConsumed($current, "desc", true, "desc");
	    }

)
))?)
;





// Entry rule entryRuleSelectCore
entryRuleSelectCore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectCoreRule()); }
	 iv_ruleSelectCore=ruleSelectCore 
	 { $current=$iv_ruleSelectCore.current; } 
	 EOF 
;

// Rule SelectCore
ruleSelectCore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectCoreAccess().getSelectKeyword_0());
    }
((
(
		lv_distinct_1_0=	'distinct' 
    {
        newLeafNode(lv_distinct_1_0, grammarAccess.getSelectCoreAccess().getDistinctDistinctKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectCoreRule());
	        }
       		setWithLastConsumed($current, "distinct", true, "distinct");
	    }

)
)
    |(
(
		lv_all_2_0=	'all' 
    {
        newLeafNode(lv_all_2_0, grammarAccess.getSelectCoreAccess().getAllAllKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectCoreRule());
	        }
       		setWithLastConsumed($current, "all", true, "all");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getResultColumnsResultColumnParserRuleCall_2_0()); 
	    }
		lv_resultColumns_3_0=ruleResultColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"resultColumns",
        		lv_resultColumns_3_0, 
        		"ResultColumn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectCoreAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getResultColumnsResultColumnParserRuleCall_3_1_0()); 
	    }
		lv_resultColumns_5_0=ruleResultColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"resultColumns",
        		lv_resultColumns_5_0, 
        		"ResultColumn");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6='from' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectCoreAccess().getFromKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getSourceJoinSourceParserRuleCall_4_1_0()); 
	    }
		lv_source_7_0=ruleJoinSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_7_0, 
        		"JoinSource");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='where' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelectCoreAccess().getWhereKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getWhereExpressionSqlExpressionParserRuleCall_5_1_0()); 
	    }
		lv_whereExpression_9_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		set(
       			$current, 
       			"whereExpression",
        		lv_whereExpression_9_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='group' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSelectCoreAccess().getGroupKeyword_6_0());
    }
	otherlv_11='by' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSelectCoreAccess().getByKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getGroupByExpressionsSqlExpressionParserRuleCall_6_2_0()); 
	    }
		lv_groupByExpressions_12_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"groupByExpressions",
        		lv_groupByExpressions_12_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getSelectCoreAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0()); 
	    }
		lv_groupByExpressions_14_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"groupByExpressions",
        		lv_groupByExpressions_14_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleJoinSource
entryRuleJoinSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinSourceRule()); }
	 iv_ruleJoinSource=ruleJoinSource 
	 { $current=$iv_ruleJoinSource.current; } 
	 EOF 
;

// Rule JoinSource
ruleJoinSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinSourceAccess().getSourceSingleSourceParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleSingleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinSourceRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"SingleSource");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinSourceAccess().getJoinStatementsJoinStatementParserRuleCall_1_0()); 
	    }
		lv_joinStatements_1_0=ruleJoinStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinSourceRule());
	        }
       		add(
       			$current, 
       			"joinStatements",
        		lv_joinStatements_1_0, 
        		"JoinStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSingleSource
entryRuleSingleSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleSourceRule()); }
	 iv_ruleSingleSource=ruleSingleSource 
	 { $current=$iv_ruleSingleSource.current; } 
	 EOF 
;

// Rule SingleSource
ruleSingleSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceTableAction_0_0(),
            $current);
    }
)(
(
		lv_tableName_1_0=RULE_ID
		{
			newLeafNode(lv_tableName_1_0, grammarAccess.getSingleSourceAccess().getTableNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleSourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tableName",
        		lv_tableName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleSourceAccess().getAsKeyword_0_2_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getSingleSourceAccess().getNameIDTerminalRuleCall_0_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleSourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceSelectStatementAction_1_0(),
            $current);
    }
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleSourceAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleSourceAccess().getSelectStatementSelectStatementParserRuleCall_1_2_0()); 
	    }
		lv_selectStatement_6_0=ruleSelectStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleSourceRule());
	        }
       		set(
       			$current, 
       			"selectStatement",
        		lv_selectStatement_6_0, 
        		"SelectStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSingleSourceAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceJoinAction_2_0(),
            $current);
    }
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSingleSourceAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleSourceAccess().getJoinSourceJoinSourceParserRuleCall_2_2_0()); 
	    }
		lv_joinSource_10_0=ruleJoinSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleSourceRule());
	        }
       		set(
       			$current, 
       			"joinSource",
        		lv_joinSource_10_0, 
        		"JoinSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSingleSourceAccess().getRightParenthesisKeyword_2_3());
    }
))
;





// Entry rule entryRuleJoinStatement
entryRuleJoinStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinStatementRule()); }
	 iv_ruleJoinStatement=ruleJoinStatement 
	 { $current=$iv_ruleJoinStatement.current; } 
	 EOF 
;

// Rule JoinStatement
ruleJoinStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJoinStatementAccess().getJoinStatementAction_0(),
            $current);
    }
)(
(
		lv_natural_1_0=	'natural' 
    {
        newLeafNode(lv_natural_1_0, grammarAccess.getJoinStatementAccess().getNaturalNaturalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "natural", true, "natural");
	    }

)
)?(((
(
		lv_left_2_0=	'left' 
    {
        newLeafNode(lv_left_2_0, grammarAccess.getJoinStatementAccess().getLeftLeftKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "left", true, "left");
	    }

)
)(
(
		lv_outer_3_0=	'outer' 
    {
        newLeafNode(lv_outer_3_0, grammarAccess.getJoinStatementAccess().getOuterOuterKeyword_2_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "outer", true, "outer");
	    }

)
)?)
    |(
(
		lv_inner_4_0=	'inner' 
    {
        newLeafNode(lv_inner_4_0, grammarAccess.getJoinStatementAccess().getInnerInnerKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "inner", true, "inner");
	    }

)
)
    |(
(
		lv_cross_5_0=	'cross' 
    {
        newLeafNode(lv_cross_5_0, grammarAccess.getJoinStatementAccess().getCrossCrossKeyword_2_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "cross", true, "cross");
	    }

)
))?	otherlv_6='join' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJoinStatementAccess().getJoinKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getSingleSourceSingleSourceParserRuleCall_4_0()); 
	    }
		lv_singleSource_7_0=ruleSingleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"singleSource",
        		lv_singleSource_7_0, 
        		"SingleSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='on' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJoinStatementAccess().getOnKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getExpressionSqlExpressionParserRuleCall_6_0()); 
	    }
		lv_expression_9_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResultColumn
entryRuleResultColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultColumnRule()); }
	 iv_ruleResultColumn=ruleResultColumn 
	 { $current=$iv_ruleResultColumn.current; } 
	 EOF 
;

// Rule ResultColumn
ruleResultColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnAllAction_0_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResultColumnAccess().getAsteriskKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnAllWithTableRefAction_1_0(),
            $current);
    }
)(
(
		lv_tableRef_3_0=RULE_ID
		{
			newLeafNode(lv_tableRef_3_0, grammarAccess.getResultColumnAccess().getTableRefIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResultColumnRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tableRef",
        		lv_tableRef_3_0, 
        		"ID");
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getResultColumnAccess().getFullStopKeyword_1_2());
    }
	otherlv_5='*' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResultColumnAccess().getAsteriskKeyword_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnExpressionAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResultColumnAccess().getExpressionSqlExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_7_0=ruleSqlExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultColumnRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"SqlExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='as' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getResultColumnAccess().getAsKeyword_2_2_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getResultColumnAccess().getNameIDTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResultColumnRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
))?))
;





// Entry rule entryRuleConflictClause
entryRuleConflictClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConflictClauseRule()); }
	 iv_ruleConflictClause=ruleConflictClause 
	 { $current=$iv_ruleConflictClause.current; } 
	 EOF 
;

// Rule ConflictClause
ruleConflictClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConflictClauseAccess().getOnKeyword_0());
    }
	otherlv_1='conflict' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConflictClauseAccess().getConflictKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConflictClauseAccess().getResolutionConflictResolutionEnumRuleCall_2_0()); 
	    }
		lv_resolution_2_0=ruleConflictResolution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConflictClauseRule());
	        }
       		set(
       			$current, 
       			"resolution",
        		lv_resolution_2_0, 
        		"ConflictResolution");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current; } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getNumericLiteralAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralValueAccess().getNumberSignedNumberParserRuleCall_0_1_0()); 
	    }
		lv_number_1_0=ruleSignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralValueRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_1_0, 
        		"SignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getStringLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_literal_3_0=RULE_STRING
		{
			newLeafNode(lv_literal_3_0, grammarAccess.getLiteralValueAccess().getLiteralSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal",
        		lv_literal_3_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getNullLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_literal_5_0=	'null' 
    {
        newLeafNode(lv_literal_5_0, grammarAccess.getLiteralValueAccess().getLiteralNullKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_5_0, "null");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentTimeLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_literal_7_0=	'current_time' 
    {
        newLeafNode(lv_literal_7_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_timeKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_7_0, "current_time");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentDateLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_literal_9_0=	'current_date' 
    {
        newLeafNode(lv_literal_9_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_dateKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_9_0, "current_date");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentTimeStampLiteralAction_5_0(),
            $current);
    }
)(
(
		lv_literal_11_0=	'current_time_stamp' 
    {
        newLeafNode(lv_literal_11_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_time_stampKeyword_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_11_0, "current_time_stamp");
	    }

)
)))
;





// Entry rule entryRuleSignedNumber
entryRuleSignedNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedNumberRule()); } 
	 iv_ruleSignedNumber=ruleSignedNumber 
	 { $current=$iv_ruleSignedNumber.current.getText(); }  
	 EOF 
;

// Rule SignedNumber
ruleSignedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedNumberAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getSignedNumberAccess().getNUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule ColumnType
ruleColumnType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='text' 
	{
        $current = grammarAccess.getColumnTypeAccess().getTextEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColumnTypeAccess().getTextEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='integer' 
	{
        $current = grammarAccess.getColumnTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColumnTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='real' 
	{
        $current = grammarAccess.getColumnTypeAccess().getRealEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getColumnTypeAccess().getRealEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='blob' 
	{
        $current = grammarAccess.getColumnTypeAccess().getBlobEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getColumnTypeAccess().getBlobEnumLiteralDeclaration_3()); 
    }
));



// Rule ConflictResolution
ruleConflictResolution returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='rollback' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getRollbackEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConflictResolutionAccess().getRollbackEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abort' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getAbortEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConflictResolutionAccess().getAbortEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='fail' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getFailEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConflictResolutionAccess().getFailEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='ignore' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getIgnoreEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getConflictResolutionAccess().getIgnoreEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='replace' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getReplaceEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getConflictResolutionAccess().getReplaceEnumLiteralDeclaration_4()); 
    }
));



RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : '$$$don\'t use this anymore$$$';

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


