/*
* generated by Xtext
*/

package com.robotoworks.mechanoid.sqlite.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqliteModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameFQNParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cDatabaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatabaseDatabaseBlockParserRuleCall_2_0 = (RuleCall)cDatabaseAssignment_2.eContents().get(0);
		
		//Model:
		//	"package" packageName=FQN database=DatabaseBlock;
		public ParserRule getRule() { return rule; }

		//"package" packageName=FQN database=DatabaseBlock
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=FQN
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//FQN
		public RuleCall getPackageNameFQNParserRuleCall_1_0() { return cPackageNameFQNParserRuleCall_1_0; }

		//database=DatabaseBlock
		public Assignment getDatabaseAssignment_2() { return cDatabaseAssignment_2; }

		//DatabaseBlock
		public RuleCall getDatabaseDatabaseBlockParserRuleCall_2_0() { return cDatabaseDatabaseBlockParserRuleCall_2_0; }
	}

	public class DatabaseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigConfigBlockParserRuleCall_3_0 = (RuleCall)cConfigAssignment_3.eContents().get(0);
		private final Assignment cMigrationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMigrationsMigrationBlockParserRuleCall_4_0 = (RuleCall)cMigrationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DatabaseBlock:
		//	"database" name=ID "{" config=ConfigBlock? migrations+=MigrationBlock* "}";
		public ParserRule getRule() { return rule; }

		//"database" name=ID "{" config=ConfigBlock? migrations+=MigrationBlock* "}"
		public Group getGroup() { return cGroup; }

		//"database"
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//config=ConfigBlock?
		public Assignment getConfigAssignment_3() { return cConfigAssignment_3; }

		//ConfigBlock
		public RuleCall getConfigConfigBlockParserRuleCall_3_0() { return cConfigConfigBlockParserRuleCall_3_0; }

		//migrations+=MigrationBlock*
		public Assignment getMigrationsAssignment_4() { return cMigrationsAssignment_4; }

		//MigrationBlock
		public RuleCall getMigrationsMigrationBlockParserRuleCall_4_0() { return cMigrationsMigrationBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConfigBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsConfigurationStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConfigBlock:
		//	{ConfigBlock} "config" "{" statements+=ConfigurationStatement* "}";
		public ParserRule getRule() { return rule; }

		//{ConfigBlock} "config" "{" statements+=ConfigurationStatement* "}"
		public Group getGroup() { return cGroup; }

		//{ConfigBlock}
		public Action getConfigBlockAction_0() { return cConfigBlockAction_0; }

		//"config"
		public Keyword getConfigKeyword_1() { return cConfigKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//statements+=ConfigurationStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//ConfigurationStatement
		public RuleCall getStatementsConfigurationStatementParserRuleCall_3_0() { return cStatementsConfigurationStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConfigurationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cActionStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cActionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cPathAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cPathAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cActiveRecordRegistrationStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cActiveKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//ConfigurationStatement:
		//	{ActionStatement} "action" name=ID path=STRING | {ActiveRecordRegistrationStatement} "active" name=ID;
		public ParserRule getRule() { return rule; }

		//{ActionStatement} "action" name=ID path=STRING | {ActiveRecordRegistrationStatement} "active" name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ActionStatement} "action" name=ID path=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{ActionStatement}
		public Action getActionStatementAction_0_0() { return cActionStatementAction_0_0; }

		//"action"
		public Keyword getActionKeyword_0_1() { return cActionKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//path=STRING
		public Assignment getPathAssignment_0_3() { return cPathAssignment_0_3; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0_3_0() { return cPathSTRINGTerminalRuleCall_0_3_0; }

		//{ActiveRecordRegistrationStatement} "active" name=ID
		public Group getGroup_1() { return cGroup_1; }

		//{ActiveRecordRegistrationStatement}
		public Action getActiveRecordRegistrationStatementAction_1_0() { return cActiveRecordRegistrationStatementAction_1_0; }

		//"active"
		public Keyword getActiveKeyword_1_1() { return cActiveKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}

	public class MigrationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigrationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMigrationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMigrationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStatementsDDLStatementParserRuleCall_3_0_0 = (RuleCall)cStatementsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cStatementsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cStatementsDDLStatementParserRuleCall_3_2_0_0 = (RuleCall)cStatementsAssignment_3_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MigrationBlock:
		//	{MigrationBlock} "migration" "{" (statements+=DDLStatement ";" (statements+=DDLStatement ";")*)? "}";
		public ParserRule getRule() { return rule; }

		//{MigrationBlock} "migration" "{" (statements+=DDLStatement ";" (statements+=DDLStatement ";")*)? "}"
		public Group getGroup() { return cGroup; }

		//{MigrationBlock}
		public Action getMigrationBlockAction_0() { return cMigrationBlockAction_0; }

		//"migration"
		public Keyword getMigrationKeyword_1() { return cMigrationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(statements+=DDLStatement ";" (statements+=DDLStatement ";")*)?
		public Group getGroup_3() { return cGroup_3; }

		//statements+=DDLStatement
		public Assignment getStatementsAssignment_3_0() { return cStatementsAssignment_3_0; }

		//DDLStatement
		public RuleCall getStatementsDDLStatementParserRuleCall_3_0_0() { return cStatementsDDLStatementParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//(statements+=DDLStatement ";")*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//statements+=DDLStatement
		public Assignment getStatementsAssignment_3_2_0() { return cStatementsAssignment_3_2_0; }

		//DDLStatement
		public RuleCall getStatementsDDLStatementParserRuleCall_3_2_0_0() { return cStatementsDDLStatementParserRuleCall_3_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_1() { return cSemicolonKeyword_3_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SqlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlExpression");
		private final Assignment cRootAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootExprConcatParserRuleCall_0 = (RuleCall)cRootAssignment.eContents().get(0);
		
		/// *
		//
		// * Expressions
		//
		// * / SqlExpression:
		//	root=ExprConcat;
		public ParserRule getRule() { return rule; }

		//root=ExprConcat
		public Assignment getRootAssignment() { return cRootAssignment; }

		//ExprConcat
		public RuleCall getRootExprConcatParserRuleCall_0() { return cRootExprConcatParserRuleCall_0; }
	}

	public class ExprConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprConcat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprConcatLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprConcat returns Expression:
		//	ExprMult ({ExprConcat.left=current} op="||" right=ExprMult)*;
		public ParserRule getRule() { return rule; }

		//ExprMult ({ExprConcat.left=current} op="||" right=ExprMult)*
		public Group getGroup() { return cGroup; }

		//ExprMult
		public RuleCall getExprMultParserRuleCall_0() { return cExprMultParserRuleCall_0; }

		//({ExprConcat.left=current} op="||" right=ExprMult)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprConcat.left=current}
		public Action getExprConcatLeftAction_1_0() { return cExprConcatLeftAction_1_0; }

		//op="||"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=ExprMult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprMult
		public RuleCall getRightExprMultParserRuleCall_1_2_0() { return cRightExprMultParserRuleCall_1_2_0; }
	}

	public class ExprMultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAddParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAddParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprMult returns Expression:
		//	ExprAdd ({ExprMult.left=current} op=("*" | "/" | "%") right=ExprAdd)*;
		public ParserRule getRule() { return rule; }

		//ExprAdd ({ExprMult.left=current} op=("*" | "/" | "%") right=ExprAdd)*
		public Group getGroup() { return cGroup; }

		//ExprAdd
		public RuleCall getExprAddParserRuleCall_0() { return cExprAddParserRuleCall_0; }

		//({ExprMult.left=current} op=("*" | "/" | "%") right=ExprAdd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMult.left=current}
		public Action getExprMultLeftAction_1_0() { return cExprMultLeftAction_1_0; }

		//op=("*" | "/" | "%")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "%"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//right=ExprAdd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAdd
		public RuleCall getRightExprAddParserRuleCall_1_2_0() { return cRightExprAddParserRuleCall_1_2_0; }
	}

	public class ExprAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprBitParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAddLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprBitParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAdd returns Expression:
		//	ExprBit ({ExprAdd.left=current} op=("+" | "-") right=ExprBit)*;
		public ParserRule getRule() { return rule; }

		//ExprBit ({ExprAdd.left=current} op=("+" | "-") right=ExprBit)*
		public Group getGroup() { return cGroup; }

		//ExprBit
		public RuleCall getExprBitParserRuleCall_0() { return cExprBitParserRuleCall_0; }

		//({ExprAdd.left=current} op=("+" | "-") right=ExprBit)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAdd.left=current}
		public Action getExprAddLeftAction_1_0() { return cExprAddLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=ExprBit
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprBit
		public RuleCall getRightExprBitParserRuleCall_1_2_0() { return cRightExprBitParserRuleCall_1_2_0; }
	}

	public class ExprBitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprBit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprRelateParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprBitLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpVerticalLineKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprRelateParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprBit returns Expression:
		//	ExprRelate ({ExprBit.left=current} op=("<<" | ">>" | "&" | "|") right=ExprRelate)*;
		public ParserRule getRule() { return rule; }

		//ExprRelate ({ExprBit.left=current} op=("<<" | ">>" | "&" | "|") right=ExprRelate)*
		public Group getGroup() { return cGroup; }

		//ExprRelate
		public RuleCall getExprRelateParserRuleCall_0() { return cExprRelateParserRuleCall_0; }

		//({ExprBit.left=current} op=("<<" | ">>" | "&" | "|") right=ExprRelate)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBit.left=current}
		public Action getExprBitLeftAction_1_0() { return cExprBitLeftAction_1_0; }

		//op=("<<" | ">>" | "&" | "|")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<<" | ">>" | "&" | "|"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<<"
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }

		//">>"
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//"&"
		public Keyword getOpAmpersandKeyword_1_1_0_2() { return cOpAmpersandKeyword_1_1_0_2; }

		//"|"
		public Keyword getOpVerticalLineKeyword_1_1_0_3() { return cOpVerticalLineKeyword_1_1_0_3; }

		//right=ExprRelate
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprRelate
		public RuleCall getRightExprRelateParserRuleCall_1_2_0() { return cRightExprRelateParserRuleCall_1_2_0; }
	}

	public class ExprRelateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprRelate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprRelateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprEqualParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprRelate returns Expression:
		//	ExprEqual ({ExprRelate.left=current} op=("<" | "<=" | ">" | ">=") right=ExprEqual)*;
		public ParserRule getRule() { return rule; }

		//ExprEqual ({ExprRelate.left=current} op=("<" | "<=" | ">" | ">=") right=ExprEqual)*
		public Group getGroup() { return cGroup; }

		//ExprEqual
		public RuleCall getExprEqualParserRuleCall_0() { return cExprEqualParserRuleCall_0; }

		//({ExprRelate.left=current} op=("<" | "<=" | ">" | ">=") right=ExprEqual)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprRelate.left=current}
		public Action getExprRelateLeftAction_1_0() { return cExprRelateLeftAction_1_0; }

		//op=("<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//right=ExprEqual
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprEqual
		public RuleCall getRightExprEqualParserRuleCall_1_2_0() { return cRightExprEqualParserRuleCall_1_2_0; }
	}

	public class ExprEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprEqualLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpIsKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpIsNotKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Keyword cOpInKeyword_1_1_0_6 = (Keyword)cOpAlternatives_1_1_0.eContents().get(6);
		private final Keyword cOpLikeKeyword_1_1_0_7 = (Keyword)cOpAlternatives_1_1_0.eContents().get(7);
		private final Keyword cOpGlobKeyword_1_1_0_8 = (Keyword)cOpAlternatives_1_1_0.eContents().get(8);
		private final Keyword cOpMatchKeyword_1_1_0_9 = (Keyword)cOpAlternatives_1_1_0.eContents().get(9);
		private final Keyword cOpRegexpKeyword_1_1_0_10 = (Keyword)cOpAlternatives_1_1_0.eContents().get(10);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprEqual returns Expression:
		//	ExprAnd ({ExprEqual.left=current} op=("=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" |
		//	"regexp") right=ExprAnd)*;
		public ParserRule getRule() { return rule; }

		//ExprAnd ({ExprEqual.left=current} op=("=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" |
		//"regexp") right=ExprAnd)*
		public Group getGroup() { return cGroup; }

		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }

		//({ExprEqual.left=current} op=("=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp")
		//right=ExprAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprEqual.left=current}
		public Action getExprEqualLeftAction_1_0() { return cExprEqualLeftAction_1_0; }

		//op=("=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_1() { return cOpEqualsSignEqualsSignKeyword_1_1_0_1; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_2() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_2; }

		//"<>"
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_1_0_3() { return cOpLessThanSignGreaterThanSignKeyword_1_1_0_3; }

		//"is"
		public Keyword getOpIsKeyword_1_1_0_4() { return cOpIsKeyword_1_1_0_4; }

		//"is not"
		public Keyword getOpIsNotKeyword_1_1_0_5() { return cOpIsNotKeyword_1_1_0_5; }

		//"in"
		public Keyword getOpInKeyword_1_1_0_6() { return cOpInKeyword_1_1_0_6; }

		//"like"
		public Keyword getOpLikeKeyword_1_1_0_7() { return cOpLikeKeyword_1_1_0_7; }

		//"glob"
		public Keyword getOpGlobKeyword_1_1_0_8() { return cOpGlobKeyword_1_1_0_8; }

		//"match"
		public Keyword getOpMatchKeyword_1_1_0_9() { return cOpMatchKeyword_1_1_0_9; }

		//"regexp"
		public Keyword getOpRegexpKeyword_1_1_0_10() { return cOpRegexpKeyword_1_1_0_10; }

		//right=ExprAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAnd
		public RuleCall getRightExprAndParserRuleCall_1_2_0() { return cRightExprAndParserRuleCall_1_2_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAnd returns Expression:
		//	ExprOr ({ExprAnd.left=current} op="and" right=ExprOr)*;
		public ParserRule getRule() { return rule; }

		//ExprOr ({ExprAnd.left=current} op="and" right=ExprOr)*
		public Group getGroup() { return cGroup; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }

		//({ExprAnd.left=current} op="and" right=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAnd.left=current}
		public Action getExprAndLeftAction_1_0() { return cExprAndLeftAction_1_0; }

		//op="and"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }

		//right=ExprOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprOr
		public RuleCall getRightExprOrParserRuleCall_1_2_0() { return cRightExprOrParserRuleCall_1_2_0; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprOr returns Expression:
		//	PrimaryExpression ({ExprOr.left=current} op="or" right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({ExprOr.left=current} op="or" right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({ExprOr.left=current} op="or" right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprOr.left=current}
		public Action getExprOrLeftAction_1_0() { return cExprOrLeftAction_1_0; }

		//op="or"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cColumnLiteralAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cLiteralAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cLiteralValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_0_1_1_0 = (RuleCall)cLiteralValueAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cSqlExpressionParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cSelectStatementExpressionAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Assignment cNotAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final Keyword cNotNotKeyword_0_3_1_0 = (Keyword)cNotAssignment_0_3_1.eContents().get(0);
		private final Assignment cExistsAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final Keyword cExistsExistsKeyword_0_3_2_0 = (Keyword)cExistsAssignment_0_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Assignment cSelectAssignment_0_3_4 = (Assignment)cGroup_0_3.eContents().get(4);
		private final RuleCall cSelectSelectStatementParserRuleCall_0_3_4_0 = (RuleCall)cSelectAssignment_0_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_5 = (Keyword)cGroup_0_3.eContents().get(5);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Action cCaseExpressionAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cCaseKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cCaseExpressionAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cCaseExpressionSqlExpressionParserRuleCall_0_4_2_0 = (RuleCall)cCaseExpressionAssignment_0_4_2.eContents().get(0);
		private final Assignment cCasesAssignment_0_4_3 = (Assignment)cGroup_0_4.eContents().get(3);
		private final RuleCall cCasesCaseParserRuleCall_0_4_3_0 = (RuleCall)cCasesAssignment_0_4_3.eContents().get(0);
		private final Assignment cCasesAssignment_0_4_4 = (Assignment)cGroup_0_4.eContents().get(4);
		private final RuleCall cCasesCaseParserRuleCall_0_4_4_0 = (RuleCall)cCasesAssignment_0_4_4.eContents().get(0);
		private final Group cGroup_0_4_5 = (Group)cGroup_0_4.eContents().get(5);
		private final Keyword cElseKeyword_0_4_5_0 = (Keyword)cGroup_0_4_5.eContents().get(0);
		private final Assignment cElseExpressionAssignment_0_4_5_1 = (Assignment)cGroup_0_4_5.eContents().get(1);
		private final RuleCall cElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0 = (RuleCall)cElseExpressionAssignment_0_4_5_1.eContents().get(0);
		private final Keyword cEndKeyword_0_4_6 = (Keyword)cGroup_0_4.eContents().get(6);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Action cFunctionAction_0_5_0 = (Action)cGroup_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_5_1_0 = (RuleCall)cNameAssignment_0_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_5_2 = (Keyword)cGroup_0_5.eContents().get(2);
		private final Alternatives cAlternatives_0_5_3 = (Alternatives)cGroup_0_5.eContents().get(3);
		private final Assignment cAllAssignment_0_5_3_0 = (Assignment)cAlternatives_0_5_3.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_5_3_0_0 = (Keyword)cAllAssignment_0_5_3_0.eContents().get(0);
		private final Group cGroup_0_5_3_1 = (Group)cAlternatives_0_5_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_0_5_3_1_0 = (Assignment)cGroup_0_5_3_1.eContents().get(0);
		private final RuleCall cArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0 = (RuleCall)cArgumentsAssignment_0_5_3_1_0.eContents().get(0);
		private final Group cGroup_0_5_3_1_1 = (Group)cGroup_0_5_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_5_3_1_1_0 = (Keyword)cGroup_0_5_3_1_1.eContents().get(0);
		private final Assignment cArugmentsAssignment_0_5_3_1_1_1 = (Assignment)cGroup_0_5_3_1_1.eContents().get(1);
		private final RuleCall cArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0 = (RuleCall)cArugmentsAssignment_0_5_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5_4 = (Keyword)cGroup_0_5.eContents().get(4);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Action cCastExpressionAction_0_6_0 = (Action)cGroup_0_6.eContents().get(0);
		private final Keyword cCastKeyword_0_6_1 = (Keyword)cGroup_0_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_6_2 = (Keyword)cGroup_0_6.eContents().get(2);
		private final Assignment cExpressionAssignment_0_6_3 = (Assignment)cGroup_0_6.eContents().get(3);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_0_6_3_0 = (RuleCall)cExpressionAssignment_0_6_3.eContents().get(0);
		private final Keyword cAsKeyword_0_6_4 = (Keyword)cGroup_0_6.eContents().get(4);
		private final Assignment cTypeAssignment_0_6_5 = (Assignment)cGroup_0_6.eContents().get(5);
		private final RuleCall cTypeSqliteDataTypeEnumRuleCall_0_6_5_0 = (RuleCall)cTypeAssignment_0_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6_6 = (Keyword)cGroup_0_6.eContents().get(6);
		private final Assignment cIsnullAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIsnullAlternatives_1_0 = (Alternatives)cIsnullAssignment_1.eContents().get(0);
		private final Keyword cIsnullIsNullKeyword_1_0_0 = (Keyword)cIsnullAlternatives_1_0.eContents().get(0);
		private final Keyword cIsnullNotNullKeyword_1_0_1 = (Keyword)cIsnullAlternatives_1_0.eContents().get(1);
		private final Keyword cIsnullNotnullKeyword_1_0_2 = (Keyword)cIsnullAlternatives_1_0.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//	not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//	cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//	arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")" | {CastExpression} "cast" "(" expression=SqlExpression
		//	"as" type=SqliteDataType ")") isnull?=("is null" | "not null" | "notnull")?;
		public ParserRule getRule() { return rule; }

		//({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")" | {CastExpression} "cast" "(" expression=SqlExpression
		//"as" type=SqliteDataType ")") isnull?=("is null" | "not null" | "notnull")?
		public Group getGroup() { return cGroup; }

		//{ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")" | {CastExpression} "cast" "(" expression=SqlExpression
		//"as" type=SqliteDataType ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{ColumnLiteral} name=FQN
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{ColumnLiteral}
		public Action getColumnLiteralAction_0_0_0() { return cColumnLiteralAction_0_0_0; }

		//name=FQN
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_0_0_1_0() { return cNameFQNParserRuleCall_0_0_1_0; }

		//{Literal} literalValue=LiteralValue
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{Literal}
		public Action getLiteralAction_0_1_0() { return cLiteralAction_0_1_0; }

		//literalValue=LiteralValue
		public Assignment getLiteralValueAssignment_0_1_1() { return cLiteralValueAssignment_0_1_1; }

		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_0_1_1_0() { return cLiteralValueLiteralValueParserRuleCall_0_1_1_0; }

		//"(" SqlExpression ")"
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//SqlExpression
		public RuleCall getSqlExpressionParserRuleCall_0_2_1() { return cSqlExpressionParserRuleCall_0_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//{SelectStatementExpression} not?="not"? exists?="exists"? "(" select=SelectStatement ")"
		public Group getGroup_0_3() { return cGroup_0_3; }

		//{SelectStatementExpression}
		public Action getSelectStatementExpressionAction_0_3_0() { return cSelectStatementExpressionAction_0_3_0; }

		//not?="not"?
		public Assignment getNotAssignment_0_3_1() { return cNotAssignment_0_3_1; }

		//"not"
		public Keyword getNotNotKeyword_0_3_1_0() { return cNotNotKeyword_0_3_1_0; }

		//exists?="exists"?
		public Assignment getExistsAssignment_0_3_2() { return cExistsAssignment_0_3_2; }

		//"exists"
		public Keyword getExistsExistsKeyword_0_3_2_0() { return cExistsExistsKeyword_0_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3_3() { return cLeftParenthesisKeyword_0_3_3; }

		//select=SelectStatement
		public Assignment getSelectAssignment_0_3_4() { return cSelectAssignment_0_3_4; }

		//SelectStatement
		public RuleCall getSelectSelectStatementParserRuleCall_0_3_4_0() { return cSelectSelectStatementParserRuleCall_0_3_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_5() { return cRightParenthesisKeyword_0_3_5; }

		//{CaseExpression} "case" caseExpression=SqlExpression? cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)?
		//"end"
		public Group getGroup_0_4() { return cGroup_0_4; }

		//{CaseExpression}
		public Action getCaseExpressionAction_0_4_0() { return cCaseExpressionAction_0_4_0; }

		//"case"
		public Keyword getCaseKeyword_0_4_1() { return cCaseKeyword_0_4_1; }

		//caseExpression=SqlExpression?
		public Assignment getCaseExpressionAssignment_0_4_2() { return cCaseExpressionAssignment_0_4_2; }

		//SqlExpression
		public RuleCall getCaseExpressionSqlExpressionParserRuleCall_0_4_2_0() { return cCaseExpressionSqlExpressionParserRuleCall_0_4_2_0; }

		//cases+=Case
		public Assignment getCasesAssignment_0_4_3() { return cCasesAssignment_0_4_3; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_4_3_0() { return cCasesCaseParserRuleCall_0_4_3_0; }

		//cases+=Case*
		public Assignment getCasesAssignment_0_4_4() { return cCasesAssignment_0_4_4; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_4_4_0() { return cCasesCaseParserRuleCall_0_4_4_0; }

		//("else" elseExpression=SqlExpression)?
		public Group getGroup_0_4_5() { return cGroup_0_4_5; }

		//"else"
		public Keyword getElseKeyword_0_4_5_0() { return cElseKeyword_0_4_5_0; }

		//elseExpression=SqlExpression
		public Assignment getElseExpressionAssignment_0_4_5_1() { return cElseExpressionAssignment_0_4_5_1; }

		//SqlExpression
		public RuleCall getElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0() { return cElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0; }

		//"end"
		public Keyword getEndKeyword_0_4_6() { return cEndKeyword_0_4_6; }

		//{Function} name=ID "(" (all?="*" | arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")"
		public Group getGroup_0_5() { return cGroup_0_5; }

		//{Function}
		public Action getFunctionAction_0_5_0() { return cFunctionAction_0_5_0; }

		//name=ID
		public Assignment getNameAssignment_0_5_1() { return cNameAssignment_0_5_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_5_1_0() { return cNameIDTerminalRuleCall_0_5_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_5_2() { return cLeftParenthesisKeyword_0_5_2; }

		//all?="*" | arguments+=SqlExpression ("," arugments+=SqlExpression)*
		public Alternatives getAlternatives_0_5_3() { return cAlternatives_0_5_3; }

		//all?="*"
		public Assignment getAllAssignment_0_5_3_0() { return cAllAssignment_0_5_3_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_5_3_0_0() { return cAllAsteriskKeyword_0_5_3_0_0; }

		//arguments+=SqlExpression ("," arugments+=SqlExpression)*
		public Group getGroup_0_5_3_1() { return cGroup_0_5_3_1; }

		//arguments+=SqlExpression
		public Assignment getArgumentsAssignment_0_5_3_1_0() { return cArgumentsAssignment_0_5_3_1_0; }

		//SqlExpression
		public RuleCall getArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0() { return cArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0; }

		//("," arugments+=SqlExpression)*
		public Group getGroup_0_5_3_1_1() { return cGroup_0_5_3_1_1; }

		//","
		public Keyword getCommaKeyword_0_5_3_1_1_0() { return cCommaKeyword_0_5_3_1_1_0; }

		//arugments+=SqlExpression
		public Assignment getArugmentsAssignment_0_5_3_1_1_1() { return cArugmentsAssignment_0_5_3_1_1_1; }

		//SqlExpression
		public RuleCall getArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0() { return cArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5_4() { return cRightParenthesisKeyword_0_5_4; }

		//{CastExpression} "cast" "(" expression=SqlExpression "as" type=SqliteDataType ")"
		public Group getGroup_0_6() { return cGroup_0_6; }

		//{CastExpression}
		public Action getCastExpressionAction_0_6_0() { return cCastExpressionAction_0_6_0; }

		//"cast"
		public Keyword getCastKeyword_0_6_1() { return cCastKeyword_0_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_6_2() { return cLeftParenthesisKeyword_0_6_2; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_0_6_3() { return cExpressionAssignment_0_6_3; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_0_6_3_0() { return cExpressionSqlExpressionParserRuleCall_0_6_3_0; }

		//"as"
		public Keyword getAsKeyword_0_6_4() { return cAsKeyword_0_6_4; }

		//type=SqliteDataType
		public Assignment getTypeAssignment_0_6_5() { return cTypeAssignment_0_6_5; }

		//SqliteDataType
		public RuleCall getTypeSqliteDataTypeEnumRuleCall_0_6_5_0() { return cTypeSqliteDataTypeEnumRuleCall_0_6_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6_6() { return cRightParenthesisKeyword_0_6_6; }

		//isnull?=("is null" | "not null" | "notnull")?
		public Assignment getIsnullAssignment_1() { return cIsnullAssignment_1; }

		//"is null" | "not null" | "notnull"
		public Alternatives getIsnullAlternatives_1_0() { return cIsnullAlternatives_1_0; }

		//"is null"
		public Keyword getIsnullIsNullKeyword_1_0_0() { return cIsnullIsNullKeyword_1_0_0; }

		//"not null"
		public Keyword getIsnullNotNullKeyword_1_0_1() { return cIsnullNotNullKeyword_1_0_1; }

		//"notnull"
		public Keyword getIsnullNotnullKeyword_1_0_2() { return cIsnullNotnullKeyword_1_0_2; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhenExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhenExpressionSqlExpressionParserRuleCall_1_0 = (RuleCall)cWhenExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionSqlExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		
		//Case:
		//	"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression;
		public ParserRule getRule() { return rule; }

		//"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//whenExpression=SqlExpression
		public Assignment getWhenExpressionAssignment_1() { return cWhenExpressionAssignment_1; }

		//SqlExpression
		public RuleCall getWhenExpressionSqlExpressionParserRuleCall_1_0() { return cWhenExpressionSqlExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//thenExpression=SqlExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }

		//SqlExpression
		public RuleCall getThenExpressionSqlExpressionParserRuleCall_3_0() { return cThenExpressionSqlExpressionParserRuleCall_3_0; }
	}

	public class DDLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DDLStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCreateTableStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCreateKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTableKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cColumnDefsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cColumnDefsColumnDefParserRuleCall_0_5_0 = (RuleCall)cColumnDefsAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cCommaKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cColumnDefsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cColumnDefsColumnDefParserRuleCall_0_6_1_0 = (RuleCall)cColumnDefsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Keyword cCommaKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cConstraintsAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cConstraintsTableConstraintParserRuleCall_0_7_1_0 = (RuleCall)cConstraintsAssignment_0_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCreateViewStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCreateKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cViewKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cAsKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSelectStatementAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSelectStatementSelectStatementParserRuleCall_1_5_0 = (RuleCall)cSelectStatementAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCreateTriggerStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCreateKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cTriggerKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Alternatives cAlternatives_2_4 = (Alternatives)cGroup_2.eContents().get(4);
		private final Keyword cBeforeKeyword_2_4_0 = (Keyword)cAlternatives_2_4.eContents().get(0);
		private final Keyword cAfterKeyword_2_4_1 = (Keyword)cAlternatives_2_4.eContents().get(1);
		private final Group cGroup_2_4_2 = (Group)cAlternatives_2_4.eContents().get(2);
		private final Keyword cInsteadKeyword_2_4_2_0 = (Keyword)cGroup_2_4_2.eContents().get(0);
		private final Keyword cOfKeyword_2_4_2_1 = (Keyword)cGroup_2_4_2.eContents().get(1);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Keyword cDeleteKeyword_2_5_0 = (Keyword)cAlternatives_2_5.eContents().get(0);
		private final Keyword cInsertKeyword_2_5_1 = (Keyword)cAlternatives_2_5.eContents().get(1);
		private final Group cGroup_2_5_2 = (Group)cAlternatives_2_5.eContents().get(2);
		private final Keyword cUpdateKeyword_2_5_2_0 = (Keyword)cGroup_2_5_2.eContents().get(0);
		private final Group cGroup_2_5_2_1 = (Group)cGroup_2_5_2.eContents().get(1);
		private final Keyword cOfKeyword_2_5_2_1_0 = (Keyword)cGroup_2_5_2_1.eContents().get(0);
		private final Assignment cUpdateColumnNamesAssignment_2_5_2_1_1 = (Assignment)cGroup_2_5_2_1.eContents().get(1);
		private final RuleCall cUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_1_0 = (RuleCall)cUpdateColumnNamesAssignment_2_5_2_1_1.eContents().get(0);
		private final Group cGroup_2_5_2_1_2 = (Group)cGroup_2_5_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_5_2_1_2_0 = (Keyword)cGroup_2_5_2_1_2.eContents().get(0);
		private final Assignment cUpdateColumnNamesAssignment_2_5_2_1_2_1 = (Assignment)cGroup_2_5_2_1_2.eContents().get(1);
		private final RuleCall cUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_2_1_0 = (RuleCall)cUpdateColumnNamesAssignment_2_5_2_1_2_1.eContents().get(0);
		private final Keyword cOnKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cTableNameAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cTableNameIDTerminalRuleCall_2_7_0 = (RuleCall)cTableNameAssignment_2_7.eContents().get(0);
		private final Group cGroup_2_8 = (Group)cGroup_2.eContents().get(8);
		private final Keyword cForKeyword_2_8_0 = (Keyword)cGroup_2_8.eContents().get(0);
		private final Keyword cEachKeyword_2_8_1 = (Keyword)cGroup_2_8.eContents().get(1);
		private final Keyword cRowKeyword_2_8_2 = (Keyword)cGroup_2_8.eContents().get(2);
		private final Group cGroup_2_9 = (Group)cGroup_2.eContents().get(9);
		private final Keyword cWhenKeyword_2_9_0 = (Keyword)cGroup_2_9.eContents().get(0);
		private final Assignment cWhenExpressionAssignment_2_9_1 = (Assignment)cGroup_2_9.eContents().get(1);
		private final RuleCall cWhenExpressionSqlExpressionParserRuleCall_2_9_1_0 = (RuleCall)cWhenExpressionAssignment_2_9_1.eContents().get(0);
		private final Keyword cBeginKeyword_2_10 = (Keyword)cGroup_2.eContents().get(10);
		private final Group cGroup_2_11 = (Group)cGroup_2.eContents().get(11);
		private final Assignment cStatementsAssignment_2_11_0 = (Assignment)cGroup_2_11.eContents().get(0);
		private final RuleCall cStatementsDMLStatementParserRuleCall_2_11_0_0 = (RuleCall)cStatementsAssignment_2_11_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_11_1 = (Keyword)cGroup_2_11.eContents().get(1);
		private final Group cGroup_2_11_2 = (Group)cGroup_2_11.eContents().get(2);
		private final Assignment cStatementsAssignment_2_11_2_0 = (Assignment)cGroup_2_11_2.eContents().get(0);
		private final RuleCall cStatementsDMLStatementParserRuleCall_2_11_2_0_0 = (RuleCall)cStatementsAssignment_2_11_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_11_2_1 = (Keyword)cGroup_2_11_2.eContents().get(1);
		private final Keyword cEndKeyword_2_12 = (Keyword)cGroup_2.eContents().get(12);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAlterTableStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cAlterKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cTableKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_3_0 = (RuleCall)cNameAssignment_3_3.eContents().get(0);
		private final Assignment cClauseAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cClauseAlterTableClauseParserRuleCall_3_4_0 = (RuleCall)cClauseAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDropTableStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDropKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cTableKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cIfKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Keyword cExistsKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Assignment cNameAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_4_0 = (RuleCall)cNameAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDropTriggerStatementAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDropKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cTriggerKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cIfKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Keyword cExistsKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Assignment cNameAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_5_4_0 = (RuleCall)cNameAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cDropViewStatementAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cDropKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cViewKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cIfKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Keyword cExistsKeyword_6_3_1 = (Keyword)cGroup_6_3.eContents().get(1);
		private final Assignment cNameAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_6_4_0 = (RuleCall)cNameAssignment_6_4.eContents().get(0);
		
		/// *
		//
		// * Statements
		//
		// * / DDLStatement:
		//	{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//	constraints+=TableConstraint)* ")" | {CreateViewStatement} "create" "view" name=ID "as"
		//	selectStatement=SelectStatement | {CreateTriggerStatement} "create" "trigger" name=ID ("before" | "after" | "instead"
		//	"of")? ("delete" | "insert" | "update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?) "on" tableName=ID
		//	("for" "each" "row")? ("when" whenExpression=SqlExpression)? "begin" (statements+=DMLStatement ";"
		//	(statements+=DMLStatement ";")*)? "end" | {AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause |
		//	{DropTableStatement} "drop" "table" ("if" "exists")? name=ID | {DropTriggerStatement} "drop" "trigger" ("if"
		//	"exists")? name=ID | {DropViewStatement} "drop" "view" ("if" "exists")? name=ID;
		public ParserRule getRule() { return rule; }

		//{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//constraints+=TableConstraint)* ")" | {CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement
		//| {CreateTriggerStatement} "create" "trigger" name=ID ("before" | "after" | "instead" "of")? ("delete" | "insert" |
		//"update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?) "on" tableName=ID ("for" "each" "row")? ("when"
		//whenExpression=SqlExpression)? "begin" (statements+=DMLStatement ";" (statements+=DMLStatement ";")*)? "end" |
		//{AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause | {DropTableStatement} "drop" "table" ("if"
		//"exists")? name=ID | {DropTriggerStatement} "drop" "trigger" ("if" "exists")? name=ID | {DropViewStatement} "drop"
		//"view" ("if" "exists")? name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//constraints+=TableConstraint)* ")"
		public Group getGroup_0() { return cGroup_0; }

		//{CreateTableStatement}
		public Action getCreateTableStatementAction_0_0() { return cCreateTableStatementAction_0_0; }

		//"create"
		public Keyword getCreateKeyword_0_1() { return cCreateKeyword_0_1; }

		//"table"
		public Keyword getTableKeyword_0_2() { return cTableKeyword_0_2; }

		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_4() { return cLeftParenthesisKeyword_0_4; }

		//columnDefs+=ColumnDef
		public Assignment getColumnDefsAssignment_0_5() { return cColumnDefsAssignment_0_5; }

		//ColumnDef
		public RuleCall getColumnDefsColumnDefParserRuleCall_0_5_0() { return cColumnDefsColumnDefParserRuleCall_0_5_0; }

		//("," columnDefs+=ColumnDef)*
		public Group getGroup_0_6() { return cGroup_0_6; }

		//","
		public Keyword getCommaKeyword_0_6_0() { return cCommaKeyword_0_6_0; }

		//columnDefs+=ColumnDef
		public Assignment getColumnDefsAssignment_0_6_1() { return cColumnDefsAssignment_0_6_1; }

		//ColumnDef
		public RuleCall getColumnDefsColumnDefParserRuleCall_0_6_1_0() { return cColumnDefsColumnDefParserRuleCall_0_6_1_0; }

		//("," constraints+=TableConstraint)*
		public Group getGroup_0_7() { return cGroup_0_7; }

		//","
		public Keyword getCommaKeyword_0_7_0() { return cCommaKeyword_0_7_0; }

		//constraints+=TableConstraint
		public Assignment getConstraintsAssignment_0_7_1() { return cConstraintsAssignment_0_7_1; }

		//TableConstraint
		public RuleCall getConstraintsTableConstraintParserRuleCall_0_7_1_0() { return cConstraintsTableConstraintParserRuleCall_0_7_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }

		//{CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement
		public Group getGroup_1() { return cGroup_1; }

		//{CreateViewStatement}
		public Action getCreateViewStatementAction_1_0() { return cCreateViewStatementAction_1_0; }

		//"create"
		public Keyword getCreateKeyword_1_1() { return cCreateKeyword_1_1; }

		//"view"
		public Keyword getViewKeyword_1_2() { return cViewKeyword_1_2; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }

		//"as"
		public Keyword getAsKeyword_1_4() { return cAsKeyword_1_4; }

		//selectStatement=SelectStatement
		public Assignment getSelectStatementAssignment_1_5() { return cSelectStatementAssignment_1_5; }

		//SelectStatement
		public RuleCall getSelectStatementSelectStatementParserRuleCall_1_5_0() { return cSelectStatementSelectStatementParserRuleCall_1_5_0; }

		//{CreateTriggerStatement} "create" "trigger" name=ID ("before" | "after" | "instead" "of")? ("delete" | "insert" |
		//"update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?) "on" tableName=ID ("for" "each" "row")? ("when"
		//whenExpression=SqlExpression)? "begin" (statements+=DMLStatement ";" (statements+=DMLStatement ";")*)? "end"
		public Group getGroup_2() { return cGroup_2; }

		//{CreateTriggerStatement}
		public Action getCreateTriggerStatementAction_2_0() { return cCreateTriggerStatementAction_2_0; }

		//"create"
		public Keyword getCreateKeyword_2_1() { return cCreateKeyword_2_1; }

		//"trigger"
		public Keyword getTriggerKeyword_2_2() { return cTriggerKeyword_2_2; }

		//name=ID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_3_0() { return cNameIDTerminalRuleCall_2_3_0; }

		//("before" | "after" | "instead" "of")?
		public Alternatives getAlternatives_2_4() { return cAlternatives_2_4; }

		//"before"
		public Keyword getBeforeKeyword_2_4_0() { return cBeforeKeyword_2_4_0; }

		//"after"
		public Keyword getAfterKeyword_2_4_1() { return cAfterKeyword_2_4_1; }

		//"instead" "of"
		public Group getGroup_2_4_2() { return cGroup_2_4_2; }

		//"instead"
		public Keyword getInsteadKeyword_2_4_2_0() { return cInsteadKeyword_2_4_2_0; }

		//"of"
		public Keyword getOfKeyword_2_4_2_1() { return cOfKeyword_2_4_2_1; }

		//"delete" | "insert" | "update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }

		//"delete"
		public Keyword getDeleteKeyword_2_5_0() { return cDeleteKeyword_2_5_0; }

		//"insert"
		public Keyword getInsertKeyword_2_5_1() { return cInsertKeyword_2_5_1; }

		//"update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?
		public Group getGroup_2_5_2() { return cGroup_2_5_2; }

		//"update"
		public Keyword getUpdateKeyword_2_5_2_0() { return cUpdateKeyword_2_5_2_0; }

		//("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?
		public Group getGroup_2_5_2_1() { return cGroup_2_5_2_1; }

		//"of"
		public Keyword getOfKeyword_2_5_2_1_0() { return cOfKeyword_2_5_2_1_0; }

		//updateColumnNames+=ID
		public Assignment getUpdateColumnNamesAssignment_2_5_2_1_1() { return cUpdateColumnNamesAssignment_2_5_2_1_1; }

		//ID
		public RuleCall getUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_1_0() { return cUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_1_0; }

		//("," updateColumnNames+=ID)*
		public Group getGroup_2_5_2_1_2() { return cGroup_2_5_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_5_2_1_2_0() { return cCommaKeyword_2_5_2_1_2_0; }

		//updateColumnNames+=ID
		public Assignment getUpdateColumnNamesAssignment_2_5_2_1_2_1() { return cUpdateColumnNamesAssignment_2_5_2_1_2_1; }

		//ID
		public RuleCall getUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_2_1_0() { return cUpdateColumnNamesIDTerminalRuleCall_2_5_2_1_2_1_0; }

		//"on"
		public Keyword getOnKeyword_2_6() { return cOnKeyword_2_6; }

		//tableName=ID
		public Assignment getTableNameAssignment_2_7() { return cTableNameAssignment_2_7; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_7_0() { return cTableNameIDTerminalRuleCall_2_7_0; }

		//("for" "each" "row")?
		public Group getGroup_2_8() { return cGroup_2_8; }

		//"for"
		public Keyword getForKeyword_2_8_0() { return cForKeyword_2_8_0; }

		//"each"
		public Keyword getEachKeyword_2_8_1() { return cEachKeyword_2_8_1; }

		//"row"
		public Keyword getRowKeyword_2_8_2() { return cRowKeyword_2_8_2; }

		//("when" whenExpression=SqlExpression)?
		public Group getGroup_2_9() { return cGroup_2_9; }

		//"when"
		public Keyword getWhenKeyword_2_9_0() { return cWhenKeyword_2_9_0; }

		//whenExpression=SqlExpression
		public Assignment getWhenExpressionAssignment_2_9_1() { return cWhenExpressionAssignment_2_9_1; }

		//SqlExpression
		public RuleCall getWhenExpressionSqlExpressionParserRuleCall_2_9_1_0() { return cWhenExpressionSqlExpressionParserRuleCall_2_9_1_0; }

		//"begin"
		public Keyword getBeginKeyword_2_10() { return cBeginKeyword_2_10; }

		//(statements+=DMLStatement ";" (statements+=DMLStatement ";")*)?
		public Group getGroup_2_11() { return cGroup_2_11; }

		//statements+=DMLStatement
		public Assignment getStatementsAssignment_2_11_0() { return cStatementsAssignment_2_11_0; }

		//DMLStatement
		public RuleCall getStatementsDMLStatementParserRuleCall_2_11_0_0() { return cStatementsDMLStatementParserRuleCall_2_11_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_11_1() { return cSemicolonKeyword_2_11_1; }

		//(statements+=DMLStatement ";")*
		public Group getGroup_2_11_2() { return cGroup_2_11_2; }

		//statements+=DMLStatement
		public Assignment getStatementsAssignment_2_11_2_0() { return cStatementsAssignment_2_11_2_0; }

		//DMLStatement
		public RuleCall getStatementsDMLStatementParserRuleCall_2_11_2_0_0() { return cStatementsDMLStatementParserRuleCall_2_11_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_11_2_1() { return cSemicolonKeyword_2_11_2_1; }

		//"end"
		public Keyword getEndKeyword_2_12() { return cEndKeyword_2_12; }

		//{AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause
		public Group getGroup_3() { return cGroup_3; }

		//{AlterTableStatement}
		public Action getAlterTableStatementAction_3_0() { return cAlterTableStatementAction_3_0; }

		//"alter"
		public Keyword getAlterKeyword_3_1() { return cAlterKeyword_3_1; }

		//"table"
		public Keyword getTableKeyword_3_2() { return cTableKeyword_3_2; }

		//name=ID
		public Assignment getNameAssignment_3_3() { return cNameAssignment_3_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_3_0() { return cNameIDTerminalRuleCall_3_3_0; }

		//clause=AlterTableClause
		public Assignment getClauseAssignment_3_4() { return cClauseAssignment_3_4; }

		//AlterTableClause
		public RuleCall getClauseAlterTableClauseParserRuleCall_3_4_0() { return cClauseAlterTableClauseParserRuleCall_3_4_0; }

		//{DropTableStatement} "drop" "table" ("if" "exists")? name=ID
		public Group getGroup_4() { return cGroup_4; }

		//{DropTableStatement}
		public Action getDropTableStatementAction_4_0() { return cDropTableStatementAction_4_0; }

		//"drop"
		public Keyword getDropKeyword_4_1() { return cDropKeyword_4_1; }

		//"table"
		public Keyword getTableKeyword_4_2() { return cTableKeyword_4_2; }

		//("if" "exists")?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"if"
		public Keyword getIfKeyword_4_3_0() { return cIfKeyword_4_3_0; }

		//"exists"
		public Keyword getExistsKeyword_4_3_1() { return cExistsKeyword_4_3_1; }

		//name=ID
		public Assignment getNameAssignment_4_4() { return cNameAssignment_4_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_4_0() { return cNameIDTerminalRuleCall_4_4_0; }

		//{DropTriggerStatement} "drop" "trigger" ("if" "exists")? name=ID
		public Group getGroup_5() { return cGroup_5; }

		//{DropTriggerStatement}
		public Action getDropTriggerStatementAction_5_0() { return cDropTriggerStatementAction_5_0; }

		//"drop"
		public Keyword getDropKeyword_5_1() { return cDropKeyword_5_1; }

		//"trigger"
		public Keyword getTriggerKeyword_5_2() { return cTriggerKeyword_5_2; }

		//("if" "exists")?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"if"
		public Keyword getIfKeyword_5_3_0() { return cIfKeyword_5_3_0; }

		//"exists"
		public Keyword getExistsKeyword_5_3_1() { return cExistsKeyword_5_3_1; }

		//name=ID
		public Assignment getNameAssignment_5_4() { return cNameAssignment_5_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_4_0() { return cNameIDTerminalRuleCall_5_4_0; }

		//{DropViewStatement} "drop" "view" ("if" "exists")? name=ID
		public Group getGroup_6() { return cGroup_6; }

		//{DropViewStatement}
		public Action getDropViewStatementAction_6_0() { return cDropViewStatementAction_6_0; }

		//"drop"
		public Keyword getDropKeyword_6_1() { return cDropKeyword_6_1; }

		//"view"
		public Keyword getViewKeyword_6_2() { return cViewKeyword_6_2; }

		//("if" "exists")?
		public Group getGroup_6_3() { return cGroup_6_3; }

		//"if"
		public Keyword getIfKeyword_6_3_0() { return cIfKeyword_6_3_0; }

		//"exists"
		public Keyword getExistsKeyword_6_3_1() { return cExistsKeyword_6_3_1; }

		//name=ID
		public Assignment getNameAssignment_6_4() { return cNameAssignment_6_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_4_0() { return cNameIDTerminalRuleCall_6_4_0; }
	}

	public class DMLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DMLStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DMLStatement:
		//	SelectStatement | InsertStatement | UpdateStatement | DeleteStatement;
		public ParserRule getRule() { return rule; }

		//SelectStatement | InsertStatement | UpdateStatement | DeleteStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_0() { return cSelectStatementParserRuleCall_0; }

		//InsertStatement
		public RuleCall getInsertStatementParserRuleCall_1() { return cInsertStatementParserRuleCall_1; }

		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_2() { return cUpdateStatementParserRuleCall_2; }

		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_3() { return cDeleteStatementParserRuleCall_3; }
	}

	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableNameIDTerminalRuleCall_2_0 = (RuleCall)cTableNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhereKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//DeleteStatement:
		//	"delete" "from" tableName=ID ("where" expression=SqlExpression)?;
		public ParserRule getRule() { return rule; }

		//"delete" "from" tableName=ID ("where" expression=SqlExpression)?
		public Group getGroup() { return cGroup; }

		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//tableName=ID
		public Assignment getTableNameAssignment_2() { return cTableNameAssignment_2; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_0() { return cTableNameIDTerminalRuleCall_2_0; }

		//("where" expression=SqlExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"where"
		public Keyword getWhereKeyword_3_0() { return cWhereKeyword_3_0; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_3_1_0() { return cExpressionSqlExpressionParserRuleCall_3_1_0; }
	}

	public class InsertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cInsertKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cOrKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cConflictResolutionAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cConflictResolutionConflictResolutionEnumRuleCall_0_0_1_1_0 = (RuleCall)cConflictResolutionAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cReplaceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cIntoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableNameIDTerminalRuleCall_2_0 = (RuleCall)cTableNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnNamesIDTerminalRuleCall_3_1_0 = (RuleCall)cColumnNamesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cColumnNamesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cColumnNamesIDTerminalRuleCall_3_2_1_0 = (RuleCall)cColumnNamesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Keyword cValuesKeyword_4_0_0_0 = (Keyword)cGroup_4_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_4_0_0_2 = (Assignment)cGroup_4_0_0.eContents().get(2);
		private final RuleCall cExpressionsSqlExpressionParserRuleCall_4_0_0_2_0 = (RuleCall)cExpressionsAssignment_4_0_0_2.eContents().get(0);
		private final Group cGroup_4_0_0_3 = (Group)cGroup_4_0_0.eContents().get(3);
		private final Keyword cCommaKeyword_4_0_0_3_0 = (Keyword)cGroup_4_0_0_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_4_0_0_3_1 = (Assignment)cGroup_4_0_0_3.eContents().get(1);
		private final RuleCall cExpressionsSqlExpressionParserRuleCall_4_0_0_3_1_0 = (RuleCall)cExpressionsAssignment_4_0_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_0_4 = (Keyword)cGroup_4_0_0.eContents().get(4);
		private final Assignment cSelectStatementAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cSelectStatementSelectStatementParserRuleCall_4_0_1_0 = (RuleCall)cSelectStatementAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cDefaultKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cValuesKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		
		//InsertStatement:
		//	("insert" ("or" conflictResolution=ConflictResolution)? | "replace") "into" tableName=ID ("(" columnNames+=ID (","
		//	columnNames+=ID)* ")")? (("values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")" |
		//	selectStatement=SelectStatement) | "default" "values");
		public ParserRule getRule() { return rule; }

		//("insert" ("or" conflictResolution=ConflictResolution)? | "replace") "into" tableName=ID ("(" columnNames+=ID (","
		//columnNames+=ID)* ")")? (("values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")" |
		//selectStatement=SelectStatement) | "default" "values")
		public Group getGroup() { return cGroup; }

		//"insert" ("or" conflictResolution=ConflictResolution)? | "replace"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"insert" ("or" conflictResolution=ConflictResolution)?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"insert"
		public Keyword getInsertKeyword_0_0_0() { return cInsertKeyword_0_0_0; }

		//("or" conflictResolution=ConflictResolution)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//"or"
		public Keyword getOrKeyword_0_0_1_0() { return cOrKeyword_0_0_1_0; }

		//conflictResolution=ConflictResolution
		public Assignment getConflictResolutionAssignment_0_0_1_1() { return cConflictResolutionAssignment_0_0_1_1; }

		//ConflictResolution
		public RuleCall getConflictResolutionConflictResolutionEnumRuleCall_0_0_1_1_0() { return cConflictResolutionConflictResolutionEnumRuleCall_0_0_1_1_0; }

		//"replace"
		public Keyword getReplaceKeyword_0_1() { return cReplaceKeyword_0_1; }

		//"into"
		public Keyword getIntoKeyword_1() { return cIntoKeyword_1; }

		//tableName=ID
		public Assignment getTableNameAssignment_2() { return cTableNameAssignment_2; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_0() { return cTableNameIDTerminalRuleCall_2_0; }

		//("(" columnNames+=ID ("," columnNames+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//columnNames+=ID
		public Assignment getColumnNamesAssignment_3_1() { return cColumnNamesAssignment_3_1; }

		//ID
		public RuleCall getColumnNamesIDTerminalRuleCall_3_1_0() { return cColumnNamesIDTerminalRuleCall_3_1_0; }

		//("," columnNames+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//columnNames+=ID
		public Assignment getColumnNamesAssignment_3_2_1() { return cColumnNamesAssignment_3_2_1; }

		//ID
		public RuleCall getColumnNamesIDTerminalRuleCall_3_2_1_0() { return cColumnNamesIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//("values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")" | selectStatement=SelectStatement) |
		//"default" "values"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")" | selectStatement=SelectStatement
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")"
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//"values"
		public Keyword getValuesKeyword_4_0_0_0() { return cValuesKeyword_4_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0_1() { return cLeftParenthesisKeyword_4_0_0_1; }

		//expressions+=SqlExpression
		public Assignment getExpressionsAssignment_4_0_0_2() { return cExpressionsAssignment_4_0_0_2; }

		//SqlExpression
		public RuleCall getExpressionsSqlExpressionParserRuleCall_4_0_0_2_0() { return cExpressionsSqlExpressionParserRuleCall_4_0_0_2_0; }

		//("," expressions+=SqlExpression)*
		public Group getGroup_4_0_0_3() { return cGroup_4_0_0_3; }

		//","
		public Keyword getCommaKeyword_4_0_0_3_0() { return cCommaKeyword_4_0_0_3_0; }

		//expressions+=SqlExpression
		public Assignment getExpressionsAssignment_4_0_0_3_1() { return cExpressionsAssignment_4_0_0_3_1; }

		//SqlExpression
		public RuleCall getExpressionsSqlExpressionParserRuleCall_4_0_0_3_1_0() { return cExpressionsSqlExpressionParserRuleCall_4_0_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_0_4() { return cRightParenthesisKeyword_4_0_0_4; }

		//selectStatement=SelectStatement
		public Assignment getSelectStatementAssignment_4_0_1() { return cSelectStatementAssignment_4_0_1; }

		//SelectStatement
		public RuleCall getSelectStatementSelectStatementParserRuleCall_4_0_1_0() { return cSelectStatementSelectStatementParserRuleCall_4_0_1_0; }

		//"default" "values"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"default"
		public Keyword getDefaultKeyword_4_1_0() { return cDefaultKeyword_4_1_0; }

		//"values"
		public Keyword getValuesKeyword_4_1_1() { return cValuesKeyword_4_1_1; }
	}

	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConflictResolutionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConflictResolutionConflictResolutionEnumRuleCall_1_1_0 = (RuleCall)cConflictResolutionAssignment_1_1.eContents().get(0);
		private final Assignment cTableNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableNameIDTerminalRuleCall_2_0 = (RuleCall)cTableNameAssignment_2.eContents().get(0);
		private final Keyword cSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateColumnExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_4_0 = (RuleCall)cUpdateColumnExpressionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUpdateColumnExpressionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_5_1_0 = (RuleCall)cUpdateColumnExpressionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWhereExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cWhereExpressionSqlExpressionParserRuleCall_6_1_0 = (RuleCall)cWhereExpressionAssignment_6_1.eContents().get(0);
		
		//UpdateStatement:
		//	"update" ("or" conflictResolution=ConflictResolution)? tableName=ID "set"
		//	updateColumnExpressions+=UpdateColumnExpression ("," updateColumnExpressions+=UpdateColumnExpression)* ("where"
		//	whereExpression=SqlExpression)?;
		public ParserRule getRule() { return rule; }

		//"update" ("or" conflictResolution=ConflictResolution)? tableName=ID "set"
		//updateColumnExpressions+=UpdateColumnExpression ("," updateColumnExpressions+=UpdateColumnExpression)* ("where"
		//whereExpression=SqlExpression)?
		public Group getGroup() { return cGroup; }

		//"update"
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }

		//("or" conflictResolution=ConflictResolution)?
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//conflictResolution=ConflictResolution
		public Assignment getConflictResolutionAssignment_1_1() { return cConflictResolutionAssignment_1_1; }

		//ConflictResolution
		public RuleCall getConflictResolutionConflictResolutionEnumRuleCall_1_1_0() { return cConflictResolutionConflictResolutionEnumRuleCall_1_1_0; }

		//tableName=ID
		public Assignment getTableNameAssignment_2() { return cTableNameAssignment_2; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_0() { return cTableNameIDTerminalRuleCall_2_0; }

		//"set"
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }

		//updateColumnExpressions+=UpdateColumnExpression
		public Assignment getUpdateColumnExpressionsAssignment_4() { return cUpdateColumnExpressionsAssignment_4; }

		//UpdateColumnExpression
		public RuleCall getUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_4_0() { return cUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_4_0; }

		//("," updateColumnExpressions+=UpdateColumnExpression)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//updateColumnExpressions+=UpdateColumnExpression
		public Assignment getUpdateColumnExpressionsAssignment_5_1() { return cUpdateColumnExpressionsAssignment_5_1; }

		//UpdateColumnExpression
		public RuleCall getUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_5_1_0() { return cUpdateColumnExpressionsUpdateColumnExpressionParserRuleCall_5_1_0; }

		//("where" whereExpression=SqlExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//whereExpression=SqlExpression
		public Assignment getWhereExpressionAssignment_6_1() { return cWhereExpressionAssignment_6_1; }

		//SqlExpression
		public RuleCall getWhereExpressionSqlExpressionParserRuleCall_6_1_0() { return cWhereExpressionSqlExpressionParserRuleCall_6_1_0; }
	}

	public class UpdateColumnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateColumnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnNameIDTerminalRuleCall_0_0 = (RuleCall)cColumnNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//UpdateColumnExpression:
		//	columnName=ID "=" expression=SqlExpression;
		public ParserRule getRule() { return rule; }

		//columnName=ID "=" expression=SqlExpression
		public Group getGroup() { return cGroup; }

		//columnName=ID
		public Assignment getColumnNameAssignment_0() { return cColumnNameAssignment_0; }

		//ID
		public RuleCall getColumnNameIDTerminalRuleCall_0_0() { return cColumnNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_2_0() { return cExpressionSqlExpressionParserRuleCall_2_0; }
	}

	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoreStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoreStatementsSelectCoreParserRuleCall_0_0 = (RuleCall)cCoreStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCompoundOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCoreStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCoreStatementsSelectCoreParserRuleCall_1_1_0 = (RuleCall)cCoreStatementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOrderKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cByKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOrderingTermsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOrderingTermsOrderingTermParserRuleCall_2_2_0 = (RuleCall)cOrderingTermsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cOrderingTermsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cOrderingTermsOrderingTermParserRuleCall_2_3_1_0 = (RuleCall)cOrderingTermsAssignment_2_3_1.eContents().get(0);
		
		//SelectStatement:
		//	coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm
		//	("," orderingTerms+=OrderingTerm)*)?;
		public ParserRule getRule() { return rule; }

		//coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm (","
		//orderingTerms+=OrderingTerm)*)?
		public Group getGroup() { return cGroup; }

		//coreStatements+=SelectCore
		public Assignment getCoreStatementsAssignment_0() { return cCoreStatementsAssignment_0; }

		//SelectCore
		public RuleCall getCoreStatementsSelectCoreParserRuleCall_0_0() { return cCoreStatementsSelectCoreParserRuleCall_0_0; }

		//(CompoundOperator coreStatements+=SelectCore)*
		public Group getGroup_1() { return cGroup_1; }

		//CompoundOperator
		public RuleCall getCompoundOperatorParserRuleCall_1_0() { return cCompoundOperatorParserRuleCall_1_0; }

		//coreStatements+=SelectCore
		public Assignment getCoreStatementsAssignment_1_1() { return cCoreStatementsAssignment_1_1; }

		//SelectCore
		public RuleCall getCoreStatementsSelectCoreParserRuleCall_1_1_0() { return cCoreStatementsSelectCoreParserRuleCall_1_1_0; }

		//("order" "by" orderingTerms+=OrderingTerm ("," orderingTerms+=OrderingTerm)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"order"
		public Keyword getOrderKeyword_2_0() { return cOrderKeyword_2_0; }

		//"by"
		public Keyword getByKeyword_2_1() { return cByKeyword_2_1; }

		//orderingTerms+=OrderingTerm
		public Assignment getOrderingTermsAssignment_2_2() { return cOrderingTermsAssignment_2_2; }

		//OrderingTerm
		public RuleCall getOrderingTermsOrderingTermParserRuleCall_2_2_0() { return cOrderingTermsOrderingTermParserRuleCall_2_2_0; }

		//("," orderingTerms+=OrderingTerm)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//orderingTerms+=OrderingTerm
		public Assignment getOrderingTermsAssignment_2_3_1() { return cOrderingTermsAssignment_2_3_1; }

		//OrderingTerm
		public RuleCall getOrderingTermsOrderingTermParserRuleCall_2_3_1_0() { return cOrderingTermsOrderingTermParserRuleCall_2_3_1_0; }
	}

	public class AlterTableClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlterTableClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAlterTableRenameClauseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRenameToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAlterTableAddColumnClauseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAddColumnKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnDefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnDefColumnDefParserRuleCall_1_2_0 = (RuleCall)cColumnDefAssignment_1_2.eContents().get(0);
		
		//AlterTableClause:
		//	{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef;
		public ParserRule getRule() { return rule; }

		//{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AlterTableRenameClause} "rename to" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//{AlterTableRenameClause}
		public Action getAlterTableRenameClauseAction_0_0() { return cAlterTableRenameClauseAction_0_0; }

		//"rename to"
		public Keyword getRenameToKeyword_0_1() { return cRenameToKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//{AlterTableAddColumnClause} "add column" columnDef=ColumnDef
		public Group getGroup_1() { return cGroup_1; }

		//{AlterTableAddColumnClause}
		public Action getAlterTableAddColumnClauseAction_1_0() { return cAlterTableAddColumnClauseAction_1_0; }

		//"add column"
		public Keyword getAddColumnKeyword_1_1() { return cAddColumnKeyword_1_1; }

		//columnDef=ColumnDef
		public Assignment getColumnDefAssignment_1_2() { return cColumnDefAssignment_1_2; }

		//ColumnDef
		public RuleCall getColumnDefColumnDefParserRuleCall_1_2_0() { return cColumnDefColumnDefParserRuleCall_1_2_0; }
	}

	public class ColumnDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeColumnTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsColumnConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		
		//ColumnDef:
		//	name=ID type=ColumnType constraints+=ColumnConstraint*;
		public ParserRule getRule() { return rule; }

		//name=ID type=ColumnType constraints+=ColumnConstraint*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=ColumnType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ColumnType
		public RuleCall getTypeColumnTypeEnumRuleCall_1_0() { return cTypeColumnTypeEnumRuleCall_1_0; }

		//constraints+=ColumnConstraint*
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }

		//ColumnConstraint
		public RuleCall getConstraintsColumnConstraintParserRuleCall_2_0() { return cConstraintsColumnConstraintParserRuleCall_2_0; }
	}

	public class ColumnConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryKeyColumnConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPrimaryKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cKeyKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cAscAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final Keyword cAscAscKeyword_0_3_0_0 = (Keyword)cAscAssignment_0_3_0.eContents().get(0);
		private final Assignment cDescAssignment_0_3_1 = (Assignment)cAlternatives_0_3.eContents().get(1);
		private final Keyword cDescDescKeyword_0_3_1_0 = (Keyword)cDescAssignment_0_3_1.eContents().get(0);
		private final Assignment cAutoincrementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cAutoincrementAutoincrementKeyword_0_4_0 = (Keyword)cAutoincrementAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotNullConstraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNullKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConflictClauseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_1_3_0 = (RuleCall)cConflictClauseAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDefaultConstraintAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDefaultKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDefaultValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDefaultValueDefaultValueParserRuleCall_2_2_0 = (RuleCall)cDefaultValueAssignment_2_2.eContents().get(0);
		
		//ColumnConstraint:
		//	{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
		//	{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
		//	defaultValue=DefaultValue;
		public ParserRule getRule() { return rule; }

		//{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
		//{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
		//defaultValue=DefaultValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"?
		public Group getGroup_0() { return cGroup_0; }

		//{PrimaryKeyColumnConstraint}
		public Action getPrimaryKeyColumnConstraintAction_0_0() { return cPrimaryKeyColumnConstraintAction_0_0; }

		//"primary"
		public Keyword getPrimaryKeyword_0_1() { return cPrimaryKeyword_0_1; }

		//"key"
		public Keyword getKeyKeyword_0_2() { return cKeyKeyword_0_2; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//asc?="asc"
		public Assignment getAscAssignment_0_3_0() { return cAscAssignment_0_3_0; }

		//"asc"
		public Keyword getAscAscKeyword_0_3_0_0() { return cAscAscKeyword_0_3_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_0_3_1() { return cDescAssignment_0_3_1; }

		//"desc"
		public Keyword getDescDescKeyword_0_3_1_0() { return cDescDescKeyword_0_3_1_0; }

		//autoincrement?="autoincrement"?
		public Assignment getAutoincrementAssignment_0_4() { return cAutoincrementAssignment_0_4; }

		//"autoincrement"
		public Keyword getAutoincrementAutoincrementKeyword_0_4_0() { return cAutoincrementAutoincrementKeyword_0_4_0; }

		//{NotNullConstraint} "not" "null" conflictClause=ConflictClause?
		public Group getGroup_1() { return cGroup_1; }

		//{NotNullConstraint}
		public Action getNotNullConstraintAction_1_0() { return cNotNullConstraintAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//"null"
		public Keyword getNullKeyword_1_2() { return cNullKeyword_1_2; }

		//conflictClause=ConflictClause?
		public Assignment getConflictClauseAssignment_1_3() { return cConflictClauseAssignment_1_3; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_1_3_0() { return cConflictClauseConflictClauseParserRuleCall_1_3_0; }

		//{DefaultConstraint} "default" defaultValue=DefaultValue
		public Group getGroup_2() { return cGroup_2; }

		//{DefaultConstraint}
		public Action getDefaultConstraintAction_2_0() { return cDefaultConstraintAction_2_0; }

		//"default"
		public Keyword getDefaultKeyword_2_1() { return cDefaultKeyword_2_1; }

		//defaultValue=DefaultValue
		public Assignment getDefaultValueAssignment_2_2() { return cDefaultValueAssignment_2_2; }

		//DefaultValue
		public RuleCall getDefaultValueDefaultValueParserRuleCall_2_2_0() { return cDefaultValueDefaultValueParserRuleCall_2_2_0; }
	}

	public class DefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralDefaultValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLiteralLiteralValueParserRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionDefaultValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DefaultValue:
		//	{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")";
		public ParserRule getRule() { return rule; }

		//{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LiteralDefaultValue} literal=LiteralValue
		public Group getGroup_0() { return cGroup_0; }

		//{LiteralDefaultValue}
		public Action getLiteralDefaultValueAction_0_0() { return cLiteralDefaultValueAction_0_0; }

		//literal=LiteralValue
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }

		//LiteralValue
		public RuleCall getLiteralLiteralValueParserRuleCall_0_1_0() { return cLiteralLiteralValueParserRuleCall_0_1_0; }

		//{ExpressionDefaultValue} "(" expression=SqlExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionDefaultValue}
		public Action getExpressionDefaultValueAction_1_0() { return cExpressionDefaultValueAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_1_2_0() { return cExpressionSqlExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TableConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUniqueTableContraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cConstraintKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cUniqueKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cColumnsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_0_4_0 = (RuleCall)cColumnsAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cColumnsAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_0_5_1_0 = (RuleCall)cColumnsAssignment_0_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cConflictClauseAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_0_7_0 = (RuleCall)cConflictClauseAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryContraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cConstraintKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cPrimaryKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cKeyKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cColumnsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_1_5_0 = (RuleCall)cColumnsAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cColumnsAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_1_6_1_0 = (RuleCall)cColumnsAssignment_1_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cConflictClauseAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_1_8_0 = (RuleCall)cConflictClauseAssignment_1_8.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCheckTableConstraintAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cConstraintKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cCheckKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cExpressionAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_2_4_0 = (RuleCall)cExpressionAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//TableConstraint:
		//	{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//	conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
		//	("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
		//	"check" "(" expression=SqlExpression ")";
		public ParserRule getRule() { return rule; }

		//{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
		//("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
		//"check" "(" expression=SqlExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause
		public Group getGroup_0() { return cGroup_0; }

		//{UniqueTableContraint}
		public Action getUniqueTableContraintAction_0_0() { return cUniqueTableContraintAction_0_0; }

		//("constraint" name=ID)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"constraint"
		public Keyword getConstraintKeyword_0_1_0() { return cConstraintKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_1_0() { return cNameIDTerminalRuleCall_0_1_1_0; }

		//"unique"
		public Keyword getUniqueKeyword_0_2() { return cUniqueKeyword_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_0_4() { return cColumnsAssignment_0_4; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_0_4_0() { return cColumnsIndexedColumnParserRuleCall_0_4_0; }

		//("," columns+=IndexedColumn)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_0_5_1() { return cColumnsAssignment_0_5_1; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_0_5_1_0() { return cColumnsIndexedColumnParserRuleCall_0_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//conflictClause=ConflictClause
		public Assignment getConflictClauseAssignment_0_7() { return cConflictClauseAssignment_0_7; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_0_7_0() { return cConflictClauseConflictClauseParserRuleCall_0_7_0; }

		//{PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause
		public Group getGroup_1() { return cGroup_1; }

		//{PrimaryContraint}
		public Action getPrimaryContraintAction_1_0() { return cPrimaryContraintAction_1_0; }

		//("constraint" name=ID)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"constraint"
		public Keyword getConstraintKeyword_1_1_0() { return cConstraintKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//"primary"
		public Keyword getPrimaryKeyword_1_2() { return cPrimaryKeyword_1_2; }

		//"key"
		public Keyword getKeyKeyword_1_3() { return cKeyKeyword_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4() { return cLeftParenthesisKeyword_1_4; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_1_5() { return cColumnsAssignment_1_5; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_1_5_0() { return cColumnsIndexedColumnParserRuleCall_1_5_0; }

		//("," columns+=IndexedColumn)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//","
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_1_6_1() { return cColumnsAssignment_1_6_1; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_1_6_1_0() { return cColumnsIndexedColumnParserRuleCall_1_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }

		//conflictClause=ConflictClause
		public Assignment getConflictClauseAssignment_1_8() { return cConflictClauseAssignment_1_8; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_1_8_0() { return cConflictClauseConflictClauseParserRuleCall_1_8_0; }

		//{CheckTableConstraint} ("constraint" name=ID)? "check" "(" expression=SqlExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{CheckTableConstraint}
		public Action getCheckTableConstraintAction_2_0() { return cCheckTableConstraintAction_2_0; }

		//("constraint" name=ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"constraint"
		public Keyword getConstraintKeyword_2_1_0() { return cConstraintKeyword_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_1_0() { return cNameIDTerminalRuleCall_2_1_1_0; }

		//"check"
		public Keyword getCheckKeyword_2_2() { return cCheckKeyword_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_2_4() { return cExpressionAssignment_2_4; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_2_4_0() { return cExpressionSqlExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class IndexedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameColumnDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameColumnDefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameColumnDefCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAscAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAscAscKeyword_1_0_0 = (Keyword)cAscAssignment_1_0.eContents().get(0);
		private final Assignment cDescAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDescDescKeyword_1_1_0 = (Keyword)cDescAssignment_1_1.eContents().get(0);
		
		//IndexedColumn:
		//	name=[ColumnDef] (asc?="asc" | desc?="desc")?;
		public ParserRule getRule() { return rule; }

		//name=[ColumnDef] (asc?="asc" | desc?="desc")?
		public Group getGroup() { return cGroup; }

		//name=[ColumnDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[ColumnDef]
		public CrossReference getNameColumnDefCrossReference_0_0() { return cNameColumnDefCrossReference_0_0; }

		//ID
		public RuleCall getNameColumnDefIDTerminalRuleCall_0_0_1() { return cNameColumnDefIDTerminalRuleCall_0_0_1; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//asc?="asc"
		public Assignment getAscAssignment_1_0() { return cAscAssignment_1_0; }

		//"asc"
		public Keyword getAscAscKeyword_1_0_0() { return cAscAscKeyword_1_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_1_1() { return cDescAssignment_1_1; }

		//"desc"
		public Keyword getDescDescKeyword_1_1_0() { return cDescDescKeyword_1_1_0; }
	}

	public class CompoundOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUnionAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntersectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExceptKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//CompoundOperator:
		//	"union all" | "union" | "intersect" | "except";
		public ParserRule getRule() { return rule; }

		//"union all" | "union" | "intersect" | "except"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"union all"
		public Keyword getUnionAllKeyword_0() { return cUnionAllKeyword_0; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }

		//"intersect"
		public Keyword getIntersectKeyword_2() { return cIntersectKeyword_2; }

		//"except"
		public Keyword getExceptKeyword_3() { return cExceptKeyword_3; }
	}

	public class OrderingTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderingTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAscAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAscAscKeyword_1_0_0 = (Keyword)cAscAssignment_1_0.eContents().get(0);
		private final Assignment cDescAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDescDescKeyword_1_1_0 = (Keyword)cDescAssignment_1_1.eContents().get(0);
		
		//OrderingTerm:
		//	expression=SqlExpression (asc?="asc" | desc?="desc")?;
		public ParserRule getRule() { return rule; }

		//expression=SqlExpression (asc?="asc" | desc?="desc")?
		public Group getGroup() { return cGroup; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_0_0() { return cExpressionSqlExpressionParserRuleCall_0_0; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//asc?="asc"
		public Assignment getAscAssignment_1_0() { return cAscAssignment_1_0; }

		//"asc"
		public Keyword getAscAscKeyword_1_0_0() { return cAscAscKeyword_1_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_1_1() { return cDescAssignment_1_1; }

		//"desc"
		public Keyword getDescDescKeyword_1_1_0() { return cDescDescKeyword_1_1_0; }
	}

	public class SelectCoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectCore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDistinctAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cDistinctDistinctKeyword_1_0_0 = (Keyword)cDistinctAssignment_1_0.eContents().get(0);
		private final Assignment cAllAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAllAllKeyword_1_1_0 = (Keyword)cAllAssignment_1_1.eContents().get(0);
		private final Assignment cResultColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultColumnsResultColumnParserRuleCall_2_0 = (RuleCall)cResultColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cResultColumnsResultColumnParserRuleCall_3_1_0 = (RuleCall)cResultColumnsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceJoinSourceParserRuleCall_4_1_0 = (RuleCall)cSourceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhereKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWhereExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWhereExpressionSqlExpressionParserRuleCall_5_1_0 = (RuleCall)cWhereExpressionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGroupKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cByKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cGroupByExpressionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cGroupByExpressionsSqlExpressionParserRuleCall_6_2_0 = (RuleCall)cGroupByExpressionsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cGroupByExpressionsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0 = (RuleCall)cGroupByExpressionsAssignment_6_3_1.eContents().get(0);
		
		//SelectCore:
		//	"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
		//	source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
		//	groupByExpressions+=SqlExpression)*)?;
		public ParserRule getRule() { return rule; }

		//"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
		//source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
		//groupByExpressions+=SqlExpression)*)?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//(distinct?="distinct" | all?="all")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//distinct?="distinct"
		public Assignment getDistinctAssignment_1_0() { return cDistinctAssignment_1_0; }

		//"distinct"
		public Keyword getDistinctDistinctKeyword_1_0_0() { return cDistinctDistinctKeyword_1_0_0; }

		//all?="all"
		public Assignment getAllAssignment_1_1() { return cAllAssignment_1_1; }

		//"all"
		public Keyword getAllAllKeyword_1_1_0() { return cAllAllKeyword_1_1_0; }

		//resultColumns+=ResultColumn
		public Assignment getResultColumnsAssignment_2() { return cResultColumnsAssignment_2; }

		//ResultColumn
		public RuleCall getResultColumnsResultColumnParserRuleCall_2_0() { return cResultColumnsResultColumnParserRuleCall_2_0; }

		//("," resultColumns+=ResultColumn)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//resultColumns+=ResultColumn
		public Assignment getResultColumnsAssignment_3_1() { return cResultColumnsAssignment_3_1; }

		//ResultColumn
		public RuleCall getResultColumnsResultColumnParserRuleCall_3_1_0() { return cResultColumnsResultColumnParserRuleCall_3_1_0; }

		//("from" source=JoinSource)?
		public Group getGroup_4() { return cGroup_4; }

		//"from"
		public Keyword getFromKeyword_4_0() { return cFromKeyword_4_0; }

		//source=JoinSource
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }

		//JoinSource
		public RuleCall getSourceJoinSourceParserRuleCall_4_1_0() { return cSourceJoinSourceParserRuleCall_4_1_0; }

		//("where" whereExpression=SqlExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"where"
		public Keyword getWhereKeyword_5_0() { return cWhereKeyword_5_0; }

		//whereExpression=SqlExpression
		public Assignment getWhereExpressionAssignment_5_1() { return cWhereExpressionAssignment_5_1; }

		//SqlExpression
		public RuleCall getWhereExpressionSqlExpressionParserRuleCall_5_1_0() { return cWhereExpressionSqlExpressionParserRuleCall_5_1_0; }

		//("group" "by" groupByExpressions+=SqlExpression ("," groupByExpressions+=SqlExpression)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"group"
		public Keyword getGroupKeyword_6_0() { return cGroupKeyword_6_0; }

		//"by"
		public Keyword getByKeyword_6_1() { return cByKeyword_6_1; }

		//groupByExpressions+=SqlExpression
		public Assignment getGroupByExpressionsAssignment_6_2() { return cGroupByExpressionsAssignment_6_2; }

		//SqlExpression
		public RuleCall getGroupByExpressionsSqlExpressionParserRuleCall_6_2_0() { return cGroupByExpressionsSqlExpressionParserRuleCall_6_2_0; }

		//("," groupByExpressions+=SqlExpression)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//groupByExpressions+=SqlExpression
		public Assignment getGroupByExpressionsAssignment_6_3_1() { return cGroupByExpressionsAssignment_6_3_1; }

		//SqlExpression
		public RuleCall getGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0() { return cGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0; }
	}

	public class JoinSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceSingleSourceParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Assignment cJoinStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinStatementsJoinStatementParserRuleCall_1_0 = (RuleCall)cJoinStatementsAssignment_1.eContents().get(0);
		
		//JoinSource:
		//	source=SingleSource joinStatements+=JoinStatement*;
		public ParserRule getRule() { return rule; }

		//source=SingleSource joinStatements+=JoinStatement*
		public Group getGroup() { return cGroup; }

		//source=SingleSource
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//SingleSource
		public RuleCall getSourceSingleSourceParserRuleCall_0_0() { return cSourceSingleSourceParserRuleCall_0_0; }

		//joinStatements+=JoinStatement*
		public Assignment getJoinStatementsAssignment_1() { return cJoinStatementsAssignment_1; }

		//JoinStatement
		public RuleCall getJoinStatementsJoinStatementParserRuleCall_1_0() { return cJoinStatementsJoinStatementParserRuleCall_1_0; }
	}

	public class SingleSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSingleSourceTableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTableIDTerminalRuleCall_0_1_0 = (RuleCall)cTableAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAliasAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_0_2_1_0 = (RuleCall)cAliasAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSingleSourceSelectStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSelectStatementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSelectStatementSelectStatementParserRuleCall_1_2_0 = (RuleCall)cSelectStatementAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAsKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cAliasAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_4_1_0 = (RuleCall)cAliasAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSingleSourceJoinAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cJoinSourceAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cJoinSourceJoinSourceParserRuleCall_2_2_0 = (RuleCall)cJoinSourceAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//SingleSource:
		//	{SingleSourceTable} table=ID ("as" alias=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")"
		//	("as" alias=ID)? | {SingleSourceJoin} "(" joinSource=JoinSource ")";
		public ParserRule getRule() { return rule; }

		//{SingleSourceTable} table=ID ("as" alias=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")"
		//("as" alias=ID)? | {SingleSourceJoin} "(" joinSource=JoinSource ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SingleSourceTable} table=ID ("as" alias=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//{SingleSourceTable}
		public Action getSingleSourceTableAction_0_0() { return cSingleSourceTableAction_0_0; }

		//table=ID
		public Assignment getTableAssignment_0_1() { return cTableAssignment_0_1; }

		//ID
		public RuleCall getTableIDTerminalRuleCall_0_1_0() { return cTableIDTerminalRuleCall_0_1_0; }

		//("as" alias=ID)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"as"
		public Keyword getAsKeyword_0_2_0() { return cAsKeyword_0_2_0; }

		//alias=ID
		public Assignment getAliasAssignment_0_2_1() { return cAliasAssignment_0_2_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_0_2_1_0() { return cAliasIDTerminalRuleCall_0_2_1_0; }

		//{SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")" ("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//{SingleSourceSelectStatement}
		public Action getSingleSourceSelectStatementAction_1_0() { return cSingleSourceSelectStatementAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//selectStatement=SelectStatement
		public Assignment getSelectStatementAssignment_1_2() { return cSelectStatementAssignment_1_2; }

		//SelectStatement
		public RuleCall getSelectStatementSelectStatementParserRuleCall_1_2_0() { return cSelectStatementSelectStatementParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//("as" alias=ID)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"as"
		public Keyword getAsKeyword_1_4_0() { return cAsKeyword_1_4_0; }

		//alias=ID
		public Assignment getAliasAssignment_1_4_1() { return cAliasAssignment_1_4_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_4_1_0() { return cAliasIDTerminalRuleCall_1_4_1_0; }

		//{SingleSourceJoin} "(" joinSource=JoinSource ")"
		public Group getGroup_2() { return cGroup_2; }

		//{SingleSourceJoin}
		public Action getSingleSourceJoinAction_2_0() { return cSingleSourceJoinAction_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//joinSource=JoinSource
		public Assignment getJoinSourceAssignment_2_2() { return cJoinSourceAssignment_2_2; }

		//JoinSource
		public RuleCall getJoinSourceJoinSourceParserRuleCall_2_2_0() { return cJoinSourceJoinSourceParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class JoinStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNaturalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNaturalNaturalKeyword_1_0 = (Keyword)cNaturalAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftLeftKeyword_2_0_0_0 = (Keyword)cLeftAssignment_2_0_0.eContents().get(0);
		private final Assignment cOuterAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cOuterOuterKeyword_2_0_1_0 = (Keyword)cOuterAssignment_2_0_1.eContents().get(0);
		private final Assignment cInnerAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cInnerInnerKeyword_2_1_0 = (Keyword)cInnerAssignment_2_1.eContents().get(0);
		private final Assignment cCrossAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cCrossCrossKeyword_2_2_0 = (Keyword)cCrossAssignment_2_2.eContents().get(0);
		private final Keyword cJoinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSingleSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSingleSourceSingleSourceParserRuleCall_4_0 = (RuleCall)cSingleSourceAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//JoinStatement:
		//	{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
		//	singleSource=SingleSource "on" expression=SqlExpression;
		public ParserRule getRule() { return rule; }

		//{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
		//singleSource=SingleSource "on" expression=SqlExpression
		public Group getGroup() { return cGroup; }

		//{JoinStatement}
		public Action getJoinStatementAction_0() { return cJoinStatementAction_0; }

		//natural?="natural"?
		public Assignment getNaturalAssignment_1() { return cNaturalAssignment_1; }

		//"natural"
		public Keyword getNaturalNaturalKeyword_1_0() { return cNaturalNaturalKeyword_1_0; }

		//(left?="left" outer?="outer"? | inner?="inner" | cross?="cross")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//left?="left" outer?="outer"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//left?="left"
		public Assignment getLeftAssignment_2_0_0() { return cLeftAssignment_2_0_0; }

		//"left"
		public Keyword getLeftLeftKeyword_2_0_0_0() { return cLeftLeftKeyword_2_0_0_0; }

		//outer?="outer"?
		public Assignment getOuterAssignment_2_0_1() { return cOuterAssignment_2_0_1; }

		//"outer"
		public Keyword getOuterOuterKeyword_2_0_1_0() { return cOuterOuterKeyword_2_0_1_0; }

		//inner?="inner"
		public Assignment getInnerAssignment_2_1() { return cInnerAssignment_2_1; }

		//"inner"
		public Keyword getInnerInnerKeyword_2_1_0() { return cInnerInnerKeyword_2_1_0; }

		//cross?="cross"
		public Assignment getCrossAssignment_2_2() { return cCrossAssignment_2_2; }

		//"cross"
		public Keyword getCrossCrossKeyword_2_2_0() { return cCrossCrossKeyword_2_2_0; }

		//"join"
		public Keyword getJoinKeyword_3() { return cJoinKeyword_3; }

		//singleSource=SingleSource
		public Assignment getSingleSourceAssignment_4() { return cSingleSourceAssignment_4; }

		//SingleSource
		public RuleCall getSingleSourceSingleSourceParserRuleCall_4_0() { return cSingleSourceSingleSourceParserRuleCall_4_0; }

		//"on"
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_6_0() { return cExpressionSqlExpressionParserRuleCall_6_0; }
	}

	public class ResultColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultColumn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cResultColumnAllAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTableIDTerminalRuleCall_0_1_0 = (RuleCall)cTableAssignment_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cResultColumnExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAliasAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_2_1_0 = (RuleCall)cAliasAssignment_1_2_1.eContents().get(0);
		
		//ResultColumn:
		//	{ResultColumnAll} table=ID? "*" | {ResultColumnExpression} expression=SqlExpression ("as" alias=ID)?;
		public ParserRule getRule() { return rule; }

		//{ResultColumnAll} table=ID? "*" | {ResultColumnExpression} expression=SqlExpression ("as" alias=ID)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ResultColumnAll} table=ID? "*"
		public Group getGroup_0() { return cGroup_0; }

		//{ResultColumnAll}
		public Action getResultColumnAllAction_0_0() { return cResultColumnAllAction_0_0; }

		//table=ID?
		public Assignment getTableAssignment_0_1() { return cTableAssignment_0_1; }

		//ID
		public RuleCall getTableIDTerminalRuleCall_0_1_0() { return cTableIDTerminalRuleCall_0_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_2() { return cAsteriskKeyword_0_2; }

		//{ResultColumnExpression} expression=SqlExpression ("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//{ResultColumnExpression}
		public Action getResultColumnExpressionAction_1_0() { return cResultColumnExpressionAction_1_0; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_1_1_0() { return cExpressionSqlExpressionParserRuleCall_1_1_0; }

		//("as" alias=ID)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"as"
		public Keyword getAsKeyword_1_2_0() { return cAsKeyword_1_2_0; }

		//alias=ID
		public Assignment getAliasAssignment_1_2_1() { return cAliasAssignment_1_2_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_2_1_0() { return cAliasIDTerminalRuleCall_1_2_1_0; }
	}

	public class ConflictClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConflictClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConflictKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResolutionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResolutionConflictResolutionEnumRuleCall_2_0 = (RuleCall)cResolutionAssignment_2.eContents().get(0);
		
		//ConflictClause:
		//	"on" "conflict" resolution=ConflictResolution;
		public ParserRule getRule() { return rule; }

		//"on" "conflict" resolution=ConflictResolution
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//"conflict"
		public Keyword getConflictKeyword_1() { return cConflictKeyword_1; }

		//resolution=ConflictResolution
		public Assignment getResolutionAssignment_2() { return cResolutionAssignment_2; }

		//ConflictResolution
		public RuleCall getResolutionConflictResolutionEnumRuleCall_2_0() { return cResolutionConflictResolutionEnumRuleCall_2_0; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumericLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumberSignedNumberParserRuleCall_0_1_0 = (RuleCall)cNumberAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNullLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cLiteralNullKeyword_2_1_0 = (Keyword)cLiteralAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCurrentTimeLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cLiteralCurrent_timeKeyword_3_1_0 = (Keyword)cLiteralAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCurrentDateLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cLiteralCurrent_dateKeyword_4_1_0 = (Keyword)cLiteralAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCurrentTimeStampLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLiteralAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cLiteralCurrent_time_stampKeyword_5_1_0 = (Keyword)cLiteralAssignment_5_1.eContents().get(0);
		
		//LiteralValue:
		//	{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
		//	{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
		//	literal="current_time_stamp";
		public ParserRule getRule() { return rule; }

		//{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
		//{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
		//literal="current_time_stamp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumericLiteral} number=SignedNumber
		public Group getGroup_0() { return cGroup_0; }

		//{NumericLiteral}
		public Action getNumericLiteralAction_0_0() { return cNumericLiteralAction_0_0; }

		//number=SignedNumber
		public Assignment getNumberAssignment_0_1() { return cNumberAssignment_0_1; }

		//SignedNumber
		public RuleCall getNumberSignedNumberParserRuleCall_0_1_0() { return cNumberSignedNumberParserRuleCall_0_1_0; }

		//{StringLiteral} literal=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//literal=STRING
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_1_1_0() { return cLiteralSTRINGTerminalRuleCall_1_1_0; }

		//{NullLiteral} literal="null"
		public Group getGroup_2() { return cGroup_2; }

		//{NullLiteral}
		public Action getNullLiteralAction_2_0() { return cNullLiteralAction_2_0; }

		//literal="null"
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }

		//"null"
		public Keyword getLiteralNullKeyword_2_1_0() { return cLiteralNullKeyword_2_1_0; }

		//{CurrentTimeLiteral} literal="current_time"
		public Group getGroup_3() { return cGroup_3; }

		//{CurrentTimeLiteral}
		public Action getCurrentTimeLiteralAction_3_0() { return cCurrentTimeLiteralAction_3_0; }

		//literal="current_time"
		public Assignment getLiteralAssignment_3_1() { return cLiteralAssignment_3_1; }

		//"current_time"
		public Keyword getLiteralCurrent_timeKeyword_3_1_0() { return cLiteralCurrent_timeKeyword_3_1_0; }

		//{CurrentDateLiteral} literal="current_date"
		public Group getGroup_4() { return cGroup_4; }

		//{CurrentDateLiteral}
		public Action getCurrentDateLiteralAction_4_0() { return cCurrentDateLiteralAction_4_0; }

		//literal="current_date"
		public Assignment getLiteralAssignment_4_1() { return cLiteralAssignment_4_1; }

		//"current_date"
		public Keyword getLiteralCurrent_dateKeyword_4_1_0() { return cLiteralCurrent_dateKeyword_4_1_0; }

		//{CurrentTimeStampLiteral} literal="current_time_stamp"
		public Group getGroup_5() { return cGroup_5; }

		//{CurrentTimeStampLiteral}
		public Action getCurrentTimeStampLiteralAction_5_0() { return cCurrentTimeStampLiteralAction_5_0; }

		//literal="current_time_stamp"
		public Assignment getLiteralAssignment_5_1() { return cLiteralAssignment_5_1; }

		//"current_time_stamp"
		public Keyword getLiteralCurrent_time_stampKeyword_5_1_0() { return cLiteralCurrent_time_stampKeyword_5_1_0; }
	}

	public class SignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedNumber returns ecore::EBigDecimal:
		//	"-"? NUMBER;
		public ParserRule getRule() { return rule; }

		//"-"? NUMBER
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ColumnTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTextTextKeyword_0_0 = (Keyword)cTextEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBlobEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBlobBlobKeyword_3_0 = (Keyword)cBlobEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBooleanBooleanKeyword_4_0 = (Keyword)cBooleanEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ColumnType:
		//	text | integer | real | blob | boolean;
		public EnumRule getRule() { return rule; }

		//text | integer | real | blob | boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_0() { return cTextEnumLiteralDeclaration_0; }

		//"text"
		public Keyword getTextTextKeyword_0_0() { return cTextTextKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }

		//blob
		public EnumLiteralDeclaration getBlobEnumLiteralDeclaration_3() { return cBlobEnumLiteralDeclaration_3; }

		//"blob"
		public Keyword getBlobBlobKeyword_3_0() { return cBlobBlobKeyword_3_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_4() { return cBooleanEnumLiteralDeclaration_4; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_4_0() { return cBooleanBooleanKeyword_4_0; }
	}

	public class SqliteDataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SqliteDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTextTextKeyword_0_0 = (Keyword)cTextEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBlobEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBlobBlobKeyword_3_0 = (Keyword)cBlobEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNoneNoneKeyword_4_0 = (Keyword)cNoneEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNumericEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNumericNumericKeyword_5_0 = (Keyword)cNumericEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum SqliteDataType:
		//	text | integer | real | blob | none | numeric;
		public EnumRule getRule() { return rule; }

		//text | integer | real | blob | none | numeric
		public Alternatives getAlternatives() { return cAlternatives; }

		//text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_0() { return cTextEnumLiteralDeclaration_0; }

		//"text"
		public Keyword getTextTextKeyword_0_0() { return cTextTextKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }

		//blob
		public EnumLiteralDeclaration getBlobEnumLiteralDeclaration_3() { return cBlobEnumLiteralDeclaration_3; }

		//"blob"
		public Keyword getBlobBlobKeyword_3_0() { return cBlobBlobKeyword_3_0; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_4() { return cNoneEnumLiteralDeclaration_4; }

		//"none"
		public Keyword getNoneNoneKeyword_4_0() { return cNoneNoneKeyword_4_0; }

		//numeric
		public EnumLiteralDeclaration getNumericEnumLiteralDeclaration_5() { return cNumericEnumLiteralDeclaration_5; }

		//"numeric"
		public Keyword getNumericNumericKeyword_5_0() { return cNumericNumericKeyword_5_0; }
	}

	public class ConflictResolutionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConflictResolution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRollbackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRollbackRollbackKeyword_0_0 = (Keyword)cRollbackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAbortEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAbortAbortKeyword_1_0 = (Keyword)cAbortEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFailEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFailFailKeyword_2_0 = (Keyword)cFailEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIgnoreEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIgnoreIgnoreKeyword_3_0 = (Keyword)cIgnoreEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cReplaceEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cReplaceReplaceKeyword_4_0 = (Keyword)cReplaceEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ConflictResolution:
		//	rollback | abort | fail | ignore | replace;
		public EnumRule getRule() { return rule; }

		//rollback | abort | fail | ignore | replace
		public Alternatives getAlternatives() { return cAlternatives; }

		//rollback
		public EnumLiteralDeclaration getRollbackEnumLiteralDeclaration_0() { return cRollbackEnumLiteralDeclaration_0; }

		//"rollback"
		public Keyword getRollbackRollbackKeyword_0_0() { return cRollbackRollbackKeyword_0_0; }

		//abort
		public EnumLiteralDeclaration getAbortEnumLiteralDeclaration_1() { return cAbortEnumLiteralDeclaration_1; }

		//"abort"
		public Keyword getAbortAbortKeyword_1_0() { return cAbortAbortKeyword_1_0; }

		//fail
		public EnumLiteralDeclaration getFailEnumLiteralDeclaration_2() { return cFailEnumLiteralDeclaration_2; }

		//"fail"
		public Keyword getFailFailKeyword_2_0() { return cFailFailKeyword_2_0; }

		//ignore
		public EnumLiteralDeclaration getIgnoreEnumLiteralDeclaration_3() { return cIgnoreEnumLiteralDeclaration_3; }

		//"ignore"
		public Keyword getIgnoreIgnoreKeyword_3_0() { return cIgnoreIgnoreKeyword_3_0; }

		//replace
		public EnumLiteralDeclaration getReplaceEnumLiteralDeclaration_4() { return cReplaceEnumLiteralDeclaration_4; }

		//"replace"
		public Keyword getReplaceReplaceKeyword_4_0() { return cReplaceReplaceKeyword_4_0; }
	}
	
	private ModelElements pModel;
	private DatabaseBlockElements pDatabaseBlock;
	private ConfigBlockElements pConfigBlock;
	private ConfigurationStatementElements pConfigurationStatement;
	private MigrationBlockElements pMigrationBlock;
	private SqlExpressionElements pSqlExpression;
	private ExprConcatElements pExprConcat;
	private ExprMultElements pExprMult;
	private ExprAddElements pExprAdd;
	private ExprBitElements pExprBit;
	private ExprRelateElements pExprRelate;
	private ExprEqualElements pExprEqual;
	private ExprAndElements pExprAnd;
	private ExprOrElements pExprOr;
	private PrimaryExpressionElements pPrimaryExpression;
	private CaseElements pCase;
	private DDLStatementElements pDDLStatement;
	private DMLStatementElements pDMLStatement;
	private DeleteStatementElements pDeleteStatement;
	private InsertStatementElements pInsertStatement;
	private UpdateStatementElements pUpdateStatement;
	private UpdateColumnExpressionElements pUpdateColumnExpression;
	private SelectStatementElements pSelectStatement;
	private AlterTableClauseElements pAlterTableClause;
	private ColumnDefElements pColumnDef;
	private ColumnConstraintElements pColumnConstraint;
	private DefaultValueElements pDefaultValue;
	private TableConstraintElements pTableConstraint;
	private IndexedColumnElements pIndexedColumn;
	private ColumnTypeElements unknownRuleColumnType;
	private SqliteDataTypeElements unknownRuleSqliteDataType;
	private ConflictResolutionElements unknownRuleConflictResolution;
	private CompoundOperatorElements pCompoundOperator;
	private OrderingTermElements pOrderingTerm;
	private SelectCoreElements pSelectCore;
	private JoinSourceElements pJoinSource;
	private SingleSourceElements pSingleSource;
	private JoinStatementElements pJoinStatement;
	private ResultColumnElements pResultColumn;
	private ConflictClauseElements pConflictClause;
	private LiteralValueElements pLiteralValue;
	private SignedNumberElements pSignedNumber;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private FQNElements pFQN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqliteModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.robotoworks.mechanoid.sqlite.SqliteModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"package" packageName=FQN database=DatabaseBlock;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DatabaseBlock:
	//	"database" name=ID "{" config=ConfigBlock? migrations+=MigrationBlock* "}";
	public DatabaseBlockElements getDatabaseBlockAccess() {
		return (pDatabaseBlock != null) ? pDatabaseBlock : (pDatabaseBlock = new DatabaseBlockElements());
	}
	
	public ParserRule getDatabaseBlockRule() {
		return getDatabaseBlockAccess().getRule();
	}

	//ConfigBlock:
	//	{ConfigBlock} "config" "{" statements+=ConfigurationStatement* "}";
	public ConfigBlockElements getConfigBlockAccess() {
		return (pConfigBlock != null) ? pConfigBlock : (pConfigBlock = new ConfigBlockElements());
	}
	
	public ParserRule getConfigBlockRule() {
		return getConfigBlockAccess().getRule();
	}

	//ConfigurationStatement:
	//	{ActionStatement} "action" name=ID path=STRING | {ActiveRecordRegistrationStatement} "active" name=ID;
	public ConfigurationStatementElements getConfigurationStatementAccess() {
		return (pConfigurationStatement != null) ? pConfigurationStatement : (pConfigurationStatement = new ConfigurationStatementElements());
	}
	
	public ParserRule getConfigurationStatementRule() {
		return getConfigurationStatementAccess().getRule();
	}

	//MigrationBlock:
	//	{MigrationBlock} "migration" "{" (statements+=DDLStatement ";" (statements+=DDLStatement ";")*)? "}";
	public MigrationBlockElements getMigrationBlockAccess() {
		return (pMigrationBlock != null) ? pMigrationBlock : (pMigrationBlock = new MigrationBlockElements());
	}
	
	public ParserRule getMigrationBlockRule() {
		return getMigrationBlockAccess().getRule();
	}

	/// *
	//
	// * Expressions
	//
	// * / SqlExpression:
	//	root=ExprConcat;
	public SqlExpressionElements getSqlExpressionAccess() {
		return (pSqlExpression != null) ? pSqlExpression : (pSqlExpression = new SqlExpressionElements());
	}
	
	public ParserRule getSqlExpressionRule() {
		return getSqlExpressionAccess().getRule();
	}

	//ExprConcat returns Expression:
	//	ExprMult ({ExprConcat.left=current} op="||" right=ExprMult)*;
	public ExprConcatElements getExprConcatAccess() {
		return (pExprConcat != null) ? pExprConcat : (pExprConcat = new ExprConcatElements());
	}
	
	public ParserRule getExprConcatRule() {
		return getExprConcatAccess().getRule();
	}

	//ExprMult returns Expression:
	//	ExprAdd ({ExprMult.left=current} op=("*" | "/" | "%") right=ExprAdd)*;
	public ExprMultElements getExprMultAccess() {
		return (pExprMult != null) ? pExprMult : (pExprMult = new ExprMultElements());
	}
	
	public ParserRule getExprMultRule() {
		return getExprMultAccess().getRule();
	}

	//ExprAdd returns Expression:
	//	ExprBit ({ExprAdd.left=current} op=("+" | "-") right=ExprBit)*;
	public ExprAddElements getExprAddAccess() {
		return (pExprAdd != null) ? pExprAdd : (pExprAdd = new ExprAddElements());
	}
	
	public ParserRule getExprAddRule() {
		return getExprAddAccess().getRule();
	}

	//ExprBit returns Expression:
	//	ExprRelate ({ExprBit.left=current} op=("<<" | ">>" | "&" | "|") right=ExprRelate)*;
	public ExprBitElements getExprBitAccess() {
		return (pExprBit != null) ? pExprBit : (pExprBit = new ExprBitElements());
	}
	
	public ParserRule getExprBitRule() {
		return getExprBitAccess().getRule();
	}

	//ExprRelate returns Expression:
	//	ExprEqual ({ExprRelate.left=current} op=("<" | "<=" | ">" | ">=") right=ExprEqual)*;
	public ExprRelateElements getExprRelateAccess() {
		return (pExprRelate != null) ? pExprRelate : (pExprRelate = new ExprRelateElements());
	}
	
	public ParserRule getExprRelateRule() {
		return getExprRelateAccess().getRule();
	}

	//ExprEqual returns Expression:
	//	ExprAnd ({ExprEqual.left=current} op=("=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" |
	//	"regexp") right=ExprAnd)*;
	public ExprEqualElements getExprEqualAccess() {
		return (pExprEqual != null) ? pExprEqual : (pExprEqual = new ExprEqualElements());
	}
	
	public ParserRule getExprEqualRule() {
		return getExprEqualAccess().getRule();
	}

	//ExprAnd returns Expression:
	//	ExprOr ({ExprAnd.left=current} op="and" right=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return (pExprAnd != null) ? pExprAnd : (pExprAnd = new ExprAndElements());
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprOr returns Expression:
	//	PrimaryExpression ({ExprOr.left=current} op="or" right=PrimaryExpression)*;
	public ExprOrElements getExprOrAccess() {
		return (pExprOr != null) ? pExprOr : (pExprOr = new ExprOrElements());
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
	//	not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
	//	cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
	//	arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")" | {CastExpression} "cast" "(" expression=SqlExpression
	//	"as" type=SqliteDataType ")") isnull?=("is null" | "not null" | "notnull")?;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Case:
	//	"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	/// *
	//
	// * Statements
	//
	// * / DDLStatement:
	//	{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
	//	constraints+=TableConstraint)* ")" | {CreateViewStatement} "create" "view" name=ID "as"
	//	selectStatement=SelectStatement | {CreateTriggerStatement} "create" "trigger" name=ID ("before" | "after" | "instead"
	//	"of")? ("delete" | "insert" | "update" ("of" updateColumnNames+=ID ("," updateColumnNames+=ID)*)?) "on" tableName=ID
	//	("for" "each" "row")? ("when" whenExpression=SqlExpression)? "begin" (statements+=DMLStatement ";"
	//	(statements+=DMLStatement ";")*)? "end" | {AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause |
	//	{DropTableStatement} "drop" "table" ("if" "exists")? name=ID | {DropTriggerStatement} "drop" "trigger" ("if"
	//	"exists")? name=ID | {DropViewStatement} "drop" "view" ("if" "exists")? name=ID;
	public DDLStatementElements getDDLStatementAccess() {
		return (pDDLStatement != null) ? pDDLStatement : (pDDLStatement = new DDLStatementElements());
	}
	
	public ParserRule getDDLStatementRule() {
		return getDDLStatementAccess().getRule();
	}

	//DMLStatement:
	//	SelectStatement | InsertStatement | UpdateStatement | DeleteStatement;
	public DMLStatementElements getDMLStatementAccess() {
		return (pDMLStatement != null) ? pDMLStatement : (pDMLStatement = new DMLStatementElements());
	}
	
	public ParserRule getDMLStatementRule() {
		return getDMLStatementAccess().getRule();
	}

	//DeleteStatement:
	//	"delete" "from" tableName=ID ("where" expression=SqlExpression)?;
	public DeleteStatementElements getDeleteStatementAccess() {
		return (pDeleteStatement != null) ? pDeleteStatement : (pDeleteStatement = new DeleteStatementElements());
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}

	//InsertStatement:
	//	("insert" ("or" conflictResolution=ConflictResolution)? | "replace") "into" tableName=ID ("(" columnNames+=ID (","
	//	columnNames+=ID)* ")")? (("values" "(" expressions+=SqlExpression ("," expressions+=SqlExpression)* ")" |
	//	selectStatement=SelectStatement) | "default" "values");
	public InsertStatementElements getInsertStatementAccess() {
		return (pInsertStatement != null) ? pInsertStatement : (pInsertStatement = new InsertStatementElements());
	}
	
	public ParserRule getInsertStatementRule() {
		return getInsertStatementAccess().getRule();
	}

	//UpdateStatement:
	//	"update" ("or" conflictResolution=ConflictResolution)? tableName=ID "set"
	//	updateColumnExpressions+=UpdateColumnExpression ("," updateColumnExpressions+=UpdateColumnExpression)* ("where"
	//	whereExpression=SqlExpression)?;
	public UpdateStatementElements getUpdateStatementAccess() {
		return (pUpdateStatement != null) ? pUpdateStatement : (pUpdateStatement = new UpdateStatementElements());
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}

	//UpdateColumnExpression:
	//	columnName=ID "=" expression=SqlExpression;
	public UpdateColumnExpressionElements getUpdateColumnExpressionAccess() {
		return (pUpdateColumnExpression != null) ? pUpdateColumnExpression : (pUpdateColumnExpression = new UpdateColumnExpressionElements());
	}
	
	public ParserRule getUpdateColumnExpressionRule() {
		return getUpdateColumnExpressionAccess().getRule();
	}

	//SelectStatement:
	//	coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm
	//	("," orderingTerms+=OrderingTerm)*)?;
	public SelectStatementElements getSelectStatementAccess() {
		return (pSelectStatement != null) ? pSelectStatement : (pSelectStatement = new SelectStatementElements());
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}

	//AlterTableClause:
	//	{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef;
	public AlterTableClauseElements getAlterTableClauseAccess() {
		return (pAlterTableClause != null) ? pAlterTableClause : (pAlterTableClause = new AlterTableClauseElements());
	}
	
	public ParserRule getAlterTableClauseRule() {
		return getAlterTableClauseAccess().getRule();
	}

	//ColumnDef:
	//	name=ID type=ColumnType constraints+=ColumnConstraint*;
	public ColumnDefElements getColumnDefAccess() {
		return (pColumnDef != null) ? pColumnDef : (pColumnDef = new ColumnDefElements());
	}
	
	public ParserRule getColumnDefRule() {
		return getColumnDefAccess().getRule();
	}

	//ColumnConstraint:
	//	{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
	//	{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
	//	defaultValue=DefaultValue;
	public ColumnConstraintElements getColumnConstraintAccess() {
		return (pColumnConstraint != null) ? pColumnConstraint : (pColumnConstraint = new ColumnConstraintElements());
	}
	
	public ParserRule getColumnConstraintRule() {
		return getColumnConstraintAccess().getRule();
	}

	//DefaultValue:
	//	{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")";
	public DefaultValueElements getDefaultValueAccess() {
		return (pDefaultValue != null) ? pDefaultValue : (pDefaultValue = new DefaultValueElements());
	}
	
	public ParserRule getDefaultValueRule() {
		return getDefaultValueAccess().getRule();
	}

	//TableConstraint:
	//	{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
	//	conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
	//	("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
	//	"check" "(" expression=SqlExpression ")";
	public TableConstraintElements getTableConstraintAccess() {
		return (pTableConstraint != null) ? pTableConstraint : (pTableConstraint = new TableConstraintElements());
	}
	
	public ParserRule getTableConstraintRule() {
		return getTableConstraintAccess().getRule();
	}

	//IndexedColumn:
	//	name=[ColumnDef] (asc?="asc" | desc?="desc")?;
	public IndexedColumnElements getIndexedColumnAccess() {
		return (pIndexedColumn != null) ? pIndexedColumn : (pIndexedColumn = new IndexedColumnElements());
	}
	
	public ParserRule getIndexedColumnRule() {
		return getIndexedColumnAccess().getRule();
	}

	//enum ColumnType:
	//	text | integer | real | blob | boolean;
	public ColumnTypeElements getColumnTypeAccess() {
		return (unknownRuleColumnType != null) ? unknownRuleColumnType : (unknownRuleColumnType = new ColumnTypeElements());
	}
	
	public EnumRule getColumnTypeRule() {
		return getColumnTypeAccess().getRule();
	}

	//enum SqliteDataType:
	//	text | integer | real | blob | none | numeric;
	public SqliteDataTypeElements getSqliteDataTypeAccess() {
		return (unknownRuleSqliteDataType != null) ? unknownRuleSqliteDataType : (unknownRuleSqliteDataType = new SqliteDataTypeElements());
	}
	
	public EnumRule getSqliteDataTypeRule() {
		return getSqliteDataTypeAccess().getRule();
	}

	//enum ConflictResolution:
	//	rollback | abort | fail | ignore | replace;
	public ConflictResolutionElements getConflictResolutionAccess() {
		return (unknownRuleConflictResolution != null) ? unknownRuleConflictResolution : (unknownRuleConflictResolution = new ConflictResolutionElements());
	}
	
	public EnumRule getConflictResolutionRule() {
		return getConflictResolutionAccess().getRule();
	}

	//CompoundOperator:
	//	"union all" | "union" | "intersect" | "except";
	public CompoundOperatorElements getCompoundOperatorAccess() {
		return (pCompoundOperator != null) ? pCompoundOperator : (pCompoundOperator = new CompoundOperatorElements());
	}
	
	public ParserRule getCompoundOperatorRule() {
		return getCompoundOperatorAccess().getRule();
	}

	//OrderingTerm:
	//	expression=SqlExpression (asc?="asc" | desc?="desc")?;
	public OrderingTermElements getOrderingTermAccess() {
		return (pOrderingTerm != null) ? pOrderingTerm : (pOrderingTerm = new OrderingTermElements());
	}
	
	public ParserRule getOrderingTermRule() {
		return getOrderingTermAccess().getRule();
	}

	//SelectCore:
	//	"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
	//	source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
	//	groupByExpressions+=SqlExpression)*)?;
	public SelectCoreElements getSelectCoreAccess() {
		return (pSelectCore != null) ? pSelectCore : (pSelectCore = new SelectCoreElements());
	}
	
	public ParserRule getSelectCoreRule() {
		return getSelectCoreAccess().getRule();
	}

	//JoinSource:
	//	source=SingleSource joinStatements+=JoinStatement*;
	public JoinSourceElements getJoinSourceAccess() {
		return (pJoinSource != null) ? pJoinSource : (pJoinSource = new JoinSourceElements());
	}
	
	public ParserRule getJoinSourceRule() {
		return getJoinSourceAccess().getRule();
	}

	//SingleSource:
	//	{SingleSourceTable} table=ID ("as" alias=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")"
	//	("as" alias=ID)? | {SingleSourceJoin} "(" joinSource=JoinSource ")";
	public SingleSourceElements getSingleSourceAccess() {
		return (pSingleSource != null) ? pSingleSource : (pSingleSource = new SingleSourceElements());
	}
	
	public ParserRule getSingleSourceRule() {
		return getSingleSourceAccess().getRule();
	}

	//JoinStatement:
	//	{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
	//	singleSource=SingleSource "on" expression=SqlExpression;
	public JoinStatementElements getJoinStatementAccess() {
		return (pJoinStatement != null) ? pJoinStatement : (pJoinStatement = new JoinStatementElements());
	}
	
	public ParserRule getJoinStatementRule() {
		return getJoinStatementAccess().getRule();
	}

	//ResultColumn:
	//	{ResultColumnAll} table=ID? "*" | {ResultColumnExpression} expression=SqlExpression ("as" alias=ID)?;
	public ResultColumnElements getResultColumnAccess() {
		return (pResultColumn != null) ? pResultColumn : (pResultColumn = new ResultColumnElements());
	}
	
	public ParserRule getResultColumnRule() {
		return getResultColumnAccess().getRule();
	}

	//ConflictClause:
	//	"on" "conflict" resolution=ConflictResolution;
	public ConflictClauseElements getConflictClauseAccess() {
		return (pConflictClause != null) ? pConflictClause : (pConflictClause = new ConflictClauseElements());
	}
	
	public ParserRule getConflictClauseRule() {
		return getConflictClauseAccess().getRule();
	}

	//LiteralValue:
	//	{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
	//	{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
	//	literal="current_time_stamp";
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//SignedNumber returns ecore::EBigDecimal:
	//	"-"? NUMBER;
	public SignedNumberElements getSignedNumberAccess() {
		return (pSignedNumber != null) ? pSignedNumber : (pSignedNumber = new SignedNumberElements());
	}
	
	public ParserRule getSignedNumberRule() {
		return getSignedNumberAccess().getRule();
	}

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"$$$don\'t use this anymore$$$";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
