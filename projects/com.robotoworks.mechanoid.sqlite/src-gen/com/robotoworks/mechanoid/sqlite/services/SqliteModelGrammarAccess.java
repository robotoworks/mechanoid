/*
* generated by Xtext
*/

package com.robotoworks.mechanoid.sqlite.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqliteModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameFQNParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cDatabaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatabaseDatabaseBlockParserRuleCall_2_0 = (RuleCall)cDatabaseAssignment_2.eContents().get(0);
		
		//Model:
		//	"package" packageName=FQN database=DatabaseBlock;
		public ParserRule getRule() { return rule; }

		//"package" packageName=FQN database=DatabaseBlock
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=FQN
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//FQN
		public RuleCall getPackageNameFQNParserRuleCall_1_0() { return cPackageNameFQNParserRuleCall_1_0; }

		//database=DatabaseBlock
		public Assignment getDatabaseAssignment_2() { return cDatabaseAssignment_2; }

		//DatabaseBlock
		public RuleCall getDatabaseDatabaseBlockParserRuleCall_2_0() { return cDatabaseDatabaseBlockParserRuleCall_2_0; }
	}

	public class DatabaseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionBlockParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cMigrationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMigrationsMigrationBlockParserRuleCall_4_0 = (RuleCall)cMigrationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DatabaseBlock:
		//	"database" name=ID "{" actions=ActionBlock? migrations+=MigrationBlock* "}";
		public ParserRule getRule() { return rule; }

		//"database" name=ID "{" actions=ActionBlock? migrations+=MigrationBlock* "}"
		public Group getGroup() { return cGroup; }

		//"database"
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//actions=ActionBlock?
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//ActionBlock
		public RuleCall getActionsActionBlockParserRuleCall_3_0() { return cActionsActionBlockParserRuleCall_3_0; }

		//migrations+=MigrationBlock*
		public Assignment getMigrationsAssignment_4() { return cMigrationsAssignment_4; }

		//MigrationBlock
		public RuleCall getMigrationsMigrationBlockParserRuleCall_4_0() { return cMigrationsMigrationBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionStatementParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActionBlock:
		//	{ActionBlock} "actions" "{" actions+=ActionStatement* "}";
		public ParserRule getRule() { return rule; }

		//{ActionBlock} "actions" "{" actions+=ActionStatement* "}"
		public Group getGroup() { return cGroup; }

		//{ActionBlock}
		public Action getActionBlockAction_0() { return cActionBlockAction_0; }

		//"actions"
		public Keyword getActionsKeyword_1() { return cActionsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//actions+=ActionStatement*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//ActionStatement
		public RuleCall getActionsActionStatementParserRuleCall_3_0() { return cActionsActionStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//ActionStatement:
		//	name=ID path=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID path=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}

	public class MigrationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigrationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMigrationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMigrationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStatementsStatmentParserRuleCall_3_0_0 = (RuleCall)cStatementsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cStatementsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cStatementsStatmentParserRuleCall_3_2_0_0 = (RuleCall)cStatementsAssignment_3_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MigrationBlock:
		//	{MigrationBlock} "migration" "{" (statements+=Statment ";" (statements+=Statment ";")*)? "}";
		public ParserRule getRule() { return rule; }

		//{MigrationBlock} "migration" "{" (statements+=Statment ";" (statements+=Statment ";")*)? "}"
		public Group getGroup() { return cGroup; }

		//{MigrationBlock}
		public Action getMigrationBlockAction_0() { return cMigrationBlockAction_0; }

		//"migration"
		public Keyword getMigrationKeyword_1() { return cMigrationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(statements+=Statment ";" (statements+=Statment ";")*)?
		public Group getGroup_3() { return cGroup_3; }

		//statements+=Statment
		public Assignment getStatementsAssignment_3_0() { return cStatementsAssignment_3_0; }

		//Statment
		public RuleCall getStatementsStatmentParserRuleCall_3_0_0() { return cStatementsStatmentParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//(statements+=Statment ";")*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//statements+=Statment
		public Assignment getStatementsAssignment_3_2_0() { return cStatementsAssignment_3_2_0; }

		//Statment
		public RuleCall getStatementsStatmentParserRuleCall_3_2_0_0() { return cStatementsStatmentParserRuleCall_3_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_1() { return cSemicolonKeyword_3_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SqlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlExpression");
		private final Assignment cRootAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootOrParserRuleCall_0 = (RuleCall)cRootAssignment.eContents().get(0);
		
		/// *
		//
		// * Expressions
		//
		// * / SqlExpression:
		//	root=Or;
		public ParserRule getRule() { return rule; }

		//root=Or
		public Assignment getRootAssignment() { return cRootAssignment; }

		//Or
		public RuleCall getRootOrParserRuleCall_0() { return cRootOrParserRuleCall_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "or" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "or" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "or" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	PrimaryComparison ({And.left=current} "and" right=PrimaryComparison)*;
		public ParserRule getRule() { return rule; }

		//PrimaryComparison ({And.left=current} "and" right=PrimaryComparison)*
		public Group getGroup() { return cGroup; }

		//PrimaryComparison
		public RuleCall getPrimaryComparisonParserRuleCall_0() { return cPrimaryComparisonParserRuleCall_0; }

		//({And.left=current} "and" right=PrimaryComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right=PrimaryComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryComparison
		public RuleCall getRightPrimaryComparisonParserRuleCall_1_2_0() { return cRightPrimaryComparisonParserRuleCall_1_2_0; }
	}

	public class PrimaryComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSecondaryComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrimaryComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpSecondaryComparisonOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSecondaryComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PrimaryComparison returns Expression:
		//	SecondaryComparison ({PrimaryComparison.left=current} op=SecondaryComparisonOp right=SecondaryComparison)*;
		public ParserRule getRule() { return rule; }

		//SecondaryComparison ({PrimaryComparison.left=current} op=SecondaryComparisonOp right=SecondaryComparison)*
		public Group getGroup() { return cGroup; }

		//SecondaryComparison
		public RuleCall getSecondaryComparisonParserRuleCall_0() { return cSecondaryComparisonParserRuleCall_0; }

		//({PrimaryComparison.left=current} op=SecondaryComparisonOp right=SecondaryComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{PrimaryComparison.left=current}
		public Action getPrimaryComparisonLeftAction_1_0() { return cPrimaryComparisonLeftAction_1_0; }

		//op=SecondaryComparisonOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//SecondaryComparisonOp
		public RuleCall getOpSecondaryComparisonOpParserRuleCall_1_1_0() { return cOpSecondaryComparisonOpParserRuleCall_1_1_0; }

		//right=SecondaryComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SecondaryComparison
		public RuleCall getRightSecondaryComparisonParserRuleCall_1_2_0() { return cRightSecondaryComparisonParserRuleCall_1_2_0; }
	}

	public class SecondaryComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondaryComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSecondaryComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpPrimaryComparisonOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SecondaryComparison returns Expression:
		//	Division ({SecondaryComparison.left=current} op=PrimaryComparisonOp right=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({SecondaryComparison.left=current} op=PrimaryComparisonOp right=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({SecondaryComparison.left=current} op=PrimaryComparisonOp right=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{SecondaryComparison.left=current}
		public Action getSecondaryComparisonLeftAction_1_0() { return cSecondaryComparisonLeftAction_1_0; }

		//op=PrimaryComparisonOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//PrimaryComparisonOp
		public RuleCall getOpPrimaryComparisonOpParserRuleCall_1_1_0() { return cOpPrimaryComparisonOpParserRuleCall_1_1_0; }

		//right=Division
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Division
		public RuleCall getRightDivisionParserRuleCall_1_2_0() { return cRightDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Division returns Expression:
		//	Multiplication ({Division.left=current} "/" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Division.left=current} "/" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Division.left=current} "/" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0() { return cDivisionLeftAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Addition ({Multiplication.left=current} "*" right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition ({Multiplication.left=current} "*" right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({Multiplication.left=current} "*" right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSubtractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//	Subtraction ({Addition.left=current} "+" right=Subtraction)*;
		public ParserRule getRule() { return rule; }

		//Subtraction ({Addition.left=current} "+" right=Subtraction)*
		public Group getGroup() { return cGroup; }

		//Subtraction
		public RuleCall getSubtractionParserRuleCall_0() { return cSubtractionParserRuleCall_0; }

		//({Addition.left=current} "+" right=Subtraction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Subtraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Subtraction
		public RuleCall getRightSubtractionParserRuleCall_1_2_0() { return cRightSubtractionParserRuleCall_1_2_0; }
	}

	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubtractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Subtraction returns Expression:
		//	PrimaryExpression ({Subtraction.left=current} "-" right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({Subtraction.left=current} "-" right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({Subtraction.left=current} "-" right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_0() { return cSubtractionLeftAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cColumnLiteralAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cLiteralAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cLiteralValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_0_1_1_0 = (RuleCall)cLiteralValueAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cSqlExpressionParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cSelectStatementExpressionAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Assignment cNotAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final Keyword cNotNotKeyword_0_3_1_0 = (Keyword)cNotAssignment_0_3_1.eContents().get(0);
		private final Assignment cExistsAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final Keyword cExistsExistsKeyword_0_3_2_0 = (Keyword)cExistsAssignment_0_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Assignment cSelectAssignment_0_3_4 = (Assignment)cGroup_0_3.eContents().get(4);
		private final RuleCall cSelectSelectStatementParserRuleCall_0_3_4_0 = (RuleCall)cSelectAssignment_0_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_5 = (Keyword)cGroup_0_3.eContents().get(5);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Action cCaseExpressionAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cCaseKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cCaseExpressionAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cCaseExpressionSqlExpressionParserRuleCall_0_4_2_0 = (RuleCall)cCaseExpressionAssignment_0_4_2.eContents().get(0);
		private final Assignment cCasesAssignment_0_4_3 = (Assignment)cGroup_0_4.eContents().get(3);
		private final RuleCall cCasesCaseParserRuleCall_0_4_3_0 = (RuleCall)cCasesAssignment_0_4_3.eContents().get(0);
		private final Assignment cCasesAssignment_0_4_4 = (Assignment)cGroup_0_4.eContents().get(4);
		private final RuleCall cCasesCaseParserRuleCall_0_4_4_0 = (RuleCall)cCasesAssignment_0_4_4.eContents().get(0);
		private final Group cGroup_0_4_5 = (Group)cGroup_0_4.eContents().get(5);
		private final Keyword cElseKeyword_0_4_5_0 = (Keyword)cGroup_0_4_5.eContents().get(0);
		private final Assignment cElseExpressionAssignment_0_4_5_1 = (Assignment)cGroup_0_4_5.eContents().get(1);
		private final RuleCall cElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0 = (RuleCall)cElseExpressionAssignment_0_4_5_1.eContents().get(0);
		private final Keyword cEndKeyword_0_4_6 = (Keyword)cGroup_0_4.eContents().get(6);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Action cFunctionAction_0_5_0 = (Action)cGroup_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_5_1_0 = (RuleCall)cNameAssignment_0_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_5_2 = (Keyword)cGroup_0_5.eContents().get(2);
		private final Alternatives cAlternatives_0_5_3 = (Alternatives)cGroup_0_5.eContents().get(3);
		private final Assignment cAllAssignment_0_5_3_0 = (Assignment)cAlternatives_0_5_3.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_5_3_0_0 = (Keyword)cAllAssignment_0_5_3_0.eContents().get(0);
		private final Group cGroup_0_5_3_1 = (Group)cAlternatives_0_5_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_0_5_3_1_0 = (Assignment)cGroup_0_5_3_1.eContents().get(0);
		private final RuleCall cArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0 = (RuleCall)cArgumentsAssignment_0_5_3_1_0.eContents().get(0);
		private final Group cGroup_0_5_3_1_1 = (Group)cGroup_0_5_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_5_3_1_1_0 = (Keyword)cGroup_0_5_3_1_1.eContents().get(0);
		private final Assignment cArugmentsAssignment_0_5_3_1_1_1 = (Assignment)cGroup_0_5_3_1_1.eContents().get(1);
		private final RuleCall cArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0 = (RuleCall)cArugmentsAssignment_0_5_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5_4 = (Keyword)cGroup_0_5.eContents().get(4);
		private final Assignment cIsnullAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIsnullAlternatives_1_0 = (Alternatives)cIsnullAssignment_1.eContents().get(0);
		private final Keyword cIsnullIsNullKeyword_1_0_0 = (Keyword)cIsnullAlternatives_1_0.eContents().get(0);
		private final Keyword cIsnullNotNullKeyword_1_0_1 = (Keyword)cIsnullAlternatives_1_0.eContents().get(1);
		private final Keyword cIsnullNotnullKeyword_1_0_2 = (Keyword)cIsnullAlternatives_1_0.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//	not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//	cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//	arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")") isnull?=("is null" | "not null" | "notnull")?;
		public ParserRule getRule() { return rule; }

		//({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")") isnull?=("is null" | "not null" | "notnull")?
		public Group getGroup() { return cGroup; }

		//{ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
		//not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
		//cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
		//arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{ColumnLiteral} name=FQN
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{ColumnLiteral}
		public Action getColumnLiteralAction_0_0_0() { return cColumnLiteralAction_0_0_0; }

		//name=FQN
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_0_0_1_0() { return cNameFQNParserRuleCall_0_0_1_0; }

		//{Literal} literalValue=LiteralValue
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{Literal}
		public Action getLiteralAction_0_1_0() { return cLiteralAction_0_1_0; }

		//literalValue=LiteralValue
		public Assignment getLiteralValueAssignment_0_1_1() { return cLiteralValueAssignment_0_1_1; }

		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_0_1_1_0() { return cLiteralValueLiteralValueParserRuleCall_0_1_1_0; }

		//"(" SqlExpression ")"
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//SqlExpression
		public RuleCall getSqlExpressionParserRuleCall_0_2_1() { return cSqlExpressionParserRuleCall_0_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//{SelectStatementExpression} not?="not"? exists?="exists"? "(" select=SelectStatement ")"
		public Group getGroup_0_3() { return cGroup_0_3; }

		//{SelectStatementExpression}
		public Action getSelectStatementExpressionAction_0_3_0() { return cSelectStatementExpressionAction_0_3_0; }

		//not?="not"?
		public Assignment getNotAssignment_0_3_1() { return cNotAssignment_0_3_1; }

		//"not"
		public Keyword getNotNotKeyword_0_3_1_0() { return cNotNotKeyword_0_3_1_0; }

		//exists?="exists"?
		public Assignment getExistsAssignment_0_3_2() { return cExistsAssignment_0_3_2; }

		//"exists"
		public Keyword getExistsExistsKeyword_0_3_2_0() { return cExistsExistsKeyword_0_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3_3() { return cLeftParenthesisKeyword_0_3_3; }

		//select=SelectStatement
		public Assignment getSelectAssignment_0_3_4() { return cSelectAssignment_0_3_4; }

		//SelectStatement
		public RuleCall getSelectSelectStatementParserRuleCall_0_3_4_0() { return cSelectSelectStatementParserRuleCall_0_3_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_5() { return cRightParenthesisKeyword_0_3_5; }

		//{CaseExpression} "case" caseExpression=SqlExpression? cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)?
		//"end"
		public Group getGroup_0_4() { return cGroup_0_4; }

		//{CaseExpression}
		public Action getCaseExpressionAction_0_4_0() { return cCaseExpressionAction_0_4_0; }

		//"case"
		public Keyword getCaseKeyword_0_4_1() { return cCaseKeyword_0_4_1; }

		//caseExpression=SqlExpression?
		public Assignment getCaseExpressionAssignment_0_4_2() { return cCaseExpressionAssignment_0_4_2; }

		//SqlExpression
		public RuleCall getCaseExpressionSqlExpressionParserRuleCall_0_4_2_0() { return cCaseExpressionSqlExpressionParserRuleCall_0_4_2_0; }

		//cases+=Case
		public Assignment getCasesAssignment_0_4_3() { return cCasesAssignment_0_4_3; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_4_3_0() { return cCasesCaseParserRuleCall_0_4_3_0; }

		//cases+=Case*
		public Assignment getCasesAssignment_0_4_4() { return cCasesAssignment_0_4_4; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_4_4_0() { return cCasesCaseParserRuleCall_0_4_4_0; }

		//("else" elseExpression=SqlExpression)?
		public Group getGroup_0_4_5() { return cGroup_0_4_5; }

		//"else"
		public Keyword getElseKeyword_0_4_5_0() { return cElseKeyword_0_4_5_0; }

		//elseExpression=SqlExpression
		public Assignment getElseExpressionAssignment_0_4_5_1() { return cElseExpressionAssignment_0_4_5_1; }

		//SqlExpression
		public RuleCall getElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0() { return cElseExpressionSqlExpressionParserRuleCall_0_4_5_1_0; }

		//"end"
		public Keyword getEndKeyword_0_4_6() { return cEndKeyword_0_4_6; }

		//{Function} name=ID "(" (all?="*" | arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")"
		public Group getGroup_0_5() { return cGroup_0_5; }

		//{Function}
		public Action getFunctionAction_0_5_0() { return cFunctionAction_0_5_0; }

		//name=ID
		public Assignment getNameAssignment_0_5_1() { return cNameAssignment_0_5_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_5_1_0() { return cNameIDTerminalRuleCall_0_5_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_5_2() { return cLeftParenthesisKeyword_0_5_2; }

		//all?="*" | arguments+=SqlExpression ("," arugments+=SqlExpression)*
		public Alternatives getAlternatives_0_5_3() { return cAlternatives_0_5_3; }

		//all?="*"
		public Assignment getAllAssignment_0_5_3_0() { return cAllAssignment_0_5_3_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_5_3_0_0() { return cAllAsteriskKeyword_0_5_3_0_0; }

		//arguments+=SqlExpression ("," arugments+=SqlExpression)*
		public Group getGroup_0_5_3_1() { return cGroup_0_5_3_1; }

		//arguments+=SqlExpression
		public Assignment getArgumentsAssignment_0_5_3_1_0() { return cArgumentsAssignment_0_5_3_1_0; }

		//SqlExpression
		public RuleCall getArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0() { return cArgumentsSqlExpressionParserRuleCall_0_5_3_1_0_0; }

		//("," arugments+=SqlExpression)*
		public Group getGroup_0_5_3_1_1() { return cGroup_0_5_3_1_1; }

		//","
		public Keyword getCommaKeyword_0_5_3_1_1_0() { return cCommaKeyword_0_5_3_1_1_0; }

		//arugments+=SqlExpression
		public Assignment getArugmentsAssignment_0_5_3_1_1_1() { return cArugmentsAssignment_0_5_3_1_1_1; }

		//SqlExpression
		public RuleCall getArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0() { return cArugmentsSqlExpressionParserRuleCall_0_5_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5_4() { return cRightParenthesisKeyword_0_5_4; }

		//isnull?=("is null" | "not null" | "notnull")?
		public Assignment getIsnullAssignment_1() { return cIsnullAssignment_1; }

		//"is null" | "not null" | "notnull"
		public Alternatives getIsnullAlternatives_1_0() { return cIsnullAlternatives_1_0; }

		//"is null"
		public Keyword getIsnullIsNullKeyword_1_0_0() { return cIsnullIsNullKeyword_1_0_0; }

		//"not null"
		public Keyword getIsnullNotNullKeyword_1_0_1() { return cIsnullNotNullKeyword_1_0_1; }

		//"notnull"
		public Keyword getIsnullNotnullKeyword_1_0_2() { return cIsnullNotnullKeyword_1_0_2; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhenExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhenExpressionSqlExpressionParserRuleCall_1_0 = (RuleCall)cWhenExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionSqlExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		
		//Case:
		//	"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression;
		public ParserRule getRule() { return rule; }

		//"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//whenExpression=SqlExpression
		public Assignment getWhenExpressionAssignment_1() { return cWhenExpressionAssignment_1; }

		//SqlExpression
		public RuleCall getWhenExpressionSqlExpressionParserRuleCall_1_0() { return cWhenExpressionSqlExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//thenExpression=SqlExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }

		//SqlExpression
		public RuleCall getThenExpressionSqlExpressionParserRuleCall_3_0() { return cThenExpressionSqlExpressionParserRuleCall_3_0; }
	}

	public class PrimaryComparisonOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryComparisonOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIsNotKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLikeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGlobKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMatchKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRegexpKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//PrimaryComparisonOp:
		//	"=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp";
		public ParserRule getRule() { return rule; }

		//"=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_3() { return cLessThanSignGreaterThanSignKeyword_3; }

		//"is"
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }

		//"is not"
		public Keyword getIsNotKeyword_5() { return cIsNotKeyword_5; }

		//"in"
		public Keyword getInKeyword_6() { return cInKeyword_6; }

		//"like"
		public Keyword getLikeKeyword_7() { return cLikeKeyword_7; }

		//"glob"
		public Keyword getGlobKeyword_8() { return cGlobKeyword_8; }

		//"match"
		public Keyword getMatchKeyword_9() { return cMatchKeyword_9; }

		//"regexp"
		public Keyword getRegexpKeyword_10() { return cRegexpKeyword_10; }
	}

	public class SecondaryComparisonOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondaryComparisonOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//SecondaryComparisonOp:
		//	"<" | "<=" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class StatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCreateTableStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCreateKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTableKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cColumnDefsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cColumnDefsColumnDefParserRuleCall_0_5_0 = (RuleCall)cColumnDefsAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cCommaKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cColumnDefsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cColumnDefsColumnDefParserRuleCall_0_6_1_0 = (RuleCall)cColumnDefsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Keyword cCommaKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cConstraintsAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cConstraintsTableConstraintParserRuleCall_0_7_1_0 = (RuleCall)cConstraintsAssignment_0_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAlterTableStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAlterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cTableKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Assignment cClauseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cClauseAlterTableClauseParserRuleCall_1_4_0 = (RuleCall)cClauseAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCreateViewStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCreateKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cViewKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Keyword cAsKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cSelectStatementAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cSelectStatementSelectStatementParserRuleCall_2_5_0 = (RuleCall)cSelectStatementAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDropTableStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDropKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cTableKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cIfKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cExistsKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cNameAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_3_4_0 = (RuleCall)cNameAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDropViewStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDropKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cViewKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cIfKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Keyword cExistsKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Assignment cNameAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_4_0 = (RuleCall)cNameAssignment_4_4.eContents().get(0);
		
		/// *
		//
		// * Statements
		//
		// * / Statment:
		//	{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//	constraints+=TableConstraint)* ")" | {AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause |
		//	{CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement | {DropTableStatement} "drop"
		//	"table" ("if" "exists")? name=ID | {DropViewStatement} "drop" "view" ("if" "exists")? name=ID;
		public ParserRule getRule() { return rule; }

		//{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//constraints+=TableConstraint)* ")" | {AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause |
		//{CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement | {DropTableStatement} "drop"
		//"table" ("if" "exists")? name=ID | {DropViewStatement} "drop" "view" ("if" "exists")? name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
		//constraints+=TableConstraint)* ")"
		public Group getGroup_0() { return cGroup_0; }

		//{CreateTableStatement}
		public Action getCreateTableStatementAction_0_0() { return cCreateTableStatementAction_0_0; }

		//"create"
		public Keyword getCreateKeyword_0_1() { return cCreateKeyword_0_1; }

		//"table"
		public Keyword getTableKeyword_0_2() { return cTableKeyword_0_2; }

		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_4() { return cLeftParenthesisKeyword_0_4; }

		//columnDefs+=ColumnDef
		public Assignment getColumnDefsAssignment_0_5() { return cColumnDefsAssignment_0_5; }

		//ColumnDef
		public RuleCall getColumnDefsColumnDefParserRuleCall_0_5_0() { return cColumnDefsColumnDefParserRuleCall_0_5_0; }

		//("," columnDefs+=ColumnDef)*
		public Group getGroup_0_6() { return cGroup_0_6; }

		//","
		public Keyword getCommaKeyword_0_6_0() { return cCommaKeyword_0_6_0; }

		//columnDefs+=ColumnDef
		public Assignment getColumnDefsAssignment_0_6_1() { return cColumnDefsAssignment_0_6_1; }

		//ColumnDef
		public RuleCall getColumnDefsColumnDefParserRuleCall_0_6_1_0() { return cColumnDefsColumnDefParserRuleCall_0_6_1_0; }

		//("," constraints+=TableConstraint)*
		public Group getGroup_0_7() { return cGroup_0_7; }

		//","
		public Keyword getCommaKeyword_0_7_0() { return cCommaKeyword_0_7_0; }

		//constraints+=TableConstraint
		public Assignment getConstraintsAssignment_0_7_1() { return cConstraintsAssignment_0_7_1; }

		//TableConstraint
		public RuleCall getConstraintsTableConstraintParserRuleCall_0_7_1_0() { return cConstraintsTableConstraintParserRuleCall_0_7_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }

		//{AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause
		public Group getGroup_1() { return cGroup_1; }

		//{AlterTableStatement}
		public Action getAlterTableStatementAction_1_0() { return cAlterTableStatementAction_1_0; }

		//"alter"
		public Keyword getAlterKeyword_1_1() { return cAlterKeyword_1_1; }

		//"table"
		public Keyword getTableKeyword_1_2() { return cTableKeyword_1_2; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }

		//clause=AlterTableClause
		public Assignment getClauseAssignment_1_4() { return cClauseAssignment_1_4; }

		//AlterTableClause
		public RuleCall getClauseAlterTableClauseParserRuleCall_1_4_0() { return cClauseAlterTableClauseParserRuleCall_1_4_0; }

		//{CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement
		public Group getGroup_2() { return cGroup_2; }

		//{CreateViewStatement}
		public Action getCreateViewStatementAction_2_0() { return cCreateViewStatementAction_2_0; }

		//"create"
		public Keyword getCreateKeyword_2_1() { return cCreateKeyword_2_1; }

		//"view"
		public Keyword getViewKeyword_2_2() { return cViewKeyword_2_2; }

		//name=ID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_3_0() { return cNameIDTerminalRuleCall_2_3_0; }

		//"as"
		public Keyword getAsKeyword_2_4() { return cAsKeyword_2_4; }

		//selectStatement=SelectStatement
		public Assignment getSelectStatementAssignment_2_5() { return cSelectStatementAssignment_2_5; }

		//SelectStatement
		public RuleCall getSelectStatementSelectStatementParserRuleCall_2_5_0() { return cSelectStatementSelectStatementParserRuleCall_2_5_0; }

		//{DropTableStatement} "drop" "table" ("if" "exists")? name=ID
		public Group getGroup_3() { return cGroup_3; }

		//{DropTableStatement}
		public Action getDropTableStatementAction_3_0() { return cDropTableStatementAction_3_0; }

		//"drop"
		public Keyword getDropKeyword_3_1() { return cDropKeyword_3_1; }

		//"table"
		public Keyword getTableKeyword_3_2() { return cTableKeyword_3_2; }

		//("if" "exists")?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"if"
		public Keyword getIfKeyword_3_3_0() { return cIfKeyword_3_3_0; }

		//"exists"
		public Keyword getExistsKeyword_3_3_1() { return cExistsKeyword_3_3_1; }

		//name=ID
		public Assignment getNameAssignment_3_4() { return cNameAssignment_3_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_4_0() { return cNameIDTerminalRuleCall_3_4_0; }

		//{DropViewStatement} "drop" "view" ("if" "exists")? name=ID
		public Group getGroup_4() { return cGroup_4; }

		//{DropViewStatement}
		public Action getDropViewStatementAction_4_0() { return cDropViewStatementAction_4_0; }

		//"drop"
		public Keyword getDropKeyword_4_1() { return cDropKeyword_4_1; }

		//"view"
		public Keyword getViewKeyword_4_2() { return cViewKeyword_4_2; }

		//("if" "exists")?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"if"
		public Keyword getIfKeyword_4_3_0() { return cIfKeyword_4_3_0; }

		//"exists"
		public Keyword getExistsKeyword_4_3_1() { return cExistsKeyword_4_3_1; }

		//name=ID
		public Assignment getNameAssignment_4_4() { return cNameAssignment_4_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_4_0() { return cNameIDTerminalRuleCall_4_4_0; }
	}

	public class AlterTableClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlterTableClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAlterTableRenameClauseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRenameToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAlterTableAddColumnClauseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAddColumnKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnDefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnDefColumnDefParserRuleCall_1_2_0 = (RuleCall)cColumnDefAssignment_1_2.eContents().get(0);
		
		//AlterTableClause:
		//	{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef;
		public ParserRule getRule() { return rule; }

		//{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AlterTableRenameClause} "rename to" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//{AlterTableRenameClause}
		public Action getAlterTableRenameClauseAction_0_0() { return cAlterTableRenameClauseAction_0_0; }

		//"rename to"
		public Keyword getRenameToKeyword_0_1() { return cRenameToKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//{AlterTableAddColumnClause} "add column" columnDef=ColumnDef
		public Group getGroup_1() { return cGroup_1; }

		//{AlterTableAddColumnClause}
		public Action getAlterTableAddColumnClauseAction_1_0() { return cAlterTableAddColumnClauseAction_1_0; }

		//"add column"
		public Keyword getAddColumnKeyword_1_1() { return cAddColumnKeyword_1_1; }

		//columnDef=ColumnDef
		public Assignment getColumnDefAssignment_1_2() { return cColumnDefAssignment_1_2; }

		//ColumnDef
		public RuleCall getColumnDefColumnDefParserRuleCall_1_2_0() { return cColumnDefColumnDefParserRuleCall_1_2_0; }
	}

	public class ColumnDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeColumnTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsColumnConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		
		//ColumnDef:
		//	name=ID type=ColumnType constraints+=ColumnConstraint*;
		public ParserRule getRule() { return rule; }

		//name=ID type=ColumnType constraints+=ColumnConstraint*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=ColumnType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ColumnType
		public RuleCall getTypeColumnTypeEnumRuleCall_1_0() { return cTypeColumnTypeEnumRuleCall_1_0; }

		//constraints+=ColumnConstraint*
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }

		//ColumnConstraint
		public RuleCall getConstraintsColumnConstraintParserRuleCall_2_0() { return cConstraintsColumnConstraintParserRuleCall_2_0; }
	}

	public class ColumnConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryKeyColumnConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPrimaryKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cKeyKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cAscAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final Keyword cAscAscKeyword_0_3_0_0 = (Keyword)cAscAssignment_0_3_0.eContents().get(0);
		private final Assignment cDescAssignment_0_3_1 = (Assignment)cAlternatives_0_3.eContents().get(1);
		private final Keyword cDescDescKeyword_0_3_1_0 = (Keyword)cDescAssignment_0_3_1.eContents().get(0);
		private final Assignment cAutoincrementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cAutoincrementAutoincrementKeyword_0_4_0 = (Keyword)cAutoincrementAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotNullConstraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNullKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConflictClauseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_1_3_0 = (RuleCall)cConflictClauseAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDefaultConstraintAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDefaultKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDefaultValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDefaultValueDefaultValueParserRuleCall_2_2_0 = (RuleCall)cDefaultValueAssignment_2_2.eContents().get(0);
		
		//ColumnConstraint:
		//	{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
		//	{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
		//	defaultValue=DefaultValue;
		public ParserRule getRule() { return rule; }

		//{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
		//{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
		//defaultValue=DefaultValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"?
		public Group getGroup_0() { return cGroup_0; }

		//{PrimaryKeyColumnConstraint}
		public Action getPrimaryKeyColumnConstraintAction_0_0() { return cPrimaryKeyColumnConstraintAction_0_0; }

		//"primary"
		public Keyword getPrimaryKeyword_0_1() { return cPrimaryKeyword_0_1; }

		//"key"
		public Keyword getKeyKeyword_0_2() { return cKeyKeyword_0_2; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//asc?="asc"
		public Assignment getAscAssignment_0_3_0() { return cAscAssignment_0_3_0; }

		//"asc"
		public Keyword getAscAscKeyword_0_3_0_0() { return cAscAscKeyword_0_3_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_0_3_1() { return cDescAssignment_0_3_1; }

		//"desc"
		public Keyword getDescDescKeyword_0_3_1_0() { return cDescDescKeyword_0_3_1_0; }

		//autoincrement?="autoincrement"?
		public Assignment getAutoincrementAssignment_0_4() { return cAutoincrementAssignment_0_4; }

		//"autoincrement"
		public Keyword getAutoincrementAutoincrementKeyword_0_4_0() { return cAutoincrementAutoincrementKeyword_0_4_0; }

		//{NotNullConstraint} "not" "null" conflictClause=ConflictClause?
		public Group getGroup_1() { return cGroup_1; }

		//{NotNullConstraint}
		public Action getNotNullConstraintAction_1_0() { return cNotNullConstraintAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//"null"
		public Keyword getNullKeyword_1_2() { return cNullKeyword_1_2; }

		//conflictClause=ConflictClause?
		public Assignment getConflictClauseAssignment_1_3() { return cConflictClauseAssignment_1_3; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_1_3_0() { return cConflictClauseConflictClauseParserRuleCall_1_3_0; }

		//{DefaultConstraint} "default" defaultValue=DefaultValue
		public Group getGroup_2() { return cGroup_2; }

		//{DefaultConstraint}
		public Action getDefaultConstraintAction_2_0() { return cDefaultConstraintAction_2_0; }

		//"default"
		public Keyword getDefaultKeyword_2_1() { return cDefaultKeyword_2_1; }

		//defaultValue=DefaultValue
		public Assignment getDefaultValueAssignment_2_2() { return cDefaultValueAssignment_2_2; }

		//DefaultValue
		public RuleCall getDefaultValueDefaultValueParserRuleCall_2_2_0() { return cDefaultValueDefaultValueParserRuleCall_2_2_0; }
	}

	public class DefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralDefaultValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLiteralLiteralValueParserRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionDefaultValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DefaultValue:
		//	{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")";
		public ParserRule getRule() { return rule; }

		//{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LiteralDefaultValue} literal=LiteralValue
		public Group getGroup_0() { return cGroup_0; }

		//{LiteralDefaultValue}
		public Action getLiteralDefaultValueAction_0_0() { return cLiteralDefaultValueAction_0_0; }

		//literal=LiteralValue
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }

		//LiteralValue
		public RuleCall getLiteralLiteralValueParserRuleCall_0_1_0() { return cLiteralLiteralValueParserRuleCall_0_1_0; }

		//{ExpressionDefaultValue} "(" expression=SqlExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionDefaultValue}
		public Action getExpressionDefaultValueAction_1_0() { return cExpressionDefaultValueAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_1_2_0() { return cExpressionSqlExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TableConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUniqueTableContraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cConstraintKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cUniqueKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cColumnsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_0_4_0 = (RuleCall)cColumnsAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cColumnsAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_0_5_1_0 = (RuleCall)cColumnsAssignment_0_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cConflictClauseAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_0_7_0 = (RuleCall)cConflictClauseAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryContraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cConstraintKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cPrimaryKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cKeyKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cColumnsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_1_5_0 = (RuleCall)cColumnsAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cColumnsAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cColumnsIndexedColumnParserRuleCall_1_6_1_0 = (RuleCall)cColumnsAssignment_1_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cConflictClauseAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cConflictClauseConflictClauseParserRuleCall_1_8_0 = (RuleCall)cConflictClauseAssignment_1_8.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCheckTableConstraintAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cConstraintKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cCheckKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cExpressionAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_2_4_0 = (RuleCall)cExpressionAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//TableConstraint:
		//	{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//	conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
		//	("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
		//	"check" "(" expression=SqlExpression ")";
		public ParserRule getRule() { return rule; }

		//{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
		//("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
		//"check" "(" expression=SqlExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause
		public Group getGroup_0() { return cGroup_0; }

		//{UniqueTableContraint}
		public Action getUniqueTableContraintAction_0_0() { return cUniqueTableContraintAction_0_0; }

		//("constraint" name=ID)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"constraint"
		public Keyword getConstraintKeyword_0_1_0() { return cConstraintKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_1_0() { return cNameIDTerminalRuleCall_0_1_1_0; }

		//"unique"
		public Keyword getUniqueKeyword_0_2() { return cUniqueKeyword_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_0_4() { return cColumnsAssignment_0_4; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_0_4_0() { return cColumnsIndexedColumnParserRuleCall_0_4_0; }

		//("," columns+=IndexedColumn)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_0_5_1() { return cColumnsAssignment_0_5_1; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_0_5_1_0() { return cColumnsIndexedColumnParserRuleCall_0_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//conflictClause=ConflictClause
		public Assignment getConflictClauseAssignment_0_7() { return cConflictClauseAssignment_0_7; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_0_7_0() { return cConflictClauseConflictClauseParserRuleCall_0_7_0; }

		//{PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
		//conflictClause=ConflictClause
		public Group getGroup_1() { return cGroup_1; }

		//{PrimaryContraint}
		public Action getPrimaryContraintAction_1_0() { return cPrimaryContraintAction_1_0; }

		//("constraint" name=ID)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"constraint"
		public Keyword getConstraintKeyword_1_1_0() { return cConstraintKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//"primary"
		public Keyword getPrimaryKeyword_1_2() { return cPrimaryKeyword_1_2; }

		//"key"
		public Keyword getKeyKeyword_1_3() { return cKeyKeyword_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4() { return cLeftParenthesisKeyword_1_4; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_1_5() { return cColumnsAssignment_1_5; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_1_5_0() { return cColumnsIndexedColumnParserRuleCall_1_5_0; }

		//("," columns+=IndexedColumn)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//","
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//columns+=IndexedColumn
		public Assignment getColumnsAssignment_1_6_1() { return cColumnsAssignment_1_6_1; }

		//IndexedColumn
		public RuleCall getColumnsIndexedColumnParserRuleCall_1_6_1_0() { return cColumnsIndexedColumnParserRuleCall_1_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }

		//conflictClause=ConflictClause
		public Assignment getConflictClauseAssignment_1_8() { return cConflictClauseAssignment_1_8; }

		//ConflictClause
		public RuleCall getConflictClauseConflictClauseParserRuleCall_1_8_0() { return cConflictClauseConflictClauseParserRuleCall_1_8_0; }

		//{CheckTableConstraint} ("constraint" name=ID)? "check" "(" expression=SqlExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{CheckTableConstraint}
		public Action getCheckTableConstraintAction_2_0() { return cCheckTableConstraintAction_2_0; }

		//("constraint" name=ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"constraint"
		public Keyword getConstraintKeyword_2_1_0() { return cConstraintKeyword_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_1_0() { return cNameIDTerminalRuleCall_2_1_1_0; }

		//"check"
		public Keyword getCheckKeyword_2_2() { return cCheckKeyword_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_2_4() { return cExpressionAssignment_2_4; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_2_4_0() { return cExpressionSqlExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class IndexedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameColumnDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameColumnDefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameColumnDefCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAscAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAscAscKeyword_1_0_0 = (Keyword)cAscAssignment_1_0.eContents().get(0);
		private final Assignment cDescAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDescDescKeyword_1_1_0 = (Keyword)cDescAssignment_1_1.eContents().get(0);
		
		//IndexedColumn:
		//	name=[ColumnDef] (asc?="asc" | desc?="desc")?;
		public ParserRule getRule() { return rule; }

		//name=[ColumnDef] (asc?="asc" | desc?="desc")?
		public Group getGroup() { return cGroup; }

		//name=[ColumnDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[ColumnDef]
		public CrossReference getNameColumnDefCrossReference_0_0() { return cNameColumnDefCrossReference_0_0; }

		//ID
		public RuleCall getNameColumnDefIDTerminalRuleCall_0_0_1() { return cNameColumnDefIDTerminalRuleCall_0_0_1; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//asc?="asc"
		public Assignment getAscAssignment_1_0() { return cAscAssignment_1_0; }

		//"asc"
		public Keyword getAscAscKeyword_1_0_0() { return cAscAscKeyword_1_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_1_1() { return cDescAssignment_1_1; }

		//"desc"
		public Keyword getDescDescKeyword_1_1_0() { return cDescDescKeyword_1_1_0; }
	}

	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoreStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoreStatementsSelectCoreParserRuleCall_0_0 = (RuleCall)cCoreStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCompoundOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCoreStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCoreStatementsSelectCoreParserRuleCall_1_1_0 = (RuleCall)cCoreStatementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOrderKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cByKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOrderingTermsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOrderingTermsOrderingTermParserRuleCall_2_2_0 = (RuleCall)cOrderingTermsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cOrderingTermsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cOrderingTermsOrderingTermParserRuleCall_2_3_1_0 = (RuleCall)cOrderingTermsAssignment_2_3_1.eContents().get(0);
		
		//SelectStatement:
		//	coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm
		//	("," orderingTerms+=OrderingTerm)*)?;
		public ParserRule getRule() { return rule; }

		//coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm (","
		//orderingTerms+=OrderingTerm)*)?
		public Group getGroup() { return cGroup; }

		//coreStatements+=SelectCore
		public Assignment getCoreStatementsAssignment_0() { return cCoreStatementsAssignment_0; }

		//SelectCore
		public RuleCall getCoreStatementsSelectCoreParserRuleCall_0_0() { return cCoreStatementsSelectCoreParserRuleCall_0_0; }

		//(CompoundOperator coreStatements+=SelectCore)*
		public Group getGroup_1() { return cGroup_1; }

		//CompoundOperator
		public RuleCall getCompoundOperatorParserRuleCall_1_0() { return cCompoundOperatorParserRuleCall_1_0; }

		//coreStatements+=SelectCore
		public Assignment getCoreStatementsAssignment_1_1() { return cCoreStatementsAssignment_1_1; }

		//SelectCore
		public RuleCall getCoreStatementsSelectCoreParserRuleCall_1_1_0() { return cCoreStatementsSelectCoreParserRuleCall_1_1_0; }

		//("order" "by" orderingTerms+=OrderingTerm ("," orderingTerms+=OrderingTerm)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"order"
		public Keyword getOrderKeyword_2_0() { return cOrderKeyword_2_0; }

		//"by"
		public Keyword getByKeyword_2_1() { return cByKeyword_2_1; }

		//orderingTerms+=OrderingTerm
		public Assignment getOrderingTermsAssignment_2_2() { return cOrderingTermsAssignment_2_2; }

		//OrderingTerm
		public RuleCall getOrderingTermsOrderingTermParserRuleCall_2_2_0() { return cOrderingTermsOrderingTermParserRuleCall_2_2_0; }

		//("," orderingTerms+=OrderingTerm)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//orderingTerms+=OrderingTerm
		public Assignment getOrderingTermsAssignment_2_3_1() { return cOrderingTermsAssignment_2_3_1; }

		//OrderingTerm
		public RuleCall getOrderingTermsOrderingTermParserRuleCall_2_3_1_0() { return cOrderingTermsOrderingTermParserRuleCall_2_3_1_0; }
	}

	public class CompoundOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUnionAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntersectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExceptKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//CompoundOperator:
		//	"union all" | "union" | "intersect" | "except";
		public ParserRule getRule() { return rule; }

		//"union all" | "union" | "intersect" | "except"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"union all"
		public Keyword getUnionAllKeyword_0() { return cUnionAllKeyword_0; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }

		//"intersect"
		public Keyword getIntersectKeyword_2() { return cIntersectKeyword_2; }

		//"except"
		public Keyword getExceptKeyword_3() { return cExceptKeyword_3; }
	}

	public class OrderingTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderingTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAscAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAscAscKeyword_1_0_0 = (Keyword)cAscAssignment_1_0.eContents().get(0);
		private final Assignment cDescAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDescDescKeyword_1_1_0 = (Keyword)cDescAssignment_1_1.eContents().get(0);
		
		//OrderingTerm:
		//	expression=SqlExpression (asc?="asc" | desc?="desc")?;
		public ParserRule getRule() { return rule; }

		//expression=SqlExpression (asc?="asc" | desc?="desc")?
		public Group getGroup() { return cGroup; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_0_0() { return cExpressionSqlExpressionParserRuleCall_0_0; }

		//(asc?="asc" | desc?="desc")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//asc?="asc"
		public Assignment getAscAssignment_1_0() { return cAscAssignment_1_0; }

		//"asc"
		public Keyword getAscAscKeyword_1_0_0() { return cAscAscKeyword_1_0_0; }

		//desc?="desc"
		public Assignment getDescAssignment_1_1() { return cDescAssignment_1_1; }

		//"desc"
		public Keyword getDescDescKeyword_1_1_0() { return cDescDescKeyword_1_1_0; }
	}

	public class SelectCoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectCore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDistinctAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cDistinctDistinctKeyword_1_0_0 = (Keyword)cDistinctAssignment_1_0.eContents().get(0);
		private final Assignment cAllAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAllAllKeyword_1_1_0 = (Keyword)cAllAssignment_1_1.eContents().get(0);
		private final Assignment cResultColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultColumnsResultColumnParserRuleCall_2_0 = (RuleCall)cResultColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cResultColumnsResultColumnParserRuleCall_3_1_0 = (RuleCall)cResultColumnsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceJoinSourceParserRuleCall_4_1_0 = (RuleCall)cSourceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhereKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWhereExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWhereExpressionSqlExpressionParserRuleCall_5_1_0 = (RuleCall)cWhereExpressionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGroupKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cByKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cGroupByExpressionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cGroupByExpressionsSqlExpressionParserRuleCall_6_2_0 = (RuleCall)cGroupByExpressionsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cGroupByExpressionsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0 = (RuleCall)cGroupByExpressionsAssignment_6_3_1.eContents().get(0);
		
		//SelectCore:
		//	"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
		//	source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
		//	groupByExpressions+=SqlExpression)*)?;
		public ParserRule getRule() { return rule; }

		//"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
		//source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
		//groupByExpressions+=SqlExpression)*)?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//(distinct?="distinct" | all?="all")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//distinct?="distinct"
		public Assignment getDistinctAssignment_1_0() { return cDistinctAssignment_1_0; }

		//"distinct"
		public Keyword getDistinctDistinctKeyword_1_0_0() { return cDistinctDistinctKeyword_1_0_0; }

		//all?="all"
		public Assignment getAllAssignment_1_1() { return cAllAssignment_1_1; }

		//"all"
		public Keyword getAllAllKeyword_1_1_0() { return cAllAllKeyword_1_1_0; }

		//resultColumns+=ResultColumn
		public Assignment getResultColumnsAssignment_2() { return cResultColumnsAssignment_2; }

		//ResultColumn
		public RuleCall getResultColumnsResultColumnParserRuleCall_2_0() { return cResultColumnsResultColumnParserRuleCall_2_0; }

		//("," resultColumns+=ResultColumn)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//resultColumns+=ResultColumn
		public Assignment getResultColumnsAssignment_3_1() { return cResultColumnsAssignment_3_1; }

		//ResultColumn
		public RuleCall getResultColumnsResultColumnParserRuleCall_3_1_0() { return cResultColumnsResultColumnParserRuleCall_3_1_0; }

		//("from" source=JoinSource)?
		public Group getGroup_4() { return cGroup_4; }

		//"from"
		public Keyword getFromKeyword_4_0() { return cFromKeyword_4_0; }

		//source=JoinSource
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }

		//JoinSource
		public RuleCall getSourceJoinSourceParserRuleCall_4_1_0() { return cSourceJoinSourceParserRuleCall_4_1_0; }

		//("where" whereExpression=SqlExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"where"
		public Keyword getWhereKeyword_5_0() { return cWhereKeyword_5_0; }

		//whereExpression=SqlExpression
		public Assignment getWhereExpressionAssignment_5_1() { return cWhereExpressionAssignment_5_1; }

		//SqlExpression
		public RuleCall getWhereExpressionSqlExpressionParserRuleCall_5_1_0() { return cWhereExpressionSqlExpressionParserRuleCall_5_1_0; }

		//("group" "by" groupByExpressions+=SqlExpression ("," groupByExpressions+=SqlExpression)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"group"
		public Keyword getGroupKeyword_6_0() { return cGroupKeyword_6_0; }

		//"by"
		public Keyword getByKeyword_6_1() { return cByKeyword_6_1; }

		//groupByExpressions+=SqlExpression
		public Assignment getGroupByExpressionsAssignment_6_2() { return cGroupByExpressionsAssignment_6_2; }

		//SqlExpression
		public RuleCall getGroupByExpressionsSqlExpressionParserRuleCall_6_2_0() { return cGroupByExpressionsSqlExpressionParserRuleCall_6_2_0; }

		//("," groupByExpressions+=SqlExpression)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//groupByExpressions+=SqlExpression
		public Assignment getGroupByExpressionsAssignment_6_3_1() { return cGroupByExpressionsAssignment_6_3_1; }

		//SqlExpression
		public RuleCall getGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0() { return cGroupByExpressionsSqlExpressionParserRuleCall_6_3_1_0; }
	}

	public class JoinSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceSingleSourceParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Assignment cJoinStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinStatementsJoinStatementParserRuleCall_1_0 = (RuleCall)cJoinStatementsAssignment_1.eContents().get(0);
		
		//JoinSource:
		//	source=SingleSource joinStatements+=JoinStatement*;
		public ParserRule getRule() { return rule; }

		//source=SingleSource joinStatements+=JoinStatement*
		public Group getGroup() { return cGroup; }

		//source=SingleSource
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//SingleSource
		public RuleCall getSourceSingleSourceParserRuleCall_0_0() { return cSourceSingleSourceParserRuleCall_0_0; }

		//joinStatements+=JoinStatement*
		public Assignment getJoinStatementsAssignment_1() { return cJoinStatementsAssignment_1; }

		//JoinStatement
		public RuleCall getJoinStatementsJoinStatementParserRuleCall_1_0() { return cJoinStatementsJoinStatementParserRuleCall_1_0; }
	}

	public class SingleSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSingleSourceTableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTableNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTableNameIDTerminalRuleCall_0_1_0 = (RuleCall)cTableNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_2_1_0 = (RuleCall)cNameAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSingleSourceSelectStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSelectStatementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSelectStatementSelectStatementParserRuleCall_1_2_0 = (RuleCall)cSelectStatementAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSingleSourceJoinAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cJoinSourceAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cJoinSourceJoinSourceParserRuleCall_2_2_0 = (RuleCall)cJoinSourceAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//SingleSource:
		//	{SingleSourceTable} tableName=ID ("as" name=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement
		//	")" | {SingleSourceJoin} "(" joinSource=JoinSource ")";
		public ParserRule getRule() { return rule; }

		//{SingleSourceTable} tableName=ID ("as" name=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")"
		//| {SingleSourceJoin} "(" joinSource=JoinSource ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SingleSourceTable} tableName=ID ("as" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//{SingleSourceTable}
		public Action getSingleSourceTableAction_0_0() { return cSingleSourceTableAction_0_0; }

		//tableName=ID
		public Assignment getTableNameAssignment_0_1() { return cTableNameAssignment_0_1; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_0_1_0() { return cTableNameIDTerminalRuleCall_0_1_0; }

		//("as" name=ID)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"as"
		public Keyword getAsKeyword_0_2_0() { return cAsKeyword_0_2_0; }

		//name=ID
		public Assignment getNameAssignment_0_2_1() { return cNameAssignment_0_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_1_0() { return cNameIDTerminalRuleCall_0_2_1_0; }

		//{SingleSourceSelectStatement} "(" selectStatement=SelectStatement ")"
		public Group getGroup_1() { return cGroup_1; }

		//{SingleSourceSelectStatement}
		public Action getSingleSourceSelectStatementAction_1_0() { return cSingleSourceSelectStatementAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//selectStatement=SelectStatement
		public Assignment getSelectStatementAssignment_1_2() { return cSelectStatementAssignment_1_2; }

		//SelectStatement
		public RuleCall getSelectStatementSelectStatementParserRuleCall_1_2_0() { return cSelectStatementSelectStatementParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//{SingleSourceJoin} "(" joinSource=JoinSource ")"
		public Group getGroup_2() { return cGroup_2; }

		//{SingleSourceJoin}
		public Action getSingleSourceJoinAction_2_0() { return cSingleSourceJoinAction_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//joinSource=JoinSource
		public Assignment getJoinSourceAssignment_2_2() { return cJoinSourceAssignment_2_2; }

		//JoinSource
		public RuleCall getJoinSourceJoinSourceParserRuleCall_2_2_0() { return cJoinSourceJoinSourceParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class JoinStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNaturalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNaturalNaturalKeyword_1_0 = (Keyword)cNaturalAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftLeftKeyword_2_0_0_0 = (Keyword)cLeftAssignment_2_0_0.eContents().get(0);
		private final Assignment cOuterAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cOuterOuterKeyword_2_0_1_0 = (Keyword)cOuterAssignment_2_0_1.eContents().get(0);
		private final Assignment cInnerAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cInnerInnerKeyword_2_1_0 = (Keyword)cInnerAssignment_2_1.eContents().get(0);
		private final Assignment cCrossAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cCrossCrossKeyword_2_2_0 = (Keyword)cCrossAssignment_2_2.eContents().get(0);
		private final Keyword cJoinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSingleSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSingleSourceSingleSourceParserRuleCall_4_0 = (RuleCall)cSingleSourceAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//JoinStatement:
		//	{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
		//	singleSource=SingleSource "on" expression=SqlExpression;
		public ParserRule getRule() { return rule; }

		//{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
		//singleSource=SingleSource "on" expression=SqlExpression
		public Group getGroup() { return cGroup; }

		//{JoinStatement}
		public Action getJoinStatementAction_0() { return cJoinStatementAction_0; }

		//natural?="natural"?
		public Assignment getNaturalAssignment_1() { return cNaturalAssignment_1; }

		//"natural"
		public Keyword getNaturalNaturalKeyword_1_0() { return cNaturalNaturalKeyword_1_0; }

		//(left?="left" outer?="outer"? | inner?="inner" | cross?="cross")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//left?="left" outer?="outer"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//left?="left"
		public Assignment getLeftAssignment_2_0_0() { return cLeftAssignment_2_0_0; }

		//"left"
		public Keyword getLeftLeftKeyword_2_0_0_0() { return cLeftLeftKeyword_2_0_0_0; }

		//outer?="outer"?
		public Assignment getOuterAssignment_2_0_1() { return cOuterAssignment_2_0_1; }

		//"outer"
		public Keyword getOuterOuterKeyword_2_0_1_0() { return cOuterOuterKeyword_2_0_1_0; }

		//inner?="inner"
		public Assignment getInnerAssignment_2_1() { return cInnerAssignment_2_1; }

		//"inner"
		public Keyword getInnerInnerKeyword_2_1_0() { return cInnerInnerKeyword_2_1_0; }

		//cross?="cross"
		public Assignment getCrossAssignment_2_2() { return cCrossAssignment_2_2; }

		//"cross"
		public Keyword getCrossCrossKeyword_2_2_0() { return cCrossCrossKeyword_2_2_0; }

		//"join"
		public Keyword getJoinKeyword_3() { return cJoinKeyword_3; }

		//singleSource=SingleSource
		public Assignment getSingleSourceAssignment_4() { return cSingleSourceAssignment_4; }

		//SingleSource
		public RuleCall getSingleSourceSingleSourceParserRuleCall_4_0() { return cSingleSourceSingleSourceParserRuleCall_4_0; }

		//"on"
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_6_0() { return cExpressionSqlExpressionParserRuleCall_6_0; }
	}

	public class ResultColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultColumn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cResultColumnAllAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cResultColumnAllWithTableRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTableRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTableRefIDTerminalRuleCall_1_1_0 = (RuleCall)cTableRefAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cResultColumnExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionSqlExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cAsKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cNameAssignment_2_2_1.eContents().get(0);
		
		//ResultColumn:
		//	{ResultColumnAll} "*" | {ResultColumnAllWithTableRef} tableRef=ID "." "*" | {ResultColumnExpression}
		//	expression=SqlExpression ("as" name=ID)?;
		public ParserRule getRule() { return rule; }

		//{ResultColumnAll} "*" | {ResultColumnAllWithTableRef} tableRef=ID "." "*" | {ResultColumnExpression}
		//expression=SqlExpression ("as" name=ID)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ResultColumnAll} "*"
		public Group getGroup_0() { return cGroup_0; }

		//{ResultColumnAll}
		public Action getResultColumnAllAction_0_0() { return cResultColumnAllAction_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//{ResultColumnAllWithTableRef} tableRef=ID "." "*"
		public Group getGroup_1() { return cGroup_1; }

		//{ResultColumnAllWithTableRef}
		public Action getResultColumnAllWithTableRefAction_1_0() { return cResultColumnAllWithTableRefAction_1_0; }

		//tableRef=ID
		public Assignment getTableRefAssignment_1_1() { return cTableRefAssignment_1_1; }

		//ID
		public RuleCall getTableRefIDTerminalRuleCall_1_1_0() { return cTableRefIDTerminalRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_3() { return cAsteriskKeyword_1_3; }

		//{ResultColumnExpression} expression=SqlExpression ("as" name=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//{ResultColumnExpression}
		public Action getResultColumnExpressionAction_2_0() { return cResultColumnExpressionAction_2_0; }

		//expression=SqlExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//SqlExpression
		public RuleCall getExpressionSqlExpressionParserRuleCall_2_1_0() { return cExpressionSqlExpressionParserRuleCall_2_1_0; }

		//("as" name=ID)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"as"
		public Keyword getAsKeyword_2_2_0() { return cAsKeyword_2_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_2_1() { return cNameAssignment_2_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_1_0() { return cNameIDTerminalRuleCall_2_2_1_0; }
	}

	public class ConflictClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConflictClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConflictKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResolutionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResolutionConflictResolutionEnumRuleCall_2_0 = (RuleCall)cResolutionAssignment_2.eContents().get(0);
		
		//ConflictClause:
		//	"on" "conflict" resolution=ConflictResolution;
		public ParserRule getRule() { return rule; }

		//"on" "conflict" resolution=ConflictResolution
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//"conflict"
		public Keyword getConflictKeyword_1() { return cConflictKeyword_1; }

		//resolution=ConflictResolution
		public Assignment getResolutionAssignment_2() { return cResolutionAssignment_2; }

		//ConflictResolution
		public RuleCall getResolutionConflictResolutionEnumRuleCall_2_0() { return cResolutionConflictResolutionEnumRuleCall_2_0; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumericLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumberSignedNumberParserRuleCall_0_1_0 = (RuleCall)cNumberAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNullLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cLiteralNullKeyword_2_1_0 = (Keyword)cLiteralAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCurrentTimeLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cLiteralCurrent_timeKeyword_3_1_0 = (Keyword)cLiteralAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCurrentDateLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cLiteralCurrent_dateKeyword_4_1_0 = (Keyword)cLiteralAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCurrentTimeStampLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLiteralAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cLiteralCurrent_time_stampKeyword_5_1_0 = (Keyword)cLiteralAssignment_5_1.eContents().get(0);
		
		//LiteralValue:
		//	{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
		//	{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
		//	literal="current_time_stamp";
		public ParserRule getRule() { return rule; }

		//{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
		//{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
		//literal="current_time_stamp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumericLiteral} number=SignedNumber
		public Group getGroup_0() { return cGroup_0; }

		//{NumericLiteral}
		public Action getNumericLiteralAction_0_0() { return cNumericLiteralAction_0_0; }

		//number=SignedNumber
		public Assignment getNumberAssignment_0_1() { return cNumberAssignment_0_1; }

		//SignedNumber
		public RuleCall getNumberSignedNumberParserRuleCall_0_1_0() { return cNumberSignedNumberParserRuleCall_0_1_0; }

		//{StringLiteral} literal=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//literal=STRING
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_1_1_0() { return cLiteralSTRINGTerminalRuleCall_1_1_0; }

		//{NullLiteral} literal="null"
		public Group getGroup_2() { return cGroup_2; }

		//{NullLiteral}
		public Action getNullLiteralAction_2_0() { return cNullLiteralAction_2_0; }

		//literal="null"
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }

		//"null"
		public Keyword getLiteralNullKeyword_2_1_0() { return cLiteralNullKeyword_2_1_0; }

		//{CurrentTimeLiteral} literal="current_time"
		public Group getGroup_3() { return cGroup_3; }

		//{CurrentTimeLiteral}
		public Action getCurrentTimeLiteralAction_3_0() { return cCurrentTimeLiteralAction_3_0; }

		//literal="current_time"
		public Assignment getLiteralAssignment_3_1() { return cLiteralAssignment_3_1; }

		//"current_time"
		public Keyword getLiteralCurrent_timeKeyword_3_1_0() { return cLiteralCurrent_timeKeyword_3_1_0; }

		//{CurrentDateLiteral} literal="current_date"
		public Group getGroup_4() { return cGroup_4; }

		//{CurrentDateLiteral}
		public Action getCurrentDateLiteralAction_4_0() { return cCurrentDateLiteralAction_4_0; }

		//literal="current_date"
		public Assignment getLiteralAssignment_4_1() { return cLiteralAssignment_4_1; }

		//"current_date"
		public Keyword getLiteralCurrent_dateKeyword_4_1_0() { return cLiteralCurrent_dateKeyword_4_1_0; }

		//{CurrentTimeStampLiteral} literal="current_time_stamp"
		public Group getGroup_5() { return cGroup_5; }

		//{CurrentTimeStampLiteral}
		public Action getCurrentTimeStampLiteralAction_5_0() { return cCurrentTimeStampLiteralAction_5_0; }

		//literal="current_time_stamp"
		public Assignment getLiteralAssignment_5_1() { return cLiteralAssignment_5_1; }

		//"current_time_stamp"
		public Keyword getLiteralCurrent_time_stampKeyword_5_1_0() { return cLiteralCurrent_time_stampKeyword_5_1_0; }
	}

	public class SignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedNumber returns ecore::EBigDecimal:
		//	"-"? NUMBER;
		public ParserRule getRule() { return rule; }

		//"-"? NUMBER
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ColumnTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTextTextKeyword_0_0 = (Keyword)cTextEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBlobEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBlobBlobKeyword_3_0 = (Keyword)cBlobEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ColumnType:
		//	text | integer | real | blob;
		public EnumRule getRule() { return rule; }

		//text | integer | real | blob
		public Alternatives getAlternatives() { return cAlternatives; }

		//text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_0() { return cTextEnumLiteralDeclaration_0; }

		//"text"
		public Keyword getTextTextKeyword_0_0() { return cTextTextKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }

		//blob
		public EnumLiteralDeclaration getBlobEnumLiteralDeclaration_3() { return cBlobEnumLiteralDeclaration_3; }

		//"blob"
		public Keyword getBlobBlobKeyword_3_0() { return cBlobBlobKeyword_3_0; }
	}

	public class ConflictResolutionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConflictResolution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRollbackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRollbackRollbackKeyword_0_0 = (Keyword)cRollbackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAbortEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAbortAbortKeyword_1_0 = (Keyword)cAbortEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFailEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFailFailKeyword_2_0 = (Keyword)cFailEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIgnoreEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIgnoreIgnoreKeyword_3_0 = (Keyword)cIgnoreEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cReplaceEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cReplaceReplaceKeyword_4_0 = (Keyword)cReplaceEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ConflictResolution:
		//	rollback | abort | fail | ignore | replace;
		public EnumRule getRule() { return rule; }

		//rollback | abort | fail | ignore | replace
		public Alternatives getAlternatives() { return cAlternatives; }

		//rollback
		public EnumLiteralDeclaration getRollbackEnumLiteralDeclaration_0() { return cRollbackEnumLiteralDeclaration_0; }

		//"rollback"
		public Keyword getRollbackRollbackKeyword_0_0() { return cRollbackRollbackKeyword_0_0; }

		//abort
		public EnumLiteralDeclaration getAbortEnumLiteralDeclaration_1() { return cAbortEnumLiteralDeclaration_1; }

		//"abort"
		public Keyword getAbortAbortKeyword_1_0() { return cAbortAbortKeyword_1_0; }

		//fail
		public EnumLiteralDeclaration getFailEnumLiteralDeclaration_2() { return cFailEnumLiteralDeclaration_2; }

		//"fail"
		public Keyword getFailFailKeyword_2_0() { return cFailFailKeyword_2_0; }

		//ignore
		public EnumLiteralDeclaration getIgnoreEnumLiteralDeclaration_3() { return cIgnoreEnumLiteralDeclaration_3; }

		//"ignore"
		public Keyword getIgnoreIgnoreKeyword_3_0() { return cIgnoreIgnoreKeyword_3_0; }

		//replace
		public EnumLiteralDeclaration getReplaceEnumLiteralDeclaration_4() { return cReplaceEnumLiteralDeclaration_4; }

		//"replace"
		public Keyword getReplaceReplaceKeyword_4_0() { return cReplaceReplaceKeyword_4_0; }
	}
	
	private ModelElements pModel;
	private DatabaseBlockElements pDatabaseBlock;
	private ActionBlockElements pActionBlock;
	private ActionStatementElements pActionStatement;
	private MigrationBlockElements pMigrationBlock;
	private SqlExpressionElements pSqlExpression;
	private OrElements pOr;
	private AndElements pAnd;
	private PrimaryComparisonElements pPrimaryComparison;
	private SecondaryComparisonElements pSecondaryComparison;
	private DivisionElements pDivision;
	private MultiplicationElements pMultiplication;
	private AdditionElements pAddition;
	private SubtractionElements pSubtraction;
	private PrimaryExpressionElements pPrimaryExpression;
	private CaseElements pCase;
	private PrimaryComparisonOpElements pPrimaryComparisonOp;
	private SecondaryComparisonOpElements pSecondaryComparisonOp;
	private StatmentElements pStatment;
	private AlterTableClauseElements pAlterTableClause;
	private ColumnDefElements pColumnDef;
	private ColumnConstraintElements pColumnConstraint;
	private DefaultValueElements pDefaultValue;
	private TableConstraintElements pTableConstraint;
	private IndexedColumnElements pIndexedColumn;
	private ColumnTypeElements unknownRuleColumnType;
	private ConflictResolutionElements unknownRuleConflictResolution;
	private SelectStatementElements pSelectStatement;
	private CompoundOperatorElements pCompoundOperator;
	private OrderingTermElements pOrderingTerm;
	private SelectCoreElements pSelectCore;
	private JoinSourceElements pJoinSource;
	private SingleSourceElements pSingleSource;
	private JoinStatementElements pJoinStatement;
	private ResultColumnElements pResultColumn;
	private ConflictClauseElements pConflictClause;
	private LiteralValueElements pLiteralValue;
	private SignedNumberElements pSignedNumber;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private FQNElements pFQN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqliteModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.robotoworks.mechanoid.sqlite.SqliteModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"package" packageName=FQN database=DatabaseBlock;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DatabaseBlock:
	//	"database" name=ID "{" actions=ActionBlock? migrations+=MigrationBlock* "}";
	public DatabaseBlockElements getDatabaseBlockAccess() {
		return (pDatabaseBlock != null) ? pDatabaseBlock : (pDatabaseBlock = new DatabaseBlockElements());
	}
	
	public ParserRule getDatabaseBlockRule() {
		return getDatabaseBlockAccess().getRule();
	}

	//ActionBlock:
	//	{ActionBlock} "actions" "{" actions+=ActionStatement* "}";
	public ActionBlockElements getActionBlockAccess() {
		return (pActionBlock != null) ? pActionBlock : (pActionBlock = new ActionBlockElements());
	}
	
	public ParserRule getActionBlockRule() {
		return getActionBlockAccess().getRule();
	}

	//ActionStatement:
	//	name=ID path=STRING;
	public ActionStatementElements getActionStatementAccess() {
		return (pActionStatement != null) ? pActionStatement : (pActionStatement = new ActionStatementElements());
	}
	
	public ParserRule getActionStatementRule() {
		return getActionStatementAccess().getRule();
	}

	//MigrationBlock:
	//	{MigrationBlock} "migration" "{" (statements+=Statment ";" (statements+=Statment ";")*)? "}";
	public MigrationBlockElements getMigrationBlockAccess() {
		return (pMigrationBlock != null) ? pMigrationBlock : (pMigrationBlock = new MigrationBlockElements());
	}
	
	public ParserRule getMigrationBlockRule() {
		return getMigrationBlockAccess().getRule();
	}

	/// *
	//
	// * Expressions
	//
	// * / SqlExpression:
	//	root=Or;
	public SqlExpressionElements getSqlExpressionAccess() {
		return (pSqlExpression != null) ? pSqlExpression : (pSqlExpression = new SqlExpressionElements());
	}
	
	public ParserRule getSqlExpressionRule() {
		return getSqlExpressionAccess().getRule();
	}

	//Or returns Expression:
	//	And ({Or.left=current} "or" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	PrimaryComparison ({And.left=current} "and" right=PrimaryComparison)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//PrimaryComparison returns Expression:
	//	SecondaryComparison ({PrimaryComparison.left=current} op=SecondaryComparisonOp right=SecondaryComparison)*;
	public PrimaryComparisonElements getPrimaryComparisonAccess() {
		return (pPrimaryComparison != null) ? pPrimaryComparison : (pPrimaryComparison = new PrimaryComparisonElements());
	}
	
	public ParserRule getPrimaryComparisonRule() {
		return getPrimaryComparisonAccess().getRule();
	}

	//SecondaryComparison returns Expression:
	//	Division ({SecondaryComparison.left=current} op=PrimaryComparisonOp right=Division)*;
	public SecondaryComparisonElements getSecondaryComparisonAccess() {
		return (pSecondaryComparison != null) ? pSecondaryComparison : (pSecondaryComparison = new SecondaryComparisonElements());
	}
	
	public ParserRule getSecondaryComparisonRule() {
		return getSecondaryComparisonAccess().getRule();
	}

	//Division returns Expression:
	//	Multiplication ({Division.left=current} "/" right=Multiplication)*;
	public DivisionElements getDivisionAccess() {
		return (pDivision != null) ? pDivision : (pDivision = new DivisionElements());
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Addition ({Multiplication.left=current} "*" right=Addition)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Addition returns Expression:
	//	Subtraction ({Addition.left=current} "+" right=Subtraction)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Subtraction returns Expression:
	//	PrimaryExpression ({Subtraction.left=current} "-" right=PrimaryExpression)*;
	public SubtractionElements getSubtractionAccess() {
		return (pSubtraction != null) ? pSubtraction : (pSubtraction = new SubtractionElements());
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	({ColumnLiteral} name=FQN | {Literal} literalValue=LiteralValue | "(" SqlExpression ")" | {SelectStatementExpression}
	//	not?="not"? exists?="exists"? "(" select=SelectStatement ")" | {CaseExpression} "case" caseExpression=SqlExpression?
	//	cases+=Case cases+=Case* ("else" elseExpression=SqlExpression)? "end" | {Function} name=ID "(" (all?="*" |
	//	arguments+=SqlExpression ("," arugments+=SqlExpression)*) ")") isnull?=("is null" | "not null" | "notnull")?;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Case:
	//	"when" whenExpression=SqlExpression "then" thenExpression=SqlExpression;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//PrimaryComparisonOp:
	//	"=" | "==" | "!=" | "<>" | "is" | "is not" | "in" | "like" | "glob" | "match" | "regexp";
	public PrimaryComparisonOpElements getPrimaryComparisonOpAccess() {
		return (pPrimaryComparisonOp != null) ? pPrimaryComparisonOp : (pPrimaryComparisonOp = new PrimaryComparisonOpElements());
	}
	
	public ParserRule getPrimaryComparisonOpRule() {
		return getPrimaryComparisonOpAccess().getRule();
	}

	//SecondaryComparisonOp:
	//	"<" | "<=" | ">" | ">=";
	public SecondaryComparisonOpElements getSecondaryComparisonOpAccess() {
		return (pSecondaryComparisonOp != null) ? pSecondaryComparisonOp : (pSecondaryComparisonOp = new SecondaryComparisonOpElements());
	}
	
	public ParserRule getSecondaryComparisonOpRule() {
		return getSecondaryComparisonOpAccess().getRule();
	}

	/// *
	//
	// * Statements
	//
	// * / Statment:
	//	{CreateTableStatement} "create" "table" name=ID "(" columnDefs+=ColumnDef ("," columnDefs+=ColumnDef)* (","
	//	constraints+=TableConstraint)* ")" | {AlterTableStatement} "alter" "table" name=ID clause=AlterTableClause |
	//	{CreateViewStatement} "create" "view" name=ID "as" selectStatement=SelectStatement | {DropTableStatement} "drop"
	//	"table" ("if" "exists")? name=ID | {DropViewStatement} "drop" "view" ("if" "exists")? name=ID;
	public StatmentElements getStatmentAccess() {
		return (pStatment != null) ? pStatment : (pStatment = new StatmentElements());
	}
	
	public ParserRule getStatmentRule() {
		return getStatmentAccess().getRule();
	}

	//AlterTableClause:
	//	{AlterTableRenameClause} "rename to" name=ID | {AlterTableAddColumnClause} "add column" columnDef=ColumnDef;
	public AlterTableClauseElements getAlterTableClauseAccess() {
		return (pAlterTableClause != null) ? pAlterTableClause : (pAlterTableClause = new AlterTableClauseElements());
	}
	
	public ParserRule getAlterTableClauseRule() {
		return getAlterTableClauseAccess().getRule();
	}

	//ColumnDef:
	//	name=ID type=ColumnType constraints+=ColumnConstraint*;
	public ColumnDefElements getColumnDefAccess() {
		return (pColumnDef != null) ? pColumnDef : (pColumnDef = new ColumnDefElements());
	}
	
	public ParserRule getColumnDefRule() {
		return getColumnDefAccess().getRule();
	}

	//ColumnConstraint:
	//	{PrimaryKeyColumnConstraint} "primary" "key" (asc?="asc" | desc?="desc")? autoincrement?="autoincrement"? |
	//	{NotNullConstraint} "not" "null" conflictClause=ConflictClause? | {DefaultConstraint} "default"
	//	defaultValue=DefaultValue;
	public ColumnConstraintElements getColumnConstraintAccess() {
		return (pColumnConstraint != null) ? pColumnConstraint : (pColumnConstraint = new ColumnConstraintElements());
	}
	
	public ParserRule getColumnConstraintRule() {
		return getColumnConstraintAccess().getRule();
	}

	//DefaultValue:
	//	{LiteralDefaultValue} literal=LiteralValue | {ExpressionDefaultValue} "(" expression=SqlExpression ")";
	public DefaultValueElements getDefaultValueAccess() {
		return (pDefaultValue != null) ? pDefaultValue : (pDefaultValue = new DefaultValueElements());
	}
	
	public ParserRule getDefaultValueRule() {
		return getDefaultValueAccess().getRule();
	}

	//TableConstraint:
	//	{UniqueTableContraint} ("constraint" name=ID)? "unique" "(" columns+=IndexedColumn ("," columns+=IndexedColumn)* ")"
	//	conflictClause=ConflictClause | {PrimaryContraint} ("constraint" name=ID)? "primary" "key" "(" columns+=IndexedColumn
	//	("," columns+=IndexedColumn)* ")" conflictClause=ConflictClause | {CheckTableConstraint} ("constraint" name=ID)?
	//	"check" "(" expression=SqlExpression ")";
	public TableConstraintElements getTableConstraintAccess() {
		return (pTableConstraint != null) ? pTableConstraint : (pTableConstraint = new TableConstraintElements());
	}
	
	public ParserRule getTableConstraintRule() {
		return getTableConstraintAccess().getRule();
	}

	//IndexedColumn:
	//	name=[ColumnDef] (asc?="asc" | desc?="desc")?;
	public IndexedColumnElements getIndexedColumnAccess() {
		return (pIndexedColumn != null) ? pIndexedColumn : (pIndexedColumn = new IndexedColumnElements());
	}
	
	public ParserRule getIndexedColumnRule() {
		return getIndexedColumnAccess().getRule();
	}

	//enum ColumnType:
	//	text | integer | real | blob;
	public ColumnTypeElements getColumnTypeAccess() {
		return (unknownRuleColumnType != null) ? unknownRuleColumnType : (unknownRuleColumnType = new ColumnTypeElements());
	}
	
	public EnumRule getColumnTypeRule() {
		return getColumnTypeAccess().getRule();
	}

	//enum ConflictResolution:
	//	rollback | abort | fail | ignore | replace;
	public ConflictResolutionElements getConflictResolutionAccess() {
		return (unknownRuleConflictResolution != null) ? unknownRuleConflictResolution : (unknownRuleConflictResolution = new ConflictResolutionElements());
	}
	
	public EnumRule getConflictResolutionRule() {
		return getConflictResolutionAccess().getRule();
	}

	//SelectStatement:
	//	coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)* ("order" "by" orderingTerms+=OrderingTerm
	//	("," orderingTerms+=OrderingTerm)*)?;
	public SelectStatementElements getSelectStatementAccess() {
		return (pSelectStatement != null) ? pSelectStatement : (pSelectStatement = new SelectStatementElements());
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}

	//CompoundOperator:
	//	"union all" | "union" | "intersect" | "except";
	public CompoundOperatorElements getCompoundOperatorAccess() {
		return (pCompoundOperator != null) ? pCompoundOperator : (pCompoundOperator = new CompoundOperatorElements());
	}
	
	public ParserRule getCompoundOperatorRule() {
		return getCompoundOperatorAccess().getRule();
	}

	//OrderingTerm:
	//	expression=SqlExpression (asc?="asc" | desc?="desc")?;
	public OrderingTermElements getOrderingTermAccess() {
		return (pOrderingTerm != null) ? pOrderingTerm : (pOrderingTerm = new OrderingTermElements());
	}
	
	public ParserRule getOrderingTermRule() {
		return getOrderingTermAccess().getRule();
	}

	//SelectCore:
	//	"select" (distinct?="distinct" | all?="all")? resultColumns+=ResultColumn ("," resultColumns+=ResultColumn)* ("from"
	//	source=JoinSource)? ("where" whereExpression=SqlExpression)? ("group" "by" groupByExpressions+=SqlExpression (","
	//	groupByExpressions+=SqlExpression)*)?;
	public SelectCoreElements getSelectCoreAccess() {
		return (pSelectCore != null) ? pSelectCore : (pSelectCore = new SelectCoreElements());
	}
	
	public ParserRule getSelectCoreRule() {
		return getSelectCoreAccess().getRule();
	}

	//JoinSource:
	//	source=SingleSource joinStatements+=JoinStatement*;
	public JoinSourceElements getJoinSourceAccess() {
		return (pJoinSource != null) ? pJoinSource : (pJoinSource = new JoinSourceElements());
	}
	
	public ParserRule getJoinSourceRule() {
		return getJoinSourceAccess().getRule();
	}

	//SingleSource:
	//	{SingleSourceTable} tableName=ID ("as" name=ID)? | {SingleSourceSelectStatement} "(" selectStatement=SelectStatement
	//	")" | {SingleSourceJoin} "(" joinSource=JoinSource ")";
	public SingleSourceElements getSingleSourceAccess() {
		return (pSingleSource != null) ? pSingleSource : (pSingleSource = new SingleSourceElements());
	}
	
	public ParserRule getSingleSourceRule() {
		return getSingleSourceAccess().getRule();
	}

	//JoinStatement:
	//	{JoinStatement} natural?="natural"? (left?="left" outer?="outer"? | inner?="inner" | cross?="cross")? "join"
	//	singleSource=SingleSource "on" expression=SqlExpression;
	public JoinStatementElements getJoinStatementAccess() {
		return (pJoinStatement != null) ? pJoinStatement : (pJoinStatement = new JoinStatementElements());
	}
	
	public ParserRule getJoinStatementRule() {
		return getJoinStatementAccess().getRule();
	}

	//ResultColumn:
	//	{ResultColumnAll} "*" | {ResultColumnAllWithTableRef} tableRef=ID "." "*" | {ResultColumnExpression}
	//	expression=SqlExpression ("as" name=ID)?;
	public ResultColumnElements getResultColumnAccess() {
		return (pResultColumn != null) ? pResultColumn : (pResultColumn = new ResultColumnElements());
	}
	
	public ParserRule getResultColumnRule() {
		return getResultColumnAccess().getRule();
	}

	//ConflictClause:
	//	"on" "conflict" resolution=ConflictResolution;
	public ConflictClauseElements getConflictClauseAccess() {
		return (pConflictClause != null) ? pConflictClause : (pConflictClause = new ConflictClauseElements());
	}
	
	public ParserRule getConflictClauseRule() {
		return getConflictClauseAccess().getRule();
	}

	//LiteralValue:
	//	{NumericLiteral} number=SignedNumber | {StringLiteral} literal=STRING | {NullLiteral} literal="null" |
	//	{CurrentTimeLiteral} literal="current_time" | {CurrentDateLiteral} literal="current_date" | {CurrentTimeStampLiteral}
	//	literal="current_time_stamp";
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//SignedNumber returns ecore::EBigDecimal:
	//	"-"? NUMBER;
	public SignedNumberElements getSignedNumberAccess() {
		return (pSignedNumber != null) ? pSignedNumber : (pSignedNumber = new SignedNumberElements());
	}
	
	public ParserRule getSignedNumberRule() {
		return getSignedNumberAccess().getRule();
	}

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"$$$don\'t use this anymore$$$";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
