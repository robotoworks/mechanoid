grammar com.robotoworks.mechanoid.sqlite.SqliteModel with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sqliteModel "http://www.robotoworks.com/mechanoid/sqlite/SqliteModel"

Model:
	'package' packageName=FQN
	database=DatabaseBlock;

DatabaseBlock:
	'database' name=ID '{' (config=ConfigBlock)? (migrations+=MigrationBlock)* '}';

ConfigBlock:
	{ConfigBlock}
	'config' '{' statements+=ConfigurationStatement* '}'
;

ConfigurationStatement:
	{ActionStatement} 'action' name=ID path=STRING |
	{ActiveRecordRegistrationStatement} 'active' name=ID
;

MigrationBlock:
	{MigrationBlock}
	'migration' '{' (statements+=DDLStatement ';' (statements+=DDLStatement ';')*)? '}';
	
/*
 * Expressions
 */

SqlExpression:
	root=ExprConcat
;

ExprConcat returns Expression:
	ExprMult ({ExprConcat.left=current} op='||' right=ExprMult)*
;

ExprMult returns Expression:
	ExprAdd ({ExprMult.left=current} op=('*'|'/'|'%') right=ExprAdd)*
;

ExprAdd returns Expression:
	ExprBit ({ExprAdd.left=current} op=('+'|'-') right=ExprBit)*
;

ExprBit returns Expression:
	ExprRelate ({ExprBit.left=current} op=('<<'|'>>'|'&'|'|') right=ExprRelate)*
;

ExprRelate returns Expression:
	ExprEqual ({ExprRelate.left=current} op=('<'|'<='|'>'|'>=') right=ExprEqual)*
;

ExprEqual returns Expression:
	ExprAnd ({ExprEqual.left=current} 
		op=('='|'=='|'!='|'<>'|'is'|'is not'|'in'|'like'|'glob'|'match'|'regexp') 
		right=ExprAnd
	)*
;

ExprAnd returns Expression:
	ExprOr ({ExprAnd.left=current} op='and' right=ExprOr)*
;

ExprOr returns Expression:
	NullCheckExpression ({ExprOr.left=current} op='or' right=NullCheckExpression)*
;

NullCheckExpression returns Expression:
	PrimaryExpression {NullCheckExpression.left=current} ('is null'| 'not null' | 'notnull')?
;

PrimaryExpression returns Expression:
	{ColumnLiteral} name=FQN |
	{Literal} literalValue=LiteralValue |
	'(' SqlExpression ')' |
	{SelectStatementExpression} not?='not'? exists?='exists'? '(' select=SelectStatement ')' |
	{CaseExpression} 'case' caseExpression=SqlExpression? 
			cases+=Case cases+=Case*
			('else' elseExpression=SqlExpression)? 'end' |
	{Function} name=ID '(' (all?='*'|arguments+=SqlExpression (',' arugments+=SqlExpression)*) ')' |
	{CastExpression} 'cast' '(' expression=SqlExpression 'as' type=SqliteDataType ')'
;



Case:
'when' whenExpression=SqlExpression 'then' thenExpression=SqlExpression
;

/*
 * Statements
 */

DDLStatement:
	{CreateTableStatement} 'create' 'table' name=ID '(' columnDefs+=ColumnDef (',' columnDefs+=ColumnDef)* (',' constraints+=TableConstraint)* ')'
	| {CreateViewStatement} 'create' 'view' name=ID 'as' selectStatement=SelectStatement
	| {CreateTriggerStatement} 'create' 'trigger' name=ID ('before'|'after'|'instead' 'of')?
	  ('delete'|'insert'|'update' ('of' updateColumnNames+=ID (',' updateColumnNames+=ID)*)?)
	  'on' tableName=ID ('for' 'each' 'row')? ('when' whenExpression=SqlExpression)?
	  'begin' (statements+=DMLStatement ';' (statements+=DMLStatement ';')*)? 'end'
	| {AlterTableStatement} 'alter' 'table' name=ID clause=AlterTableClause
	| {DropTableStatement} 'drop' 'table' ('if' 'exists')? name=ID
	| {DropTriggerStatement} 'drop' 'trigger' ('if' 'exists')? name=ID
	| {DropViewStatement} 'drop' 'view' ('if' 'exists')? name=ID
;

DMLStatement:
	SelectStatement | InsertStatement | UpdateStatement | DeleteStatement
;

DeleteStatement:
	'delete' 'from' tableName=ID ('where' expression=SqlExpression)?	
;

InsertStatement:
	('insert' ('or' (conflictResolution=ConflictResolution))?|'replace') 'into' tableName=ID
	('(' columnNames+=ID (',' columnNames+=ID)* ')')? 
	(('values' 
		'(' expressions+=SqlExpression (',' expressions+=SqlExpression)* ')'
		| selectStatement=SelectStatement
	)|'default' 'values')
;

UpdateStatement:
	'update' ('or' (conflictResolution=ConflictResolution))? tableName=ID
	'set' updateColumnExpressions+=UpdateColumnExpression (',' updateColumnExpressions+=UpdateColumnExpression)*
	('where' whereExpression=SqlExpression)?
;

UpdateColumnExpression:
	columnName=ID '=' expression=SqlExpression
;


SelectStatement:
	coreStatements+=SelectCore (CompoundOperator coreStatements+=SelectCore)*
	('order' 'by'  orderingTerms+=OrderingTerm (',' orderingTerms+=OrderingTerm)*)?
;

AlterTableClause:
	{AlterTableRenameClause} 'rename to' name=ID |
	{AlterTableAddColumnClause} 'add column' columnDef=ColumnDef;

ColumnDef:
	name=ID type=ColumnType constraints+=ColumnConstraint*;

ColumnConstraint:
	{PrimaryKeyColumnConstraint} 'primary' 'key' (asc?='asc'|desc?='desc')? autoincrement?='autoincrement'? |
	{NotNullConstraint} 'not null' conflictClause=ConflictClause? |
	{DefaultConstraint} 'default' defaultValue=DefaultValue
;

DefaultValue:
	{LiteralDefaultValue} literal=LiteralValue |
	{ExpressionDefaultValue} '(' expression=SqlExpression ')'
;
TableConstraint:
	{UniqueTableContraint} ('constraint' name=ID)? 'unique' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' conflictClause=ConflictClause |
	{PrimaryContraint} ('constraint' name=ID)? 'primary' 'key' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' conflictClause=ConflictClause |
	{CheckTableConstraint} ('constraint' name=ID)? 'check' '(' expression=SqlExpression ')'
;
IndexedColumn:
	name=[ColumnDef] (asc?='asc'|desc?='desc')?;

enum ColumnType:
	text | integer | real | blob | boolean;
	
enum SqliteDataType:
	text | integer | real | blob | none | numeric;

enum ConflictResolution:
	rollback | abort | fail | ignore | replace;


CompoundOperator:
	'union all' | 'union' | 'intersect' | 'except'
;

OrderingTerm:
	expression=SqlExpression (asc?='asc'|desc?='desc')?
;

SelectCore:
	'select' (distinct?='distinct'|all?='all')? resultColumns+=ResultColumn (',' resultColumns+=ResultColumn)*
	('from' source=JoinSource)?
	('where' whereExpression=SqlExpression)?
	('group' 'by'  groupByExpressions+=SqlExpression (',' groupByExpressions+=SqlExpression)*)?
	('having' havingExpression=SqlExpression)?
;

JoinSource:
	source=SingleSource joinStatements+=JoinStatement*
;

SingleSource:
	{SingleSourceTable} table=ID ('as' alias=ID)? |
	{SingleSourceSelectStatement} '(' selectStatement=SelectStatement ')' ('as' alias=ID)? |
	{SingleSourceJoin} '(' joinSource=JoinSource ')'
;

JoinStatement:
	{JoinStatement}
	natural?='natural'? ((left?='left' outer?='outer'?) | inner?='inner' | cross?='cross')? 'join' singleSource=SingleSource 'on' expression=SqlExpression;
	
ResultColumn:
	{ResultColumnAll} (table=ID)? '*' |
	{ResultColumnExpression} expression=SqlExpression ('as' alias=ID)?
;

ConflictClause:
	'on' 'conflict' resolution=ConflictResolution;


LiteralValue:
	{NumericLiteral} number=SignedNumber |
	{StringLiteral} literal=STRING |
	{NullLiteral} literal='null' |
	{CurrentTimeLiteral} literal='current_time' |
	{CurrentDateLiteral} literal='current_date' |
	{CurrentTimeStampLiteral} literal='current_time_stamp'
;

SignedNumber returns ecore::EBigDecimal:
	'-'?NUMBER
;	

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	
terminal INT returns ecore::EInt: 
	"$$$don't use this anymore$$$";
	
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

FQN:
	ID ("." ID)*;