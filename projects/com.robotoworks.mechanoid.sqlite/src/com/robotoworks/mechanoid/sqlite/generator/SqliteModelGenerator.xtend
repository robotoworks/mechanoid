/*
 * generated by Xtext
 */
package com.robotoworks.mechanoid.sqlite.generator

import com.google.inject.Inject
import com.robotoworks.mechanoid.sqlite.sqliteModel.MigrationBlock
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension com.robotoworks.mechanoid.sqlite.generator.Extensions.*
import com.robotoworks.mechanoid.sqlite.generator.SqliteMigrationGenerator

import static extension com.robotoworks.mechanoid.common.util.Strings.*
import com.robotoworks.mechanoid.common.xtext.generator.MechanoidOutputConfigurationProvider
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActionStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActiveRecordRegistrationStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.Statment
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement
import org.eclipse.xtext.generator.OutputConfiguration

class SqliteModelGenerator implements IGenerator {
	@Inject SqliteOpenHelperGenerator mOpenHelperGenerator
	@Inject ContentProviderContractGenerator mContentProviderContractGenerator
	@Inject SqliteDatabaseSnapshotBuilder mDbSnapshotBuilder
	@Inject ContentProviderGenerator mContentProviderGenerator
	@Inject SqliteMigrationGenerator mMigrationGenerator
	@Inject ContentProviderActionGenerator mActionGenerator
	@Inject ActiveRecordGenerator mActiveRecordGenerator
	@Inject MechanoidOutputConfigurationProvider configProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		val config = configProvider.outputConfigurations.head
		
		var model = resource.contents.head as Model;
		
		val snapshot = mDbSnapshotBuilder.build(model).database.migrations.get(0)
		
		fsa.generateFile(
			model.packageName.resolveFileName("Abstract".concat(model.database.name).concat("OpenHelper")), 
			mOpenHelperGenerator.generate(model, snapshot)
		);
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("OpenHelper")), 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mOpenHelperGenerator.generateStub(model, snapshot)
		);
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("Contract")), 
			mContentProviderContractGenerator.generate(model, snapshot)
		);
		
		fsa.generateFile(
			model.packageName.resolveFileName("Abstract".concat(model.database.name).concat("ContentProvider")), 
			mContentProviderGenerator.generate(model, snapshot)
		);
		
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("ContentProvider")), 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mContentProviderGenerator.generateStub(model, snapshot)
		);
		
		snapshot.statements.filter(typeof(CreateTableStatement)).forEach[
			item|
			generateAction(resource, fsa, item, false)
			if(item.hasAndroidPrimaryKey) {
				generateAction(resource, fsa, item, true)
			}
		];

		snapshot.statements.filter(typeof(CreateViewStatement)).forEach[
			item|
			generateAction(resource, fsa, item, false)
			if(item.hasAndroidPrimaryKey) {
				generateAction(resource, fsa, item, true)
			}
		];
		
		if(model.database.config != null) {
			model.database.config.statements.filter([it instanceof ActionStatement]).forEach[
				item|generateAction(resource, fsa, item as ActionStatement)
			];
			
			
			model.database.config.statements.filter([it instanceof ActiveRecordRegistrationStatement]).forEach[
				var statement = snapshot.statements.findFirst([stmt|stmt instanceof CreateTableStatement && stmt.name.equals(it.name)])
				
				if(statement != null) {
					generateActiveRecordEntity(resource, fsa, statement as CreateTableStatement)
				}
			];
		}
		
		model.database.migrations.forEach[
			item,index|
			if(index> 0) generateMigration(resource, fsa, item, index + 1)
		];		
	}
	
	def void generateActiveRecordEntity(Resource resource, IFileSystemAccess fsa, CreateTableStatement statement) {
		
		var model = resource.contents.head as Model;
		
		var genFileName = model.packageName.resolveFileName(statement.name.pascalize.concat("Record"))
			
		fsa.generateFile(genFileName, 
			mActiveRecordGenerator.generate(model, statement)
		)		
	}

	
	def void generateAction(Resource resource, IFileSystemAccess fsa, ActionStatement action) { 
		val model = resource.contents.head as Model
		var genFileName = model.packageName.concat(".actions").resolveFileName("Abstract".concat(action.name.pascalize).concat("Actions"))
		var genStubFileName = model.packageName.concat(".actions").resolveFileName(action.name.pascalize.concat("Actions"))			
	
		fsa.generateFile(genFileName, 
			mActionGenerator.generate(model, action)
		)
		
		fsa.generateFile(genStubFileName, 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mActionGenerator.generateStub(model, action)
		)	
	}

	
	def dispatch void generateAction(Resource resource, IFileSystemAccess fsa, CreateTableStatement stmt, boolean forId) { 
		val model = resource.contents.head as Model
		
		var genFileName = "";
		var genStubFileName = "";
		if(forId) {
			genFileName = model.packageName.concat(".actions").resolveFileName("Abstract".concat(stmt.name.pascalize).concat("ByIdActions"))
			genStubFileName = model.packageName.concat(".actions").resolveFileName(stmt.name.pascalize.concat("ByIdActions"))			
		} else {			
			genFileName = model.packageName.concat(".actions").resolveFileName("Abstract".concat(stmt.name.pascalize).concat("Actions"))
			genStubFileName = model.packageName.concat(".actions").resolveFileName(stmt.name.pascalize.concat("Actions"))
		}
		
		fsa.generateFile(genFileName, 
			mActionGenerator.generate(model, stmt, forId)
		)
		
		fsa.generateFile(genStubFileName, 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mActionGenerator.generateStub(model, stmt, forId)
		)
		
	}

	def dispatch void generateAction(Resource resource, IFileSystemAccess fsa, CreateViewStatement stmt, boolean forId) { 
		var model = resource.contents.head as Model
		
		var genFileName = "";
		var genStubFileName = "";
		if(forId) {
			genFileName = model.packageName.concat(".actions").resolveFileName("Abstract".concat(stmt.name.pascalize).concat("ByIdActions"))
			genStubFileName = model.packageName.concat(".actions").resolveFileName(stmt.name.pascalize.concat("ByIdActions"))			
		} else {			
			genFileName = model.packageName.concat(".actions").resolveFileName("Abstract".concat(stmt.name.pascalize).concat("Actions"))
			genStubFileName = model.packageName.concat(".actions").resolveFileName(stmt.name.pascalize.concat("Actions"))
		}
		
		fsa.generateFile(genFileName, 
			mActionGenerator.generate(model, stmt, forId)
		)
		
		fsa.generateFile(genStubFileName, 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mActionGenerator.generateStub(model, stmt, forId)
		)
	}

	
	def void generateMigration(Resource resource, IFileSystemAccess fsa, MigrationBlock migration, int version) { 
		
		var model = resource.contents.head as Model;
		
		var genFileName = model.packageName.concat(".migrations").resolveFileName("Abstract".concat(model.database.name).concat("MigrationV").concat(String::valueOf(version)))
		var genStubFileName = model.packageName.concat(".migrations").resolveFileName(model.database.name.concat("MigrationV").concat(String::valueOf(version)))
			
		fsa.generateFile(genFileName, 
			mMigrationGenerator.generate(model, migration, version)
		)
		
		fsa.generateFile(genStubFileName, 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mMigrationGenerator.generateStub(model, migration, version)
		)
	}

}
