/*
 * Generated by Robotoworks Mechanoid
 */
package com.mechanoid.db;

import android.content.ContentValues;
import android.net.Uri;
import android.provider.BaseColumns;
import android.content.ContentResolver;
import com.robotoworks.mechanoid.sqlite.SQuery;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.content.MechanoidContentProvider;

public class TestDBContract  {
    public static final String CONTENT_AUTHORITY = "com.mechanoid.db.testdb";

    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface TableAColumns {
	}
	

			
	/**
	 * <p>Column definitions and helper methods to work with the TableA table.</p>
	 */
	public static class TableA implements TableAColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("table_a").build();
	
		/**
		 * <p>The content type for a cursor that contains many TableA table rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.testdb.table_a";
		/**
		 * <p>The content type for a cursor that contains a single TableA table row.</p>
		 */
	    public static final String ITEM_CONTENT_TYPE =
	            "vnd.android.cursor.item/vnd.testdb.table_a";
	
		/**
		 * <p>Builds a Uri with appended id for a row in the TableA table, 
		 * eg:- content://com.mechanoid.db.testdb/table_a/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
	
		public static int delete() {
			return Mechanoid.getContentResolver().delete(CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for TableA</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for TableA.</p>
		 */
		public static class Builder {
			private ContentValues mValues = new ContentValues();
			
			
			/**
			 * <p>Insert into TableA with the values set on this builder.</p>
			 */								
			public Uri insert() {
				ContentResolver resolver = Mechanoid.getContentResolver();
				return resolver.insert(CONTENT_URI, mValues);
			}
			
			/**
			 * <p>Insert into TableA with the values set on this builder.</p>
			 */								
			public Uri insert(boolean notifyChange) {
				ContentResolver resolver = Mechanoid.getContentResolver();
				
				Uri uri = CONTENT_URI.buildUpon()
					.appendQueryParameter(
						MechanoidContentProvider.PARAM_NOTIFY, 
						String.valueOf(notifyChange)).build();
				
				return resolver.insert(uri, mValues);
			}
			
			/**
			 * <p>Update TableA with the given query</p>
			 */						
			public int update(SQuery query) {
				ContentResolver resolver = Mechanoid.getContentResolver();
				return resolver.update(CONTENT_URI, mValues, query.toString(), query.getArgsArray());
			}
			
			/**
			 * <p>Update TableA with the given query</p>
			 */						
			public int update(SQuery query, boolean notifyChange) {
				ContentResolver resolver = Mechanoid.getContentResolver();
				
				Uri uri = CONTENT_URI.buildUpon()
					.appendQueryParameter(
						MechanoidContentProvider.PARAM_NOTIFY, 
						String.valueOf(notifyChange)).build();

				return resolver.update(uri, mValues, query.toString(), query.getArgsArray());
			}
			
			/**
			 * <p>Update TableA with the given id</p>
			 */
			public int update(long id) {
				ContentResolver resolver = Mechanoid.getContentResolver();
				return resolver.update(CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build(), mValues, null, null);
			}
			
			/**
			 * <p>Update TableA with the given id</p>
			 */
			public int update(long id, boolean notifyChange) {
				ContentResolver resolver = Mechanoid.getContentResolver();
				
				Uri uri = CONTENT_URI.buildUpon()
					.appendPath(String.valueOf(id))
					.appendQueryParameter(
						MechanoidContentProvider.PARAM_NOTIFY, 
						String.valueOf(notifyChange)).build();
						
				return resolver.update(uri, mValues, null, null);
			}
			
			/**
			 * <p>Get ContentValues built so far by this builder for TableA.</p>
			 */						
			public ContentValues getValues() {
				return mValues;
			}
		}
	}
	

	

	private TestDBContract(){}
}
