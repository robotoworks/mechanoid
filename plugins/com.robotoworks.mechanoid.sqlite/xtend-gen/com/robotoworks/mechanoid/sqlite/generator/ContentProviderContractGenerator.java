package com.robotoworks.mechanoid.sqlite.generator;

import com.google.common.base.Objects;
import com.robotoworks.mechanoid.sqlite.generator.SqliteDatabaseSnapshot;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActionStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ColumnDef;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ColumnSource;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ColumnType;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ConfigBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ConfigurationStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.DDLStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.DatabaseBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ResultColumn;
import com.robotoworks.mechanoid.sqlite.util.ModelUtil;
import com.robotoworks.mechanoid.text.Strings;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class ContentProviderContractGenerator {
  public CharSequence generate(final Model model, final SqliteDatabaseSnapshot snapshot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Robotoworks Mechanoid");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import android.provider.BaseColumns;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.Mechanoid;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.content.AbstractValuesBuilder;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Field;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    DatabaseBlock _database = model.getDatabase();
    String _name = _database.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("Contract  {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public static final String CONTENT_AUTHORITY = initAuthority();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String initAuthority() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String authority = \"");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "		");
    _builder.append(".");
    DatabaseBlock _database_1 = model.getDatabase();
    String _name_1 = _database_1.getName();
    String _lowerCase = _name_1.toLowerCase();
    _builder.append(_lowerCase, "		");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ClassLoader loader = ");
    DatabaseBlock _database_2 = model.getDatabase();
    String _name_2 = _database_2.getName();
    String _pascalize_1 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_1, "    		");
    _builder.append("Contract.class.getClassLoader();");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<?> clz = loader.loadClass(\"com.justeat.app.data.");
    DatabaseBlock _database_3 = model.getDatabase();
    String _name_3 = _database_3.getName();
    String _pascalize_2 = Strings.pascalize(_name_3);
    _builder.append(_pascalize_2, "			");
    _builder.append("ContentProviderAuthority\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("Field declaredField = clz.getDeclaredField(\"CONTENT_AUTHORITY\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("authority = declaredField.get(null).toString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ClassNotFoundException e) {} ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("catch (NoSuchFieldException e) {} ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("catch (IllegalArgumentException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalAccessException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return authority;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final Uri BASE_CONTENT_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);");
    _builder.newLine();
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables = snapshot.getTables();
      for(final CreateTableStatement tbl : _tables) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name_4 = tbl.getName();
        String _pascalize_3 = Strings.pascalize(_name_4);
        _builder.append(_pascalize_3, "	");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          EList<ColumnSource> _columnDefs = tbl.getColumnDefs();
          final Function1<ColumnSource,Boolean> _function = new Function1<ColumnSource,Boolean>() {
              public Boolean apply(final ColumnSource it) {
                String _name = it.getName();
                boolean _equals = _name.equals("_id");
                boolean _not = (!_equals);
                return Boolean.valueOf(_not);
              }
            };
          Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
          for(final ColumnSource col : _filter) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("String ");
            String _name_5 = col.getName();
            String _underscore = Strings.underscore(_name_5);
            String _upperCase = _underscore.toUpperCase();
            _builder.append(_upperCase, "		");
            _builder.append(" = \"");
            String _name_6 = col.getName();
            _builder.append(_name_6, "		");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      Collection<CreateViewStatement> _views = snapshot.getViews();
      for(final CreateViewStatement vw : _views) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name_7 = vw.getName();
        String _pascalize_4 = Strings.pascalize(_name_7);
        _builder.append(_pascalize_4, "	");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          ArrayList<ColumnSource> _viewResultColumns = ModelUtil.getViewResultColumns(vw);
          final Function1<ColumnSource,Boolean> _function_1 = new Function1<ColumnSource,Boolean>() {
              public Boolean apply(final ColumnSource it) {
                String _name = it.getName();
                boolean _equals = _name.equals("_id");
                boolean _not = (!_equals);
                return Boolean.valueOf(_not);
              }
            };
          Iterable<ColumnSource> _filter_1 = IterableExtensions.<ColumnSource>filter(_viewResultColumns, _function_1);
          for(final ColumnSource col_1 : _filter_1) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _generateInterfaceMemberForResultColumn = this.generateInterfaceMemberForResultColumn(col_1);
            _builder.append(_generateInterfaceMemberForResultColumn, "		");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables_1 = snapshot.getTables();
      for(final CreateTableStatement tbl_1 : _tables_1) {
        _builder.append("\t");
        CharSequence _generateContractItem = this.generateContractItem(model, tbl_1);
        _builder.append(_generateContractItem, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Collection<CreateViewStatement> _views_1 = snapshot.getViews();
      for(final CreateViewStatement vw_1 : _views_1) {
        _builder.append("\t");
        CharSequence _generateContractItem_1 = this.generateContractItem(model, vw_1);
        _builder.append(_generateContractItem_1, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      DatabaseBlock _database_4 = model.getDatabase();
      ConfigBlock _config = _database_4.getConfig();
      boolean _notEquals = (!Objects.equal(_config, null));
      if (_notEquals) {
        {
          DatabaseBlock _database_5 = model.getDatabase();
          ConfigBlock _config_1 = _database_5.getConfig();
          EList<ConfigurationStatement> _statements = _config_1.getStatements();
          final Function1<ConfigurationStatement,Boolean> _function_2 = new Function1<ConfigurationStatement,Boolean>() {
              public Boolean apply(final ConfigurationStatement it) {
                return Boolean.valueOf((it instanceof ActionStatement));
              }
            };
          Iterable<ConfigurationStatement> _filter_2 = IterableExtensions.<ConfigurationStatement>filter(_statements, _function_2);
          for(final ConfigurationStatement action : _filter_2) {
            _builder.append("\t");
            ActionStatement stmt = ((ActionStatement) action);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public static class ");
            String _name_8 = stmt.getName();
            String _pascalize_5 = Strings.pascalize(_name_8);
            _builder.append(_pascalize_5, "	");
            _builder.append(" {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("public static final Uri CONTENT_URI = ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("BASE_CONTENT_URI.buildUpon().appendPath(\"");
            String _path = stmt.getPath();
            _builder.append(_path, "				");
            _builder.append("\").build();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("public static final String CONTENT_TYPE =");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("            ");
            _builder.append("\"vnd.android.cursor.dir/vnd.");
            DatabaseBlock _database_6 = model.getDatabase();
            String _name_9 = _database_6.getName();
            String _lowerCase_1 = _name_9.toLowerCase();
            _builder.append(_lowerCase_1, "	            ");
            _builder.append(".");
            String _name_10 = stmt.getName();
            _builder.append(_name_10, "	            ");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    DatabaseBlock _database_7 = model.getDatabase();
    String _name_11 = _database_7.getName();
    String _pascalize_6 = Strings.pascalize(_name_11);
    _builder.append(_pascalize_6, "	");
    _builder.append("Contract(){}");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateContractItem(final Model model, final DDLStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* <p>Column definitions and helper methods to work with the ");
    String _name = this.getName(stmt);
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, " ");
    _builder.append(".</p>");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static class ");
    String _name_1 = this.getName(stmt);
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append(" implements ");
    String _name_2 = this.getName(stmt);
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "");
    _builder.append("Columns");
    {
      boolean _hasAndroidPrimaryKey = this.hasAndroidPrimaryKey(stmt);
      if (_hasAndroidPrimaryKey) {
        _builder.append(", BaseColumns");
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public static final Uri CONTENT_URI = ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BASE_CONTENT_URI.buildUpon().appendPath(\"");
    String _name_3 = this.getName(stmt);
    String _lowerCase = _name_3.toLowerCase();
    _builder.append(_lowerCase, "			");
    _builder.append("\").build();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>The content type for a cursor that contains many ");
    String _name_4 = this.getName(stmt);
    String _pascalize_3 = Strings.pascalize(_name_4);
    _builder.append(_pascalize_3, "	 ");
    _builder.append(" rows.</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final String CONTENT_TYPE =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"vnd.android.cursor.dir/vnd.");
    DatabaseBlock _database = model.getDatabase();
    String _name_5 = _database.getName();
    String _lowerCase_1 = _name_5.toLowerCase();
    _builder.append(_lowerCase_1, "            ");
    _builder.append(".");
    String _name_6 = this.getName(stmt);
    _builder.append(_name_6, "            ");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _hasAndroidPrimaryKey_1 = this.hasAndroidPrimaryKey(stmt);
      if (_hasAndroidPrimaryKey_1) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("* <p>The content type for a cursor that contains a single ");
        String _name_7 = this.getName(stmt);
        String _pascalize_4 = Strings.pascalize(_name_7);
        _builder.append(_pascalize_4, "	 ");
        _builder.append(" row.</p>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public static final String ITEM_CONTENT_TYPE =");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"vnd.android.cursor.item/vnd.");
        DatabaseBlock _database_1 = model.getDatabase();
        String _name_8 = _database_1.getName();
        String _lowerCase_2 = _name_8.toLowerCase();
        _builder.append(_lowerCase_2, "		");
        _builder.append(".");
        String _name_9 = this.getName(stmt);
        _builder.append(_name_9, "		");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Builds a Uri with appended id for a row in ");
    String _name_10 = this.getName(stmt);
    String _pascalize_5 = Strings.pascalize(_name_10);
    _builder.append(_pascalize_5, "	 ");
    _builder.append(", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* eg:- content://");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "	 ");
    _builder.append(".");
    DatabaseBlock _database_2 = model.getDatabase();
    String _name_11 = _database_2.getName();
    String _lowerCase_3 = _name_11.toLowerCase();
    _builder.append(_lowerCase_3, "	 ");
    _builder.append("/");
    String _name_12 = this.getName(stmt);
    String _lowerCase_4 = _name_12.toLowerCase();
    _builder.append(_lowerCase_4, "	 ");
    _builder.append("/123.</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Uri buildUriWithId(long id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int delete() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Mechanoid.getContentResolver().delete(CONTENT_URI, null, null);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int delete(String where, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Mechanoid.getContentResolver().delete(CONTENT_URI, where, selectionArgs);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Create a new Builder for ");
    String _name_13 = this.getName(stmt);
    String _pascalize_6 = Strings.pascalize(_name_13);
    _builder.append(_pascalize_6, "	 ");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Builder newBuilder() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Builder();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Build and execute insert or update statements for ");
    String _name_14 = this.getName(stmt);
    String _pascalize_7 = Strings.pascalize(_name_14);
    _builder.append(_pascalize_7, "	 ");
    _builder.append(".</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Use {@link ");
    String _name_15 = this.getName(stmt);
    String _pascalize_8 = Strings.pascalize(_name_15);
    _builder.append(_pascalize_8, "	 ");
    _builder.append("#newBuilder()} to create new builder</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class Builder extends AbstractValuesBuilder {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Builder() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(Mechanoid.getApplicationContext(), CONTENT_URI);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateBuilderSetters = this.generateBuilderSetters(stmt);
    _builder.append(_generateBuilderSetters, "		");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateBuilderSetters(final CreateTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ColumnSource> _columnDefs = stmt.getColumnDefs();
      final Function1<ColumnSource,Boolean> _function = new Function1<ColumnSource,Boolean>() {
          public Boolean apply(final ColumnSource it) {
            String _name = it.getName();
            boolean _equals = _name.equals("_id");
            boolean _not = (!_equals);
            return Boolean.valueOf(_not);
          }
        };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
      for(final ColumnSource item : _filter) {
        ColumnDef col = ((ColumnDef) item);
        _builder.newLineIfNotEmpty();
        _builder.append("public Builder set");
        String _name = col.getName();
        String _pascalize = Strings.pascalize(_name);
        _builder.append(_pascalize, "");
        _builder.append("(");
        ColumnType _type = col.getType();
        String _javaTypeName = ModelUtil.toJavaTypeName(_type);
        _builder.append(_javaTypeName, "");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("mValues.put(");
        String _name_1 = col.getName();
        String _underscore = Strings.underscore(_name_1);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "	");
        _builder.append(", value);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return this;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _generateBuilderSetters(final CreateViewStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    ArrayList<ColumnSource> cols = ModelUtil.getViewResultColumns(stmt);
    _builder.newLineIfNotEmpty();
    {
      final Function1<ColumnSource,Boolean> _function = new Function1<ColumnSource,Boolean>() {
          public Boolean apply(final ColumnSource it) {
            String _name = it.getName();
            boolean _equals = _name.equals("_id");
            boolean _not = (!_equals);
            return Boolean.valueOf(_not);
          }
        };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(cols, _function);
      for(final ColumnSource item : _filter) {
        ResultColumn col = ((ResultColumn) item);
        _builder.newLineIfNotEmpty();
        ColumnType type = ModelUtil.getInferredColumnType(col);
        _builder.newLineIfNotEmpty();
        _builder.append("public Builder set");
        String _name = col.getName();
        String _pascalize = Strings.pascalize(_name);
        _builder.append(_pascalize, "");
        _builder.append("(");
        String _javaTypeName = ModelUtil.toJavaTypeName(type);
        _builder.append(_javaTypeName, "");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("mValues.put(");
        String _name_1 = stmt.getName();
        String _pascalize_1 = Strings.pascalize(_name_1);
        _builder.append(_pascalize_1, "	");
        _builder.append(".");
        String _name_2 = col.getName();
        String _underscore = Strings.underscore(_name_2);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "	");
        _builder.append(", value);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return this;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected String _getName(final CreateTableStatement stmt) {
    String _name = stmt.getName();
    return _name;
  }
  
  protected String _getName(final CreateViewStatement stmt) {
    String _name = stmt.getName();
    return _name;
  }
  
  protected boolean _hasAndroidPrimaryKey(final CreateTableStatement stmt) {
    boolean _hasAndroidPrimaryKey = ModelUtil.hasAndroidPrimaryKey(stmt);
    return _hasAndroidPrimaryKey;
  }
  
  protected boolean _hasAndroidPrimaryKey(final CreateViewStatement stmt) {
    boolean _hasAndroidPrimaryKey = ModelUtil.hasAndroidPrimaryKey(stmt);
    return _hasAndroidPrimaryKey;
  }
  
  public CharSequence createMethodArgsFromColumns(final CreateTableStatement tbl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ColumnSource> _columnDefs = tbl.getColumnDefs();
      final Function1<ColumnSource,Boolean> _function = new Function1<ColumnSource,Boolean>() {
          public Boolean apply(final ColumnSource it) {
            String _name = it.getName();
            boolean _equals = _name.equals("_id");
            boolean _not = (!_equals);
            return Boolean.valueOf(_not);
          }
        };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
      boolean _hasElements = false;
      for(final ColumnSource item : _filter) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        ColumnDef col = ((ColumnDef) item);
        ColumnType _type = col.getType();
        String _javaTypeName = ModelUtil.toJavaTypeName(_type);
        _builder.append(_javaTypeName, "");
        _builder.append(" ");
        String _name = col.getName();
        String _camelize = Strings.camelize(_name);
        _builder.append(_camelize, "");
      }
    }
    return _builder;
  }
  
  public CharSequence generateInterfaceMemberForResultColumn(final ColumnSource expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      boolean _and_1 = false;
      String _name = expr.getName();
      boolean _notEquals = (!Objects.equal(_name, null));
      if (!_notEquals) {
        _and_1 = false;
      } else {
        String _name_1 = expr.getName();
        boolean _equals = _name_1.equals("");
        boolean _not = (!_equals);
        _and_1 = (_notEquals && _not);
      }
      if (!_and_1) {
        _and = false;
      } else {
        String _name_2 = expr.getName();
        boolean _equals_1 = _name_2.equals("_id");
        boolean _not_1 = (!_equals_1);
        _and = (_and_1 && _not_1);
      }
      if (_and) {
        _builder.append("String ");
        String _name_3 = expr.getName();
        String _underscore = Strings.underscore(_name_3);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "");
        _builder.append(" = \"");
        String _name_4 = expr.getName();
        _builder.append(_name_4, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateBuilderSetters(final DDLStatement stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _generateBuilderSetters((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _generateBuilderSetters((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
  
  public String getName(final DDLStatement stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _getName((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _getName((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
  
  public boolean hasAndroidPrimaryKey(final DDLStatement stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _hasAndroidPrimaryKey((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _hasAndroidPrimaryKey((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
