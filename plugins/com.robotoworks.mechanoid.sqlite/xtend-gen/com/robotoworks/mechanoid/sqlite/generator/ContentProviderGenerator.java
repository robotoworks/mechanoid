package com.robotoworks.mechanoid.sqlite.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.robotoworks.mechanoid.common.util.Strings;
import com.robotoworks.mechanoid.sqlite.generator.Extensions;
import com.robotoworks.mechanoid.sqlite.generator.SqliteDatabaseSnapshot;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ActionStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ConfigBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.ConfigurationStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement;
import com.robotoworks.mechanoid.sqlite.sqliteModel.DatabaseBlock;
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model;
import java.util.Collection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class ContentProviderGenerator {
  public CharSequence generate(final Model model, final SqliteDatabaseSnapshot snapshot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Robotoworks Mechanoid");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import android.content.ContentProviderOperation;");
    _builder.newLine();
    _builder.append("import android.content.ContentProviderResult;");
    _builder.newLine();
    _builder.append("import android.content.ContentValues;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.OperationApplicationException;");
    _builder.newLine();
    _builder.append("import android.content.UriMatcher;");
    _builder.newLine();
    _builder.append("import android.database.Cursor;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteDatabase;");
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.content.MechanoidContentProvider;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.sqlite.MechanoidSQLiteOpenHelper;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.sqlite.ActiveRecord;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.sqlite.SQuery;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.content.DefaultContentProviderActions;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.content.ContentProviderActions;");
    _builder.newLine();
    _builder.append("import ");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "");
    _builder.append(".Abstract");
    DatabaseBlock _database = model.getDatabase();
    String _name = _database.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("OpenHelper.Tables;");
    _builder.newLineIfNotEmpty();
    {
      Collection<CreateTableStatement> _tables = snapshot.getTables();
      for(final CreateTableStatement tbl : _tables) {
        _builder.append("import ");
        String _packageName_2 = model.getPackageName();
        _builder.append(_packageName_2, "");
        _builder.append(".");
        DatabaseBlock _database_1 = model.getDatabase();
        String _name_1 = _database_1.getName();
        String _pascalize_1 = Strings.pascalize(_name_1);
        _builder.append(_pascalize_1, "");
        _builder.append("Contract.");
        String _name_2 = tbl.getName();
        String _pascalize_2 = Strings.pascalize(_name_2);
        _builder.append(_pascalize_2, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Collection<CreateViewStatement> _views = snapshot.getViews();
      for(final CreateViewStatement vw : _views) {
        _builder.append("import ");
        String _packageName_3 = model.getPackageName();
        _builder.append(_packageName_3, "");
        _builder.append(".");
        DatabaseBlock _database_2 = model.getDatabase();
        String _name_3 = _database_2.getName();
        String _pascalize_3 = Strings.pascalize(_name_3);
        _builder.append(_pascalize_3, "");
        _builder.append("Contract.");
        String _name_4 = vw.getName();
        String _pascalize_4 = Strings.pascalize(_name_4);
        _builder.append(_pascalize_4, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Collection<CreateTableStatement> _tables_1 = snapshot.getTables();
      final Function1<CreateTableStatement,Boolean> _function = new Function1<CreateTableStatement,Boolean>() {
          public Boolean apply(final CreateTableStatement it) {
            boolean _hasAndroidPrimaryKey = Extensions.hasAndroidPrimaryKey(it);
            return Boolean.valueOf(_hasAndroidPrimaryKey);
          }
        };
      Iterable<CreateTableStatement> _filter = IterableExtensions.<CreateTableStatement>filter(_tables_1, _function);
      for(final CreateTableStatement tbl_1 : _filter) {
        _builder.append("import ");
        String _packageName_4 = model.getPackageName();
        _builder.append(_packageName_4, "");
        _builder.append(".");
        String _name_5 = tbl_1.getName();
        String _pascalize_5 = Strings.pascalize(_name_5);
        _builder.append(_pascalize_5, "");
        _builder.append("Record;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public abstract class Abstract");
    DatabaseBlock _database_3 = model.getDatabase();
    String _name_6 = _database_3.getName();
    String _pascalize_6 = Strings.pascalize(_name_6);
    _builder.append(_pascalize_6, "");
    _builder.append("ContentProvider extends MechanoidContentProvider {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final UriMatcher sUriMatcher;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String[] sContentTypes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    int counter = (-1);
    _builder.newLineIfNotEmpty();
    {
      Collection<CreateTableStatement> _tables_2 = snapshot.getTables();
      for(final CreateTableStatement tbl_2 : _tables_2) {
        _builder.append("\t");
        _builder.append("private static final int ");
        String _name_7 = tbl_2.getName();
        String _underscore = Strings.underscore(_name_7);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "	");
        _builder.append(" = ");
        int _plus = (counter + 1);
        int _counter = counter = _plus;
        _builder.append(_counter, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey = Extensions.hasAndroidPrimaryKey(tbl_2);
          if (_hasAndroidPrimaryKey) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_8 = tbl_2.getName();
            String _underscore_1 = Strings.underscore(_name_8);
            String _upperCase_1 = _underscore_1.toUpperCase();
            _builder.append(_upperCase_1, "	");
            _builder.append("_ID = ");
            int _plus_1 = (counter + 1);
            int _counter_1 = counter = _plus_1;
            _builder.append(_counter_1, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      Collection<CreateViewStatement> _views_1 = snapshot.getViews();
      for(final CreateViewStatement vw_1 : _views_1) {
        _builder.append("\t");
        _builder.append("private static final int ");
        String _name_9 = vw_1.getName();
        String _underscore_2 = Strings.underscore(_name_9);
        String _upperCase_2 = _underscore_2.toUpperCase();
        _builder.append(_upperCase_2, "	");
        _builder.append(" = ");
        int _plus_2 = (counter + 1);
        int _counter_2 = counter = _plus_2;
        _builder.append(_counter_2, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_1 = Extensions.hasAndroidPrimaryKey(vw_1);
          if (_hasAndroidPrimaryKey_1) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_10 = vw_1.getName();
            String _underscore_3 = Strings.underscore(_name_10);
            String _upperCase_3 = _underscore_3.toUpperCase();
            _builder.append(_upperCase_3, "	");
            _builder.append("_ID = ");
            int _plus_3 = (counter + 1);
            int _counter_3 = counter = _plus_3;
            _builder.append(_counter_3, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      DatabaseBlock _database_4 = model.getDatabase();
      ConfigBlock _config = _database_4.getConfig();
      boolean _notEquals = (!Objects.equal(_config, null));
      if (_notEquals) {
        {
          DatabaseBlock _database_5 = model.getDatabase();
          ConfigBlock _config_1 = _database_5.getConfig();
          EList<ConfigurationStatement> _statements = _config_1.getStatements();
          final Function1<ConfigurationStatement,Boolean> _function_1 = new Function1<ConfigurationStatement,Boolean>() {
              public Boolean apply(final ConfigurationStatement it) {
                return Boolean.valueOf((it instanceof ActionStatement));
              }
            };
          Iterable<ConfigurationStatement> _filter_1 = IterableExtensions.<ConfigurationStatement>filter(_statements, _function_1);
          for(final ConfigurationStatement a : _filter_1) {
            _builder.append("\t");
            _builder.append("private static final int ");
            String _name_11 = ((ActionStatement) a).getName();
            String _underscore_4 = Strings.underscore(_name_11);
            String _upperCase_4 = _underscore_4.toUpperCase();
            _builder.append(_upperCase_4, "	");
            _builder.append(" = ");
            int _plus_4 = (counter + 1);
            int _counter_4 = counter = _plus_4;
            _builder.append(_counter_4, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("public static final int NUM_URI_MATCHERS = ");
    int _plus_5 = (counter + 1);
    _builder.append(_plus_5, "	");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sUriMatcher = buildUriMatcher();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sContentTypes = new String[NUM_URI_MATCHERS];");
    _builder.newLine();
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables_3 = snapshot.getTables();
      for(final CreateTableStatement tbl_3 : _tables_3) {
        _builder.append("\t\t");
        _builder.append("sContentTypes[");
        String _name_12 = tbl_3.getName();
        String _underscore_5 = Strings.underscore(_name_12);
        String _upperCase_5 = _underscore_5.toUpperCase();
        _builder.append(_upperCase_5, "		");
        _builder.append("] = ");
        String _name_13 = tbl_3.getName();
        String _pascalize_7 = Strings.pascalize(_name_13);
        _builder.append(_pascalize_7, "		");
        _builder.append(".CONTENT_TYPE;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_2 = Extensions.hasAndroidPrimaryKey(tbl_3);
          if (_hasAndroidPrimaryKey_2) {
            _builder.append("\t\t");
            _builder.append("sContentTypes[");
            String _name_14 = tbl_3.getName();
            String _underscore_6 = Strings.underscore(_name_14);
            String _upperCase_6 = _underscore_6.toUpperCase();
            _builder.append(_upperCase_6, "		");
            _builder.append("_ID] = ");
            String _name_15 = tbl_3.getName();
            String _pascalize_8 = Strings.pascalize(_name_15);
            _builder.append(_pascalize_8, "		");
            _builder.append(".ITEM_CONTENT_TYPE;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      Collection<CreateViewStatement> _views_2 = snapshot.getViews();
      for(final CreateViewStatement vw_2 : _views_2) {
        _builder.append("\t\t");
        _builder.append("sContentTypes[");
        String _name_16 = vw_2.getName();
        String _underscore_7 = Strings.underscore(_name_16);
        String _upperCase_7 = _underscore_7.toUpperCase();
        _builder.append(_upperCase_7, "		");
        _builder.append("] = ");
        String _name_17 = vw_2.getName();
        String _pascalize_9 = Strings.pascalize(_name_17);
        _builder.append(_pascalize_9, "		");
        _builder.append(".CONTENT_TYPE;");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_3 = Extensions.hasAndroidPrimaryKey(vw_2);
          if (_hasAndroidPrimaryKey_3) {
            _builder.append("\t\t");
            _builder.append("sContentTypes[");
            String _name_18 = vw_2.getName();
            String _underscore_8 = Strings.underscore(_name_18);
            String _upperCase_8 = _underscore_8.toUpperCase();
            _builder.append(_upperCase_8, "		");
            _builder.append("_ID] = ");
            String _name_19 = vw_2.getName();
            String _pascalize_10 = Strings.pascalize(_name_19);
            _builder.append(_pascalize_10, "		");
            _builder.append(".ITEM_CONTENT_TYPE;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static UriMatcher buildUriMatcher() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String authority = ");
    DatabaseBlock _database_6 = model.getDatabase();
    String _name_20 = _database_6.getName();
    String _pascalize_11 = Strings.pascalize(_name_20);
    _builder.append(_pascalize_11, "        ");
    _builder.append("Contract.CONTENT_AUTHORITY;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Tables");
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables_4 = snapshot.getTables();
      for(final CreateTableStatement tbl_4 : _tables_4) {
        _builder.append("\t\t");
        _builder.append("matcher.addURI(authority, \"");
        String _name_21 = tbl_4.getName();
        _builder.append(_name_21, "		");
        _builder.append("\", ");
        String _name_22 = tbl_4.getName();
        String _underscore_9 = Strings.underscore(_name_22);
        String _upperCase_9 = _underscore_9.toUpperCase();
        _builder.append(_upperCase_9, "		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_4 = Extensions.hasAndroidPrimaryKey(tbl_4);
          if (_hasAndroidPrimaryKey_4) {
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _name_23 = tbl_4.getName();
            _builder.append(_name_23, "		");
            _builder.append("/#\", ");
            String _name_24 = tbl_4.getName();
            String _underscore_10 = Strings.underscore(_name_24);
            String _upperCase_10 = _underscore_10.toUpperCase();
            _builder.append(_upperCase_10, "		");
            _builder.append("_ID);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Views");
    _builder.newLine();
    {
      Collection<CreateViewStatement> _views_3 = snapshot.getViews();
      for(final CreateViewStatement vw_3 : _views_3) {
        _builder.append("\t\t");
        _builder.append("matcher.addURI(authority, \"");
        String _name_25 = vw_3.getName();
        _builder.append(_name_25, "		");
        _builder.append("\", ");
        String _name_26 = vw_3.getName();
        String _underscore_11 = Strings.underscore(_name_26);
        String _upperCase_11 = _underscore_11.toUpperCase();
        _builder.append(_upperCase_11, "		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_5 = Extensions.hasAndroidPrimaryKey(vw_3);
          if (_hasAndroidPrimaryKey_5) {
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _name_27 = vw_3.getName();
            _builder.append(_name_27, "		");
            _builder.append("/#\", ");
            String _name_28 = vw_3.getName();
            String _underscore_12 = Strings.underscore(_name_28);
            String _upperCase_12 = _underscore_12.toUpperCase();
            _builder.append(_upperCase_12, "		");
            _builder.append("_ID);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// User Actions");
    _builder.newLine();
    {
      DatabaseBlock _database_7 = model.getDatabase();
      ConfigBlock _config_2 = _database_7.getConfig();
      boolean _notEquals_1 = (!Objects.equal(_config_2, null));
      if (_notEquals_1) {
        {
          DatabaseBlock _database_8 = model.getDatabase();
          ConfigBlock _config_3 = _database_8.getConfig();
          EList<ConfigurationStatement> _statements_1 = _config_3.getStatements();
          final Function1<ConfigurationStatement,Boolean> _function_2 = new Function1<ConfigurationStatement,Boolean>() {
              public Boolean apply(final ConfigurationStatement it) {
                return Boolean.valueOf((it instanceof ActionStatement));
              }
            };
          Iterable<ConfigurationStatement> _filter_2 = IterableExtensions.<ConfigurationStatement>filter(_statements_1, _function_2);
          for(final ConfigurationStatement a_1 : _filter_2) {
            _builder.append("\t\t");
            ActionStatement stmt = ((ActionStatement) a_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("matcher.addURI(authority, \"");
            String _path = stmt.getPath();
            _builder.append(_path, "		");
            _builder.append("\", ");
            String _name_29 = ((ActionStatement) a_1).getName();
            String _underscore_13 = Strings.underscore(_name_29);
            String _upperCase_13 = _underscore_13.toUpperCase();
            _builder.append(_upperCase_13, "		");
            _builder.append("); ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("return matcher;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getType(Uri uri) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sContentTypes[match];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int delete(Uri uri, String selection, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int affected = createActions(match).delete(this, uri, selection, selectionArgs);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(affected > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tryNotifyChange(uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return affected;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Uri insert(Uri uri, ContentValues values) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Uri newUri = createActions(match).insert(this, uri, values);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(newUri != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tryNotifyChange(uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return newUri;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int bulkInsert(Uri uri, ContentValues[] values) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int affected = createActions(match).bulkInsert(this, uri, values);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(affected > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tryNotifyChange(uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return affected;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    DatabaseBlock _database_9 = model.getDatabase();
    String _name_30 = _database_9.getName();
    String _pascalize_12 = Strings.pascalize(_name_30);
    _builder.append(_pascalize_12, "        ");
    _builder.append("OpenHelper(context);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Cursor cursor = createActions(match).query(this, uri, projection, selection, selectionArgs, sortOrder);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("trySetNotificationUri(cursor, uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return cursor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int affected = createActions(match).update(this, uri, values, selection, selectionArgs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(affected > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tryNotifyChange(uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return affected;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public <T extends ActiveRecord> List<T> selectRecords(Uri uri, SQuery sQuery, String sortOrder) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(match == UriMatcher.NO_MATCH) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"Unknown uri: \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return createActions(match).selectRecords(this, uri, sQuery, sortOrder);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throws OperationApplicationException {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final SQLiteDatabase db = getOpenHelper().getWritableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("db.beginTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final int numOperations = operations.size();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final ContentProviderResult[] results = new ContentProviderResult[numOperations];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int i = 0; i < numOperations; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("results[i] = operations.get(i).apply(this, results, i);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("db.setTransactionSuccessful();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return results;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("db.endTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected ContentProviderActions createActions(int id) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("switch(id) {");
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables_5 = snapshot.getTables();
      for(final CreateTableStatement tbl_5 : _tables_5) {
        _builder.append("\t\t\t");
        _builder.append("case ");
        String _name_31 = tbl_5.getName();
        String _underscore_14 = Strings.underscore(_name_31);
        String _upperCase_14 = _underscore_14.toUpperCase();
        _builder.append(_upperCase_14, "			");
        _builder.append(": ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("return create");
        String _name_32 = tbl_5.getName();
        String _pascalize_13 = Strings.pascalize(_name_32);
        _builder.append(_pascalize_13, "				");
        _builder.append("Actions();");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_6 = Extensions.hasAndroidPrimaryKey(tbl_5);
          if (_hasAndroidPrimaryKey_6) {
            _builder.append("\t\t\t");
            _builder.append("case ");
            String _name_33 = tbl_5.getName();
            String _underscore_15 = Strings.underscore(_name_33);
            String _upperCase_15 = _underscore_15.toUpperCase();
            _builder.append(_upperCase_15, "			");
            _builder.append("_ID:");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("return create");
            String _name_34 = tbl_5.getName();
            String _pascalize_14 = Strings.pascalize(_name_34);
            _builder.append(_pascalize_14, "				");
            _builder.append("ByIdActions();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      Collection<CreateViewStatement> _views_4 = snapshot.getViews();
      for(final CreateViewStatement vw_4 : _views_4) {
        _builder.append("\t\t\t");
        _builder.append("case ");
        String _name_35 = vw_4.getName();
        String _underscore_16 = Strings.underscore(_name_35);
        String _upperCase_16 = _underscore_16.toUpperCase();
        _builder.append(_upperCase_16, "			");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("return create");
        String _name_36 = vw_4.getName();
        String _pascalize_15 = Strings.pascalize(_name_36);
        _builder.append(_pascalize_15, "				");
        _builder.append("Actions();");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasAndroidPrimaryKey_7 = Extensions.hasAndroidPrimaryKey(vw_4);
          if (_hasAndroidPrimaryKey_7) {
            _builder.append("\t\t\t");
            _builder.append("case ");
            String _name_37 = vw_4.getName();
            String _underscore_17 = Strings.underscore(_name_37);
            String _upperCase_17 = _underscore_17.toUpperCase();
            _builder.append(_upperCase_17, "			");
            _builder.append("_ID: ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("return create");
            String _name_38 = vw_4.getName();
            String _pascalize_16 = Strings.pascalize(_name_38);
            _builder.append(_pascalize_16, "				");
            _builder.append("ByIdActions();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      DatabaseBlock _database_10 = model.getDatabase();
      ConfigBlock _config_4 = _database_10.getConfig();
      boolean _notEquals_2 = (!Objects.equal(_config_4, null));
      if (_notEquals_2) {
        {
          DatabaseBlock _database_11 = model.getDatabase();
          ConfigBlock _config_5 = _database_11.getConfig();
          EList<ConfigurationStatement> _statements_2 = _config_5.getStatements();
          final Function1<ConfigurationStatement,Boolean> _function_3 = new Function1<ConfigurationStatement,Boolean>() {
              public Boolean apply(final ConfigurationStatement it) {
                return Boolean.valueOf((it instanceof ActionStatement));
              }
            };
          Iterable<ConfigurationStatement> _filter_3 = IterableExtensions.<ConfigurationStatement>filter(_statements_2, _function_3);
          for(final ConfigurationStatement a_2 : _filter_3) {
            _builder.append("\t\t\t");
            _builder.append("case ");
            String _name_39 = ((ActionStatement) a_2).getName();
            String _underscore_18 = Strings.underscore(_name_39);
            String _upperCase_18 = _underscore_18.toUpperCase();
            _builder.append(_upperCase_18, "			");
            _builder.append(":");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("return create");
            String _name_40 = ((ActionStatement) a_2).getName();
            String _pascalize_17 = Strings.pascalize(_name_40);
            _builder.append(_pascalize_17, "				");
            _builder.append("Actions();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new UnsupportedOperationException(\"Unknown id: \" + id);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    {
      Collection<CreateTableStatement> _tables_6 = snapshot.getTables();
      for(final CreateTableStatement tbl_6 : _tables_6) {
        {
          boolean _hasAndroidPrimaryKey_8 = Extensions.hasAndroidPrimaryKey(tbl_6);
          if (_hasAndroidPrimaryKey_8) {
            _builder.append("    ");
            _builder.append("protected ContentProviderActions create");
            String _name_41 = tbl_6.getName();
            String _pascalize_18 = Strings.pascalize(_name_41);
            _builder.append(_pascalize_18, "    ");
            _builder.append("ByIdActions() {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("\t");
            _builder.append("return new DefaultContentProviderActions(Tables.");
            String _name_42 = tbl_6.getName();
            String _underscore_19 = Strings.underscore(_name_42);
            String _upperCase_19 = _underscore_19.toUpperCase();
            _builder.append(_upperCase_19, "    	");
            _builder.append(", true, ");
            {
              boolean _hasAndroidPrimaryKey_9 = Extensions.hasAndroidPrimaryKey(tbl_6);
              if (_hasAndroidPrimaryKey_9) {
                String _name_43 = tbl_6.getName();
                String _pascalize_19 = Strings.pascalize(_name_43);
                _builder.append(_pascalize_19, "    	");
                _builder.append("Record.getFactory()");
              } else {
                _builder.append("null");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    ");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("protected ContentProviderActions create");
        String _name_44 = tbl_6.getName();
        String _pascalize_20 = Strings.pascalize(_name_44);
        _builder.append(_pascalize_20, "    ");
        _builder.append("Actions() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("\t");
        _builder.append("return new DefaultContentProviderActions(Tables.");
        String _name_45 = tbl_6.getName();
        String _underscore_20 = Strings.underscore(_name_45);
        String _upperCase_20 = _underscore_20.toUpperCase();
        _builder.append(_upperCase_20, "    	");
        _builder.append(", false, ");
        {
          boolean _hasAndroidPrimaryKey_10 = Extensions.hasAndroidPrimaryKey(tbl_6);
          if (_hasAndroidPrimaryKey_10) {
            String _name_46 = tbl_6.getName();
            String _pascalize_21 = Strings.pascalize(_name_46);
            _builder.append(_pascalize_21, "    	");
            _builder.append("Record.getFactory()");
          } else {
            _builder.append("null");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
      }
    }
    {
      Collection<CreateViewStatement> _views_5 = snapshot.getViews();
      for(final CreateViewStatement view : _views_5) {
        {
          boolean _hasAndroidPrimaryKey_11 = Extensions.hasAndroidPrimaryKey(view);
          if (_hasAndroidPrimaryKey_11) {
            _builder.append("    ");
            _builder.append("protected ContentProviderActions create");
            String _name_47 = view.getName();
            String _pascalize_22 = Strings.pascalize(_name_47);
            _builder.append(_pascalize_22, "    ");
            _builder.append("ByIdActions() {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("\t");
            _builder.append("return new DefaultContentProviderActions(Tables.");
            String _name_48 = view.getName();
            String _underscore_21 = Strings.underscore(_name_48);
            String _upperCase_21 = _underscore_21.toUpperCase();
            _builder.append(_upperCase_21, "    	");
            _builder.append(", true);");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    ");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("protected ContentProviderActions create");
        String _name_49 = view.getName();
        String _pascalize_23 = Strings.pascalize(_name_49);
        _builder.append(_pascalize_23, "    ");
        _builder.append("Actions() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("\t");
        _builder.append("return new DefaultContentProviderActions(Tables.");
        String _name_50 = view.getName();
        String _underscore_22 = Strings.underscore(_name_50);
        String _upperCase_22 = _underscore_22.toUpperCase();
        _builder.append(_upperCase_22, "    	");
        _builder.append(", false);");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
      }
    }
    {
      DatabaseBlock _database_12 = model.getDatabase();
      ConfigBlock _config_6 = _database_12.getConfig();
      boolean _notEquals_3 = (!Objects.equal(_config_6, null));
      if (_notEquals_3) {
        {
          DatabaseBlock _database_13 = model.getDatabase();
          ConfigBlock _config_7 = _database_13.getConfig();
          EList<ConfigurationStatement> _statements_3 = _config_7.getStatements();
          Iterable<ActionStatement> _filter_4 = Iterables.<ActionStatement>filter(_statements_3, ActionStatement.class);
          for(final ActionStatement a_3 : _filter_4) {
            _builder.append("\t");
            _builder.append("protected ContentProviderActions create");
            String _name_51 = a_3.getName();
            String _pascalize_24 = Strings.pascalize(_name_51);
            _builder.append(_pascalize_24, "	");
            _builder.append("Actions() {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return new ContentProviderActions();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStub(final Model model, final SqliteDatabaseSnapshot snapshot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*******************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2012, Robotoworks Limited");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved. This program and the accompanying materials");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* which accompanies this distribution, and is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*******************************************************************************/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "");
    _builder.append(".Abstract");
    DatabaseBlock _database = model.getDatabase();
    String _name = _database.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("ContentProvider;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    DatabaseBlock _database_1 = model.getDatabase();
    String _name_1 = _database_1.getName();
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append("ContentProvider extends Abstract");
    DatabaseBlock _database_2 = model.getDatabase();
    String _name_2 = _database_2.getName();
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "");
    _builder.append("ContentProvider {}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
