package com.robotoworks.mechanoid.sqlite.generator

import com.google.inject.Inject
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.MigrationBlock
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model
import org.eclipse.xtext.serializer.ISerializer

import static extension com.robotoworks.mechanoid.sqlite.generator.Extensions.*
import static extension com.robotoworks.mechanoid.common.util.Strings.*
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTriggerStatement

class SqliteOpenHelperGenerator {
		@Inject extension ISerializer
		
		def CharSequence generate(Model model, MigrationBlock snapshot) '''
				/*
				 * Generated by Robotoworks Mechanoid
				 */
				package «model.packageName»;
				
				import android.content.Context;
				import android.database.sqlite.SQLiteDatabase;
				import com.robotoworks.mechanoid.sqlite.MechanoidSQLiteOpenHelper;
				import com.robotoworks.mechanoid.sqlite.SQLiteMigration;
				
				«IF model.database.migrations.size > 1»
				«var version = 1»
				«FOR migration : model.database.migrations.drop(1)»
				import «model.packageName».migrations.«model.database.name.pascalize»MigrationV«version=version+1»;
				«ENDFOR»
				«ENDIF»
				
				public abstract class Abstract«model.database.name.pascalize()»OpenHelper extends MechanoidSQLiteOpenHelper {
					public static final String DATABASE_NAME = "«model.database.name».db";
				
					public static final int VERSION = «model.database.migrations.size»;
				
					public interface Tables {
						«FOR table : snapshot.statements.filter(typeof(CreateTableStatement))»
						String «table.name.underscore.toUpperCase» = "«table.name»";
						«ENDFOR»
						«FOR view : snapshot.statements.filter(typeof(CreateViewStatement))»
						String «view.name.underscore.toUpperCase» = "«view.name»";
						«ENDFOR»
					}
				
					public Abstract«model.database.name.pascalize()»OpenHelper(Context context) {
						super(context, DATABASE_NAME, null, VERSION);
					}
				
					@Override
					public void onCreate(SQLiteDatabase db) {
						«FOR table : snapshot.statements.filter(typeof(CreateTableStatement))»
						db.execSQL(
							«FOR line : table.serialize.trim.split("\\r?\\n") SEPARATOR " +"»
							"«line.trim.replaceAll('\\\"', '\\\\\"')» "
							«ENDFOR»
						);
						«ENDFOR»
						«FOR view : snapshot.statements.filter(typeof(CreateViewStatement))»
						db.execSQL(
							«FOR line : view.serialize.trim.split("\\r?\\n") SEPARATOR " +"»
							"«line.trim.replaceAll('\\\"', '\\\\\"')» "
							«ENDFOR»
						);
						
						«ENDFOR»
						«FOR trigger : snapshot.statements.filter(typeof(CreateTriggerStatement))»
						db.execSQL(
							«FOR line : trigger.serialize.trim.split("\\r?\\n") SEPARATOR " +"»
							"«line.trim.replaceAll('\\\"', '\\\\\"')» "
							«ENDFOR»
						);
						
						«ENDFOR»
					}
				
					@Override
					protected SQLiteMigration createMigration(int version) {
						«IF model.database.migrations.size > 1»
						«var version = 1»
						switch(version) {
							«FOR migration : model.database.migrations.drop(1)»
							case «version=version+1»:
								return new «model.database.name.pascalize»MigrationV«version»();
							«ENDFOR»
							default:
								throw new IllegalStateException("No migration for version " + version);
						}
						«ELSE»
						throw new IllegalStateException("No migrations for any version");
						«ENDIF»
					}
				}
		'''
			
		def CharSequence generateStub(Model model, MigrationBlock snapshot) '''
				/*
				 * Generated by Robotoworks Mechanoid
				 */
				package «model.packageName»;
				
				import android.content.Context;
				import «model.packageName».Abstract«model.database.name.pascalize()»OpenHelper;

				
				public class «model.database.name.pascalize()»OpenHelper extends Abstract«model.database.name.pascalize()»OpenHelper {
					public «model.database.name.pascalize()»OpenHelper(Context context) {
						super(context);
					}
				}
		'''
}