/*
* generated by Xtext
*/

package com.robotoworks.mechanoid.net.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NetModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//Model:
		//	"package" packageName=QualifiedName declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClientParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	UserTypeDeclaration | Client;
		public ParserRule getRule() { return rule; }

		//UserTypeDeclaration | Client
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserTypeDeclaration
		public RuleCall getUserTypeDeclarationParserRuleCall_0() { return cUserTypeDeclarationParserRuleCall_0; }

		//Client
		public RuleCall getClientParserRuleCall_1() { return cClientParserRuleCall_1; }
	}

	public class ClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Client");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBaseUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cBaseUrlAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksClientBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Client:
		//	"client" name=ID baseUrl=STRING? "{" blocks+=ClientBlock* "}";
		public ParserRule getRule() { return rule; }

		//"client" name=ID baseUrl=STRING? "{" blocks+=ClientBlock* "}"
		public Group getGroup() { return cGroup; }

		//"client"
		public Keyword getClientKeyword_0() { return cClientKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//baseUrl=STRING?
		public Assignment getBaseUrlAssignment_2() { return cBaseUrlAssignment_2; }

		//STRING
		public RuleCall getBaseUrlSTRINGTerminalRuleCall_2_0() { return cBaseUrlSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//blocks+=ClientBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//ClientBlock
		public RuleCall getBlocksClientBlockParserRuleCall_4_0() { return cBlocksClientBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ClientBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClientBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamsBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHttpMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClientBlock:
		//	HeaderBlock | ParamsBlock | HttpMethod;
		public ParserRule getRule() { return rule; }

		//HeaderBlock | ParamsBlock | HttpMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//HeaderBlock
		public RuleCall getHeaderBlockParserRuleCall_0() { return cHeaderBlockParserRuleCall_0; }

		//ParamsBlock
		public RuleCall getParamsBlockParserRuleCall_1() { return cParamsBlockParserRuleCall_1; }

		//HttpMethod
		public RuleCall getHttpMethodParserRuleCall_2() { return cHttpMethodParserRuleCall_2; }
	}

	public class HeaderBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadersHeaderParserRuleCall_1_0 = (RuleCall)cHeadersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cHeadersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cHeadersHeaderParserRuleCall_2_1_0 = (RuleCall)cHeadersAssignment_2_1.eContents().get(0);
		
		//HeaderBlock:
		//	"headers" headers+=Header ("," headers+=Header)*;
		public ParserRule getRule() { return rule; }

		//"headers" headers+=Header ("," headers+=Header)*
		public Group getGroup() { return cGroup; }

		//"headers"
		public Keyword getHeadersKeyword_0() { return cHeadersKeyword_0; }

		//headers+=Header
		public Assignment getHeadersAssignment_1() { return cHeadersAssignment_1; }

		//Header
		public RuleCall getHeadersHeaderParserRuleCall_1_0() { return cHeadersHeaderParserRuleCall_1_0; }

		//("," headers+=Header)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//headers+=Header
		public Assignment getHeadersAssignment_2_1() { return cHeadersAssignment_2_1; }

		//Header
		public RuleCall getHeadersHeaderParserRuleCall_2_1_0() { return cHeadersHeaderParserRuleCall_2_1_0; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Header:
		//	name=STRING ":" value=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" value=STRING
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class HttpMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeHttpMethodTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathPathParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksHttpMethodBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HttpMethod:
		//	type=HttpMethodType name=ID path=Path? "{" blocks+=HttpMethodBlock* "}";
		public ParserRule getRule() { return rule; }

		//type=HttpMethodType name=ID path=Path? "{" blocks+=HttpMethodBlock* "}"
		public Group getGroup() { return cGroup; }

		//type=HttpMethodType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//HttpMethodType
		public RuleCall getTypeHttpMethodTypeEnumRuleCall_0_0() { return cTypeHttpMethodTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=Path?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//Path
		public RuleCall getPathPathParserRuleCall_2_0() { return cPathPathParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//blocks+=HttpMethodBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//HttpMethodBlock
		public RuleCall getBlocksHttpMethodBlockParserRuleCall_4_0() { return cBlocksHttpMethodBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class HttpMethodBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpMethodBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamsBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResponseBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HttpMethodBlock:
		//	HeaderBlock | ParamsBlock | BodyBlock | ResponseBlock;
		public ParserRule getRule() { return rule; }

		//HeaderBlock | ParamsBlock | BodyBlock | ResponseBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//HeaderBlock
		public RuleCall getHeaderBlockParserRuleCall_0() { return cHeaderBlockParserRuleCall_0; }

		//ParamsBlock
		public RuleCall getParamsBlockParserRuleCall_1() { return cParamsBlockParserRuleCall_1; }

		//BodyBlock
		public RuleCall getBodyBlockParserRuleCall_2() { return cBodyBlockParserRuleCall_2; }

		//ResponseBlock
		public RuleCall getResponseBlockParserRuleCall_3() { return cResponseBlockParserRuleCall_3; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cArbitraryPathSegmentParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParamsSimpleMemberAssignmentParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final RuleCall cArbitraryPathSegmentParserRuleCall_3_1_0 = (RuleCall)cAlternatives_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cParamsSimpleMemberAssignmentParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		
		//Path:
		//	{Path} "/" (ArbitraryPathSegment | params+=SimpleMemberAssignment) ("/" (ArbitraryPathSegment |
		//	params+=SimpleMemberAssignment))*;
		public ParserRule getRule() { return rule; }

		//{Path} "/" (ArbitraryPathSegment | params+=SimpleMemberAssignment) ("/" (ArbitraryPathSegment |
		//params+=SimpleMemberAssignment))*
		public Group getGroup() { return cGroup; }

		//{Path}
		public Action getPathAction_0() { return cPathAction_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//ArbitraryPathSegment | params+=SimpleMemberAssignment
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ArbitraryPathSegment
		public RuleCall getArbitraryPathSegmentParserRuleCall_2_0() { return cArbitraryPathSegmentParserRuleCall_2_0; }

		//params+=SimpleMemberAssignment
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//SimpleMemberAssignment
		public RuleCall getParamsSimpleMemberAssignmentParserRuleCall_2_1_0() { return cParamsSimpleMemberAssignmentParserRuleCall_2_1_0; }

		//("/" (ArbitraryPathSegment | params+=SimpleMemberAssignment))*
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//ArbitraryPathSegment | params+=SimpleMemberAssignment
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//ArbitraryPathSegment
		public RuleCall getArbitraryPathSegmentParserRuleCall_3_1_0() { return cArbitraryPathSegmentParserRuleCall_3_1_0; }

		//params+=SimpleMemberAssignment
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//SimpleMemberAssignment
		public RuleCall getParamsSimpleMemberAssignmentParserRuleCall_3_1_1_0() { return cParamsSimpleMemberAssignmentParserRuleCall_3_1_1_0; }
	}

	public class ArbitraryPathSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitraryPathSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ArbitraryPathSegment:
		//	QualifiedName ("-" QualifiedName)*;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("-" QualifiedName)*
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("-" QualifiedName)*
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1_1() { return cQualifiedNameParserRuleCall_1_1; }
	}

	public class ParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParamsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParamsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsSimpleMemberAssignmentParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsSimpleMemberAssignmentParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		
		//ParamsBlock:
		//	{ParamsBlock} "params" params+=SimpleMemberAssignment ("," params+=SimpleMemberAssignment)*;
		public ParserRule getRule() { return rule; }

		//{ParamsBlock} "params" params+=SimpleMemberAssignment ("," params+=SimpleMemberAssignment)*
		public Group getGroup() { return cGroup; }

		//{ParamsBlock}
		public Action getParamsBlockAction_0() { return cParamsBlockAction_0; }

		//"params"
		public Keyword getParamsKeyword_1() { return cParamsKeyword_1; }

		//params+=SimpleMemberAssignment
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//SimpleMemberAssignment
		public RuleCall getParamsSimpleMemberAssignmentParserRuleCall_2_0() { return cParamsSimpleMemberAssignmentParserRuleCall_2_0; }

		//("," params+=SimpleMemberAssignment)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//params+=SimpleMemberAssignment
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//SimpleMemberAssignment
		public RuleCall getParamsSimpleMemberAssignmentParserRuleCall_3_1_0() { return cParamsSimpleMemberAssignmentParserRuleCall_3_1_0; }
	}

	public class SimpleMemberAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleMemberAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberSimpleMemberParserRuleCall_0_0 = (RuleCall)cMemberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultValueLiteralParserRuleCall_1_1_0 = (RuleCall)cDefaultValueAssignment_1_1.eContents().get(0);
		
		//SimpleMemberAssignment:
		//	member=SimpleMember ("=" defaultValue=Literal)?;
		public ParserRule getRule() { return rule; }

		//member=SimpleMember ("=" defaultValue=Literal)?
		public Group getGroup() { return cGroup; }

		//member=SimpleMember
		public Assignment getMemberAssignment_0() { return cMemberAssignment_0; }

		//SimpleMember
		public RuleCall getMemberSimpleMemberParserRuleCall_0_0() { return cMemberSimpleMemberParserRuleCall_0_0; }

		//("=" defaultValue=Literal)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//defaultValue=Literal
		public Assignment getDefaultValueAssignment_1_1() { return cDefaultValueAssignment_1_1; }

		//Literal
		public RuleCall getDefaultValueLiteralParserRuleCall_1_1_0() { return cDefaultValueLiteralParserRuleCall_1_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLiteralBooleanValueEnumRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumericLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralSignedNumberParserRuleCall_2_1_0 = (RuleCall)cLiteralAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	{BooleanLiteral} literal=BooleanValue | {StringLiteral} literal=STRING | {NumericLiteral} literal=SignedNumber;
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} literal=BooleanValue | {StringLiteral} literal=STRING | {NumericLiteral} literal=SignedNumber
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanLiteral} literal=BooleanValue
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }

		//literal=BooleanValue
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }

		//BooleanValue
		public RuleCall getLiteralBooleanValueEnumRuleCall_0_1_0() { return cLiteralBooleanValueEnumRuleCall_0_1_0; }

		//{StringLiteral} literal=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//literal=STRING
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_1_1_0() { return cLiteralSTRINGTerminalRuleCall_1_1_0; }

		//{NumericLiteral} literal=SignedNumber
		public Group getGroup_2() { return cGroup_2; }

		//{NumericLiteral}
		public Action getNumericLiteralAction_2_0() { return cNumericLiteralAction_2_0; }

		//literal=SignedNumber
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }

		//SignedNumber
		public RuleCall getLiteralSignedNumberParserRuleCall_2_1_0() { return cLiteralSignedNumberParserRuleCall_2_1_0; }
	}

	public class BodyBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeBlockTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//BodyBlock:
		//	"body" type=BlockType;
		public ParserRule getRule() { return rule; }

		//"body" type=BlockType
		public Group getGroup() { return cGroup; }

		//"body"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//type=BlockType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//BlockType
		public RuleCall getTypeBlockTypeParserRuleCall_1_0() { return cTypeBlockTypeParserRuleCall_1_0; }
	}

	public class ResponseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResponseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResponseBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResponseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeComplexTypeDeclarationCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeComplexTypeDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeComplexTypeDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeBlockTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ResponseBlock:
		//	{ResponseBlock} "response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?;
		public ParserRule getRule() { return rule; }

		//{ResponseBlock} "response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?
		public Group getGroup() { return cGroup; }

		//{ResponseBlock}
		public Action getResponseBlockAction_0() { return cResponseBlockAction_0; }

		//"response"
		public Keyword getResponseKeyword_1() { return cResponseKeyword_1; }

		//("extends" superType=[ComplexTypeDeclaration])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[ComplexTypeDeclaration]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[ComplexTypeDeclaration]
		public CrossReference getSuperTypeComplexTypeDeclarationCrossReference_2_1_0() { return cSuperTypeComplexTypeDeclarationCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeComplexTypeDeclarationIDTerminalRuleCall_2_1_0_1() { return cSuperTypeComplexTypeDeclarationIDTerminalRuleCall_2_1_0_1; }

		//type=BlockType?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//BlockType
		public RuleCall getTypeBlockTypeParserRuleCall_3_0() { return cTypeBlockTypeParserRuleCall_3_0; }
	}

	public class BlockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockType:
		//	Type | ComplexTypeLiteral;
		public ParserRule getRule() { return rule; }

		//Type | ComplexTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//ComplexTypeLiteral
		public RuleCall getComplexTypeLiteralParserRuleCall_1() { return cComplexTypeLiteralParserRuleCall_1; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	TypedMember / *('=' defaultValue=Value)?  * / | SkipMember;
		public ParserRule getRule() { return rule; }

		//TypedMember / *('=' defaultValue=Value)?  * / | SkipMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypedMember
		public RuleCall getTypedMemberParserRuleCall_0() { return cTypedMemberParserRuleCall_0; }

		//SkipMember
		public RuleCall getSkipMemberParserRuleCall_1() { return cSkipMemberParserRuleCall_1; }
	}

	public class TypedMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypedMember:
		//	name=(ID | STRING) ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=(ID | STRING) ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | STRING
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_1() { return cNameSTRINGTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class SkipMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SkipMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralComplexTypeLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		
		//SkipMember:
		//	name=(ID | STRING) literal=ComplexTypeLiteral;
		public ParserRule getRule() { return rule; }

		//name=(ID | STRING) literal=ComplexTypeLiteral
		public Group getGroup() { return cGroup; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | STRING
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_1() { return cNameSTRINGTerminalRuleCall_0_0_1; }

		//literal=ComplexTypeLiteral
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }

		//ComplexTypeLiteral
		public RuleCall getLiteralComplexTypeLiteralParserRuleCall_1_0() { return cLiteralComplexTypeLiteralParserRuleCall_1_0; }
	}

	public class SimpleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIntrinsicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//SimpleMember:
		//	name=(ID | STRING) ":" type=IntrinsicType;
		public ParserRule getRule() { return rule; }

		//name=(ID | STRING) ":" type=IntrinsicType
		public Group getGroup() { return cGroup; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | STRING
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_1() { return cNameSTRINGTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=IntrinsicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//IntrinsicType
		public RuleCall getTypeIntrinsicTypeParserRuleCall_2_0() { return cTypeIntrinsicTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntrinsicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGenericListTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	UserType | IntrinsicType | GenericListType;
		public ParserRule getRule() { return rule; }

		//UserType | IntrinsicType | GenericListType
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserType
		public RuleCall getUserTypeParserRuleCall_0() { return cUserTypeParserRuleCall_0; }

		//IntrinsicType
		public RuleCall getIntrinsicTypeParserRuleCall_1() { return cIntrinsicTypeParserRuleCall_1; }

		//GenericListType
		public RuleCall getGenericListTypeParserRuleCall_2() { return cGenericListTypeParserRuleCall_2; }
	}

	public class GenericListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementTypeAlternatives_0_0 = (Alternatives)cElementTypeAssignment_0.eContents().get(0);
		private final RuleCall cElementTypeUserTypeParserRuleCall_0_0_0 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementTypeIntrinsicTypeParserRuleCall_0_0_1 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cIdAssignment_1.eContents().get(0);
		
		//GenericListType:
		//	elementType=(UserType | IntrinsicType) id="[]";
		public ParserRule getRule() { return rule; }

		//elementType=(UserType | IntrinsicType) id="[]"
		public Group getGroup() { return cGroup; }

		//elementType=(UserType | IntrinsicType)
		public Assignment getElementTypeAssignment_0() { return cElementTypeAssignment_0; }

		//UserType | IntrinsicType
		public Alternatives getElementTypeAlternatives_0_0() { return cElementTypeAlternatives_0_0; }

		//UserType
		public RuleCall getElementTypeUserTypeParserRuleCall_0_0_0() { return cElementTypeUserTypeParserRuleCall_0_0_0; }

		//IntrinsicType
		public RuleCall getElementTypeIntrinsicTypeParserRuleCall_0_0_1() { return cElementTypeIntrinsicTypeParserRuleCall_0_0_1; }

		//id="[]"
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//"[]"
		public Keyword getIdLeftSquareBracketRightSquareBracketKeyword_1_0() { return cIdLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}

	public class UserTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserType");
		private final Assignment cDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDeclarationUserTypeDeclarationCrossReference_0 = (CrossReference)cDeclarationAssignment.eContents().get(0);
		private final RuleCall cDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cDeclarationUserTypeDeclarationCrossReference_0.eContents().get(1);
		
		//UserType:
		//	declaration=[UserTypeDeclaration];
		public ParserRule getRule() { return rule; }

		//declaration=[UserTypeDeclaration]
		public Assignment getDeclarationAssignment() { return cDeclarationAssignment; }

		//[UserTypeDeclaration]
		public CrossReference getDeclarationUserTypeDeclarationCrossReference_0() { return cDeclarationUserTypeDeclarationCrossReference_0; }

		//ID
		public RuleCall getDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1() { return cDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1; }
	}

	public class UserTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComplexTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UserTypeDeclaration:
		//	ComplexTypeDeclaration | EnumTypeDeclaration;
		public ParserRule getRule() { return rule; }

		//ComplexTypeDeclaration | EnumTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComplexTypeDeclaration
		public RuleCall getComplexTypeDeclarationParserRuleCall_0() { return cComplexTypeDeclarationParserRuleCall_0; }

		//EnumTypeDeclaration
		public RuleCall getEnumTypeDeclarationParserRuleCall_1() { return cEnumTypeDeclarationParserRuleCall_1; }
	}

	public class ComplexTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeywordEntityKeyword_0_0 = (Keyword)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cNogenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNogenNogenKeyword_1_0 = (Keyword)cNogenAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralComplexTypeLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		
		//ComplexTypeDeclaration:
		//	keyword="entity" nogen?="nogen"? name=ID literal=ComplexTypeLiteral?;
		public ParserRule getRule() { return rule; }

		//keyword="entity" nogen?="nogen"? name=ID literal=ComplexTypeLiteral?
		public Group getGroup() { return cGroup; }

		//keyword="entity"
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//"entity"
		public Keyword getKeywordEntityKeyword_0_0() { return cKeywordEntityKeyword_0_0; }

		//nogen?="nogen"?
		public Assignment getNogenAssignment_1() { return cNogenAssignment_1; }

		//"nogen"
		public Keyword getNogenNogenKeyword_1_0() { return cNogenNogenKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//literal=ComplexTypeLiteral?
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }

		//ComplexTypeLiteral
		public RuleCall getLiteralComplexTypeLiteralParserRuleCall_3_0() { return cLiteralComplexTypeLiteralParserRuleCall_3_0; }
	}

	public class EnumTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeywordEnumKeyword_0_0 = (Keyword)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cNogenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNogenNogenKeyword_1_0 = (Keyword)cNogenAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeIntegerTypeParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Assignment cLiteralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralEnumTypeLiteralParserRuleCall_4_0 = (RuleCall)cLiteralAssignment_4.eContents().get(0);
		
		//EnumTypeDeclaration:
		//	keyword="enum" nogen?="nogen"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?;
		public ParserRule getRule() { return rule; }

		//keyword="enum" nogen?="nogen"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?
		public Group getGroup() { return cGroup; }

		//keyword="enum"
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//"enum"
		public Keyword getKeywordEnumKeyword_0_0() { return cKeywordEnumKeyword_0_0; }

		//nogen?="nogen"?
		public Assignment getNogenAssignment_1() { return cNogenAssignment_1; }

		//"nogen"
		public Keyword getNogenNogenKeyword_1_0() { return cNogenNogenKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superType=IntegerType)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=IntegerType
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//IntegerType
		public RuleCall getSuperTypeIntegerTypeParserRuleCall_3_1_0() { return cSuperTypeIntegerTypeParserRuleCall_3_1_0; }

		//literal=EnumTypeLiteral?
		public Assignment getLiteralAssignment_4() { return cLiteralAssignment_4; }

		//EnumTypeLiteral
		public RuleCall getLiteralEnumTypeLiteralParserRuleCall_4_0() { return cLiteralEnumTypeLiteralParserRuleCall_4_0; }
	}

	public class EnumTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersEnumMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersEnumMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumTypeLiteral:
		//	"{" members+=EnumMember ("," members+=EnumMember)* "}";
		public ParserRule getRule() { return rule; }

		//"{" members+=EnumMember ("," members+=EnumMember)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//members+=EnumMember
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//EnumMember
		public RuleCall getMembersEnumMemberParserRuleCall_1_0() { return cMembersEnumMemberParserRuleCall_1_0; }

		//("," members+=EnumMember)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=EnumMember
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//EnumMember
		public RuleCall getMembersEnumMemberParserRuleCall_2_1_0() { return cMembersEnumMemberParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAssignmentEqualsSignKeyword_1_0_0 = (Keyword)cAssignmentAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//EnumMember:
		//	name=ID (assignment?="=" value=INT)?;
		public ParserRule getRule() { return rule; }

		//name=ID (assignment?="=" value=INT)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(assignment?="=" value=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//assignment?="="
		public Assignment getAssignmentAssignment_1_0() { return cAssignmentAssignment_1_0; }

		//"="
		public Keyword getAssignmentEqualsSignKeyword_1_0_0() { return cAssignmentEqualsSignKeyword_1_0_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
	}

	public class ComplexTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComplexTypeLiteral:
		//	"{" members+=Member ("," members+=Member)* "}";
		public ParserRule getRule() { return rule; }

		//"{" members+=Member ("," members+=Member)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//members+=Member
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_1_0() { return cMembersMemberParserRuleCall_1_0; }

		//("," members+=Member)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=Member
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_1_0() { return cMembersMemberParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IntrinsicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntrinsicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntrinsicType:
		//	StringType | BooleanType | NumericType;
		public ParserRule getRule() { return rule; }

		//StringType | BooleanType | NumericType
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }

		//NumericType
		public RuleCall getNumericTypeParserRuleCall_2() { return cNumericTypeParserRuleCall_2; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdStringKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//StringType:
		//	id="String";
		public ParserRule getRule() { return rule; }

		//id="String"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"String"
		public Keyword getIdStringKeyword_0() { return cIdStringKeyword_0; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdBooleanKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//BooleanType:
		//	id="boolean";
		public ParserRule getRule() { return rule; }

		//id="boolean"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"boolean"
		public Keyword getIdBooleanKeyword_0() { return cIdBooleanKeyword_0; }
	}

	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NumericType:
		//	IntegerType | LongType | DoubleType;
		public ParserRule getRule() { return rule; }

		//IntegerType | LongType | DoubleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//LongType
		public RuleCall getLongTypeParserRuleCall_1() { return cLongTypeParserRuleCall_1; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_2() { return cDoubleTypeParserRuleCall_2; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdIntKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//IntegerType:
		//	id="int";
		public ParserRule getRule() { return rule; }

		//id="int"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"int"
		public Keyword getIdIntKeyword_0() { return cIdIntKeyword_0; }
	}

	public class LongTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdLongKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//LongType:
		//	id="long";
		public ParserRule getRule() { return rule; }

		//id="long"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"long"
		public Keyword getIdLongKeyword_0() { return cIdLongKeyword_0; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdDoubleKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//DoubleType:
		//	id="double";
		public ParserRule getRule() { return rule; }

		//id="double"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"double"
		public Keyword getIdDoubleKeyword_0() { return cIdDoubleKeyword_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedNumber returns ecore::EBigDecimal:
		//	"-"? NUMBER;
		public ParserRule getRule() { return rule; }

		//"-"? NUMBER
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}
	
	
	public class HttpMethodTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HttpMethodType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGetGetKeyword_0_0 = (Keyword)cGetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPutPutKeyword_1_0 = (Keyword)cPutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPostPostKeyword_2_0 = (Keyword)cPostEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDeleteDeleteKeyword_3_0 = (Keyword)cDeleteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum HttpMethodType:
		//	get | put | post | delete;
		public EnumRule getRule() { return rule; }

		//get | put | post | delete
		public Alternatives getAlternatives() { return cAlternatives; }

		//get
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_0() { return cGetEnumLiteralDeclaration_0; }

		//"get"
		public Keyword getGetGetKeyword_0_0() { return cGetGetKeyword_0_0; }

		//put
		public EnumLiteralDeclaration getPutEnumLiteralDeclaration_1() { return cPutEnumLiteralDeclaration_1; }

		//"put"
		public Keyword getPutPutKeyword_1_0() { return cPutPutKeyword_1_0; }

		//post
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_2() { return cPostEnumLiteralDeclaration_2; }

		//"post"
		public Keyword getPostPostKeyword_2_0() { return cPostPostKeyword_2_0; }

		//delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_3() { return cDeleteEnumLiteralDeclaration_3; }

		//"delete"
		public Keyword getDeleteDeleteKeyword_3_0() { return cDeleteDeleteKeyword_3_0; }
	}

	public class BooleanValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanValue:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private DeclarationElements pDeclaration;
	private ClientElements pClient;
	private ClientBlockElements pClientBlock;
	private HeaderBlockElements pHeaderBlock;
	private HeaderElements pHeader;
	private HttpMethodElements pHttpMethod;
	private HttpMethodBlockElements pHttpMethodBlock;
	private HttpMethodTypeElements unknownRuleHttpMethodType;
	private PathElements pPath;
	private ArbitraryPathSegmentElements pArbitraryPathSegment;
	private ParamsBlockElements pParamsBlock;
	private SimpleMemberAssignmentElements pSimpleMemberAssignment;
	private LiteralElements pLiteral;
	private BodyBlockElements pBodyBlock;
	private ResponseBlockElements pResponseBlock;
	private BlockTypeElements pBlockType;
	private MemberElements pMember;
	private TypedMemberElements pTypedMember;
	private SkipMemberElements pSkipMember;
	private SimpleMemberElements pSimpleMember;
	private TypeElements pType;
	private GenericListTypeElements pGenericListType;
	private UserTypeElements pUserType;
	private UserTypeDeclarationElements pUserTypeDeclaration;
	private ComplexTypeDeclarationElements pComplexTypeDeclaration;
	private EnumTypeDeclarationElements pEnumTypeDeclaration;
	private EnumTypeLiteralElements pEnumTypeLiteral;
	private EnumMemberElements pEnumMember;
	private ComplexTypeLiteralElements pComplexTypeLiteral;
	private IntrinsicTypeElements pIntrinsicType;
	private StringTypeElements pStringType;
	private BooleanTypeElements pBooleanType;
	private NumericTypeElements pNumericType;
	private IntegerTypeElements pIntegerType;
	private LongTypeElements pLongType;
	private DoubleTypeElements pDoubleType;
	private QualifiedNameElements pQualifiedName;
	private BooleanValueElements unknownRuleBooleanValue;
	private SignedNumberElements pSignedNumber;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public NetModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.robotoworks.mechanoid.net.NetModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"package" packageName=QualifiedName declarations+=Declaration*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Declaration:
	//	UserTypeDeclaration | Client;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Client:
	//	"client" name=ID baseUrl=STRING? "{" blocks+=ClientBlock* "}";
	public ClientElements getClientAccess() {
		return (pClient != null) ? pClient : (pClient = new ClientElements());
	}
	
	public ParserRule getClientRule() {
		return getClientAccess().getRule();
	}

	//ClientBlock:
	//	HeaderBlock | ParamsBlock | HttpMethod;
	public ClientBlockElements getClientBlockAccess() {
		return (pClientBlock != null) ? pClientBlock : (pClientBlock = new ClientBlockElements());
	}
	
	public ParserRule getClientBlockRule() {
		return getClientBlockAccess().getRule();
	}

	//HeaderBlock:
	//	"headers" headers+=Header ("," headers+=Header)*;
	public HeaderBlockElements getHeaderBlockAccess() {
		return (pHeaderBlock != null) ? pHeaderBlock : (pHeaderBlock = new HeaderBlockElements());
	}
	
	public ParserRule getHeaderBlockRule() {
		return getHeaderBlockAccess().getRule();
	}

	//Header:
	//	name=STRING ":" value=STRING;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//HttpMethod:
	//	type=HttpMethodType name=ID path=Path? "{" blocks+=HttpMethodBlock* "}";
	public HttpMethodElements getHttpMethodAccess() {
		return (pHttpMethod != null) ? pHttpMethod : (pHttpMethod = new HttpMethodElements());
	}
	
	public ParserRule getHttpMethodRule() {
		return getHttpMethodAccess().getRule();
	}

	//HttpMethodBlock:
	//	HeaderBlock | ParamsBlock | BodyBlock | ResponseBlock;
	public HttpMethodBlockElements getHttpMethodBlockAccess() {
		return (pHttpMethodBlock != null) ? pHttpMethodBlock : (pHttpMethodBlock = new HttpMethodBlockElements());
	}
	
	public ParserRule getHttpMethodBlockRule() {
		return getHttpMethodBlockAccess().getRule();
	}

	//enum HttpMethodType:
	//	get | put | post | delete;
	public HttpMethodTypeElements getHttpMethodTypeAccess() {
		return (unknownRuleHttpMethodType != null) ? unknownRuleHttpMethodType : (unknownRuleHttpMethodType = new HttpMethodTypeElements());
	}
	
	public EnumRule getHttpMethodTypeRule() {
		return getHttpMethodTypeAccess().getRule();
	}

	//Path:
	//	{Path} "/" (ArbitraryPathSegment | params+=SimpleMemberAssignment) ("/" (ArbitraryPathSegment |
	//	params+=SimpleMemberAssignment))*;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//ArbitraryPathSegment:
	//	QualifiedName ("-" QualifiedName)*;
	public ArbitraryPathSegmentElements getArbitraryPathSegmentAccess() {
		return (pArbitraryPathSegment != null) ? pArbitraryPathSegment : (pArbitraryPathSegment = new ArbitraryPathSegmentElements());
	}
	
	public ParserRule getArbitraryPathSegmentRule() {
		return getArbitraryPathSegmentAccess().getRule();
	}

	//ParamsBlock:
	//	{ParamsBlock} "params" params+=SimpleMemberAssignment ("," params+=SimpleMemberAssignment)*;
	public ParamsBlockElements getParamsBlockAccess() {
		return (pParamsBlock != null) ? pParamsBlock : (pParamsBlock = new ParamsBlockElements());
	}
	
	public ParserRule getParamsBlockRule() {
		return getParamsBlockAccess().getRule();
	}

	//SimpleMemberAssignment:
	//	member=SimpleMember ("=" defaultValue=Literal)?;
	public SimpleMemberAssignmentElements getSimpleMemberAssignmentAccess() {
		return (pSimpleMemberAssignment != null) ? pSimpleMemberAssignment : (pSimpleMemberAssignment = new SimpleMemberAssignmentElements());
	}
	
	public ParserRule getSimpleMemberAssignmentRule() {
		return getSimpleMemberAssignmentAccess().getRule();
	}

	//Literal:
	//	{BooleanLiteral} literal=BooleanValue | {StringLiteral} literal=STRING | {NumericLiteral} literal=SignedNumber;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BodyBlock:
	//	"body" type=BlockType;
	public BodyBlockElements getBodyBlockAccess() {
		return (pBodyBlock != null) ? pBodyBlock : (pBodyBlock = new BodyBlockElements());
	}
	
	public ParserRule getBodyBlockRule() {
		return getBodyBlockAccess().getRule();
	}

	//ResponseBlock:
	//	{ResponseBlock} "response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?;
	public ResponseBlockElements getResponseBlockAccess() {
		return (pResponseBlock != null) ? pResponseBlock : (pResponseBlock = new ResponseBlockElements());
	}
	
	public ParserRule getResponseBlockRule() {
		return getResponseBlockAccess().getRule();
	}

	//BlockType:
	//	Type | ComplexTypeLiteral;
	public BlockTypeElements getBlockTypeAccess() {
		return (pBlockType != null) ? pBlockType : (pBlockType = new BlockTypeElements());
	}
	
	public ParserRule getBlockTypeRule() {
		return getBlockTypeAccess().getRule();
	}

	//Member:
	//	TypedMember / *('=' defaultValue=Value)?  * / | SkipMember;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//TypedMember:
	//	name=(ID | STRING) ":" type=Type;
	public TypedMemberElements getTypedMemberAccess() {
		return (pTypedMember != null) ? pTypedMember : (pTypedMember = new TypedMemberElements());
	}
	
	public ParserRule getTypedMemberRule() {
		return getTypedMemberAccess().getRule();
	}

	//SkipMember:
	//	name=(ID | STRING) literal=ComplexTypeLiteral;
	public SkipMemberElements getSkipMemberAccess() {
		return (pSkipMember != null) ? pSkipMember : (pSkipMember = new SkipMemberElements());
	}
	
	public ParserRule getSkipMemberRule() {
		return getSkipMemberAccess().getRule();
	}

	//SimpleMember:
	//	name=(ID | STRING) ":" type=IntrinsicType;
	public SimpleMemberElements getSimpleMemberAccess() {
		return (pSimpleMember != null) ? pSimpleMember : (pSimpleMember = new SimpleMemberElements());
	}
	
	public ParserRule getSimpleMemberRule() {
		return getSimpleMemberAccess().getRule();
	}

	//Type:
	//	UserType | IntrinsicType | GenericListType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//GenericListType:
	//	elementType=(UserType | IntrinsicType) id="[]";
	public GenericListTypeElements getGenericListTypeAccess() {
		return (pGenericListType != null) ? pGenericListType : (pGenericListType = new GenericListTypeElements());
	}
	
	public ParserRule getGenericListTypeRule() {
		return getGenericListTypeAccess().getRule();
	}

	//UserType:
	//	declaration=[UserTypeDeclaration];
	public UserTypeElements getUserTypeAccess() {
		return (pUserType != null) ? pUserType : (pUserType = new UserTypeElements());
	}
	
	public ParserRule getUserTypeRule() {
		return getUserTypeAccess().getRule();
	}

	//UserTypeDeclaration:
	//	ComplexTypeDeclaration | EnumTypeDeclaration;
	public UserTypeDeclarationElements getUserTypeDeclarationAccess() {
		return (pUserTypeDeclaration != null) ? pUserTypeDeclaration : (pUserTypeDeclaration = new UserTypeDeclarationElements());
	}
	
	public ParserRule getUserTypeDeclarationRule() {
		return getUserTypeDeclarationAccess().getRule();
	}

	//ComplexTypeDeclaration:
	//	keyword="entity" nogen?="nogen"? name=ID literal=ComplexTypeLiteral?;
	public ComplexTypeDeclarationElements getComplexTypeDeclarationAccess() {
		return (pComplexTypeDeclaration != null) ? pComplexTypeDeclaration : (pComplexTypeDeclaration = new ComplexTypeDeclarationElements());
	}
	
	public ParserRule getComplexTypeDeclarationRule() {
		return getComplexTypeDeclarationAccess().getRule();
	}

	//EnumTypeDeclaration:
	//	keyword="enum" nogen?="nogen"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?;
	public EnumTypeDeclarationElements getEnumTypeDeclarationAccess() {
		return (pEnumTypeDeclaration != null) ? pEnumTypeDeclaration : (pEnumTypeDeclaration = new EnumTypeDeclarationElements());
	}
	
	public ParserRule getEnumTypeDeclarationRule() {
		return getEnumTypeDeclarationAccess().getRule();
	}

	//EnumTypeLiteral:
	//	"{" members+=EnumMember ("," members+=EnumMember)* "}";
	public EnumTypeLiteralElements getEnumTypeLiteralAccess() {
		return (pEnumTypeLiteral != null) ? pEnumTypeLiteral : (pEnumTypeLiteral = new EnumTypeLiteralElements());
	}
	
	public ParserRule getEnumTypeLiteralRule() {
		return getEnumTypeLiteralAccess().getRule();
	}

	//EnumMember:
	//	name=ID (assignment?="=" value=INT)?;
	public EnumMemberElements getEnumMemberAccess() {
		return (pEnumMember != null) ? pEnumMember : (pEnumMember = new EnumMemberElements());
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}

	//ComplexTypeLiteral:
	//	"{" members+=Member ("," members+=Member)* "}";
	public ComplexTypeLiteralElements getComplexTypeLiteralAccess() {
		return (pComplexTypeLiteral != null) ? pComplexTypeLiteral : (pComplexTypeLiteral = new ComplexTypeLiteralElements());
	}
	
	public ParserRule getComplexTypeLiteralRule() {
		return getComplexTypeLiteralAccess().getRule();
	}

	//IntrinsicType:
	//	StringType | BooleanType | NumericType;
	public IntrinsicTypeElements getIntrinsicTypeAccess() {
		return (pIntrinsicType != null) ? pIntrinsicType : (pIntrinsicType = new IntrinsicTypeElements());
	}
	
	public ParserRule getIntrinsicTypeRule() {
		return getIntrinsicTypeAccess().getRule();
	}

	//StringType:
	//	id="String";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//BooleanType:
	//	id="boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//NumericType:
	//	IntegerType | LongType | DoubleType;
	public NumericTypeElements getNumericTypeAccess() {
		return (pNumericType != null) ? pNumericType : (pNumericType = new NumericTypeElements());
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//IntegerType:
	//	id="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return (pIntegerType != null) ? pIntegerType : (pIntegerType = new IntegerTypeElements());
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//LongType:
	//	id="long";
	public LongTypeElements getLongTypeAccess() {
		return (pLongType != null) ? pLongType : (pLongType = new LongTypeElements());
	}
	
	public ParserRule getLongTypeRule() {
		return getLongTypeAccess().getRule();
	}

	//DoubleType:
	//	id="double";
	public DoubleTypeElements getDoubleTypeAccess() {
		return (pDoubleType != null) ? pDoubleType : (pDoubleType = new DoubleTypeElements());
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum BooleanValue:
	//	true | false;
	public BooleanValueElements getBooleanValueAccess() {
		return (unknownRuleBooleanValue != null) ? unknownRuleBooleanValue : (unknownRuleBooleanValue = new BooleanValueElements());
	}
	
	public EnumRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//SignedNumber returns ecore::EBigDecimal:
	//	"-"? NUMBER;
	public SignedNumberElements getSignedNumberAccess() {
		return (pSignedNumber != null) ? pSignedNumber : (pSignedNumber = new SignedNumberElements());
	}
	
	public ParserRule getSignedNumberRule() {
		return getSignedNumberAccess().getRule();
	}

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"$$$don\'t use this anymore$$$";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
