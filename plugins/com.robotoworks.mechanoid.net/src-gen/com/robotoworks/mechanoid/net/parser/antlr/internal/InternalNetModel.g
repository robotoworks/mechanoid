/*
* generated by Xtext
*/
grammar InternalNetModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.robotoworks.mechanoid.net.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.robotoworks.mechanoid.net.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.robotoworks.mechanoid.net.services.NetModelGrammarAccess;

}

@parser::members {

 	private NetModelGrammarAccess grammarAccess;
 	
    public InternalNetModelParser(TokenStream input, NetModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected NetModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackageNameFQNParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_2_0()); 
	    }
		lv_declarations_2_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getUserTypeDeclarationParserRuleCall_0()); 
    }
    this_UserTypeDeclaration_0=ruleUserTypeDeclaration
    { 
        $current = $this_UserTypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getClientParserRuleCall_1()); 
    }
    this_Client_1=ruleClient
    { 
        $current = $this_Client_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClient
entryRuleClient returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClientRule()); }
	 iv_ruleClient=ruleClient 
	 { $current=$iv_ruleClient.current; } 
	 EOF 
;

// Rule Client
ruleClient returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='client' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClientAccess().getClientKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClientAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_baseUrl_2_0=RULE_STRING
		{
			newLeafNode(lv_baseUrl_2_0, grammarAccess.getClientAccess().getBaseUrlSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"baseUrl",
        		lv_baseUrl_2_0, 
        		"STRING");
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClientAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClientAccess().getBlocksClientBlockParserRuleCall_4_0()); 
	    }
		lv_blocks_4_0=ruleClientBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClientRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_4_0, 
        		"ClientBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClientAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleClientBlock
entryRuleClientBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClientBlockRule()); }
	 iv_ruleClientBlock=ruleClientBlock 
	 { $current=$iv_ruleClientBlock.current; } 
	 EOF 
;

// Rule ClientBlock
ruleClientBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClientBlockAccess().getHeaderBlockParserRuleCall_0()); 
    }
    this_HeaderBlock_0=ruleHeaderBlock
    { 
        $current = $this_HeaderBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClientBlockAccess().getParamsBlockParserRuleCall_1()); 
    }
    this_ParamsBlock_1=ruleParamsBlock
    { 
        $current = $this_ParamsBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClientBlockAccess().getHttpMethodParserRuleCall_2()); 
    }
    this_HttpMethod_2=ruleHttpMethod
    { 
        $current = $this_HttpMethod_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleHeaderBlock
entryRuleHeaderBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeaderBlockRule()); }
	 iv_ruleHeaderBlock=ruleHeaderBlock 
	 { $current=$iv_ruleHeaderBlock.current; } 
	 EOF 
;

// Rule HeaderBlock
ruleHeaderBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='headers' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHeaderBlockAccess().getHeadersKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeaderBlockAccess().getHeadersHeaderParserRuleCall_1_0()); 
	    }
		lv_headers_1_0=ruleHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeaderBlockRule());
	        }
       		add(
       			$current, 
       			"headers",
        		lv_headers_1_0, 
        		"Header");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHeaderBlockAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeaderBlockAccess().getHeadersHeaderParserRuleCall_2_1_0()); 
	    }
		lv_headers_3_0=ruleHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeaderBlockRule());
	        }
       		add(
       			$current, 
       			"headers",
        		lv_headers_3_0, 
        		"Header");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	 iv_ruleHeader=ruleHeader 
	 { $current=$iv_ruleHeader.current; } 
	 EOF 
;

// Rule Header
ruleHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHeaderAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHeaderAccess().getColonKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getHeaderAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleHttpMethod
entryRuleHttpMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHttpMethodRule()); }
	 iv_ruleHttpMethod=ruleHttpMethod 
	 { $current=$iv_ruleHttpMethod.current; } 
	 EOF 
;

// Rule HttpMethod
ruleHttpMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHttpMethodAccess().getTypeHttpMethodTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleHttpMethodType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHttpMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"HttpMethodType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHttpMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHttpMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHttpMethodAccess().getPathPathParserRuleCall_2_0()); 
	    }
		lv_path_2_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHttpMethodRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHttpMethodAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHttpMethodAccess().getBlocksHttpMethodBlockParserRuleCall_4_0()); 
	    }
		lv_blocks_4_0=ruleHttpMethodBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHttpMethodRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_4_0, 
        		"HttpMethodBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHttpMethodAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleHttpMethodBlock
entryRuleHttpMethodBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHttpMethodBlockRule()); }
	 iv_ruleHttpMethodBlock=ruleHttpMethodBlock 
	 { $current=$iv_ruleHttpMethodBlock.current; } 
	 EOF 
;

// Rule HttpMethodBlock
ruleHttpMethodBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHttpMethodBlockAccess().getHeaderBlockParserRuleCall_0()); 
    }
    this_HeaderBlock_0=ruleHeaderBlock
    { 
        $current = $this_HeaderBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHttpMethodBlockAccess().getParamsBlockParserRuleCall_1()); 
    }
    this_ParamsBlock_1=ruleParamsBlock
    { 
        $current = $this_ParamsBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHttpMethodBlockAccess().getBodyBlockParserRuleCall_2()); 
    }
    this_BodyBlock_2=ruleBodyBlock
    { 
        $current = $this_BodyBlock_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHttpMethodBlockAccess().getResponseBlockParserRuleCall_3()); 
    }
    this_ResponseBlock_3=ruleResponseBlock
    { 
        $current = $this_ResponseBlock_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePath
entryRulePath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current; } 
	 EOF 
;

// Rule Path
rulePath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPathAccess().getPathAction_0(),
            $current);
    }
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathAccess().getSolidusKeyword_1());
    }
(this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getPathAccess().getIDTerminalRuleCall_2_0()); 
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getParamsSimpleMemberAssignmentParserRuleCall_2_1_0()); 
	    }
		lv_params_3_0=ruleSimpleMemberAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"SimpleMemberAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPathAccess().getSolidusKeyword_3_0());
    }
(this_ID_5=RULE_ID
    { 
    newLeafNode(this_ID_5, grammarAccess.getPathAccess().getIDTerminalRuleCall_3_1_0()); 
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getParamsSimpleMemberAssignmentParserRuleCall_3_1_1_0()); 
	    }
		lv_params_6_0=ruleSimpleMemberAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"SimpleMemberAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleParamsBlock
entryRuleParamsBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamsBlockRule()); }
	 iv_ruleParamsBlock=ruleParamsBlock 
	 { $current=$iv_ruleParamsBlock.current; } 
	 EOF 
;

// Rule ParamsBlock
ruleParamsBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParamsBlockAccess().getParamsBlockAction_0(),
            $current);
    }
)	otherlv_1='params' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamsBlockAccess().getParamsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsBlockAccess().getParamsSimpleMemberAssignmentParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleSimpleMemberAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsBlockRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"SimpleMemberAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParamsBlockAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsBlockAccess().getParamsSimpleMemberAssignmentParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleSimpleMemberAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsBlockRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"SimpleMemberAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSimpleMemberAssignment
entryRuleSimpleMemberAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleMemberAssignmentRule()); }
	 iv_ruleSimpleMemberAssignment=ruleSimpleMemberAssignment 
	 { $current=$iv_ruleSimpleMemberAssignment.current; } 
	 EOF 
;

// Rule SimpleMemberAssignment
ruleSimpleMemberAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleMemberAssignmentAccess().getMemberSimpleMemberParserRuleCall_0_0()); 
	    }
		lv_member_0_0=ruleSimpleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleMemberAssignmentRule());
	        }
       		set(
       			$current, 
       			"member",
        		lv_member_0_0, 
        		"SimpleMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleMemberAssignmentAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleMemberAssignmentAccess().getDefaultValueLiteralParserRuleCall_1_1_0()); 
	    }
		lv_defaultValue_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleMemberAssignmentRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getBooleanLiteralAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getLiteralBooleanValueEnumRuleCall_0_1_0()); 
	    }
		lv_literal_1_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"BooleanValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getStringLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_literal_3_0=RULE_STRING
		{
			newLeafNode(lv_literal_3_0, grammarAccess.getLiteralAccess().getLiteralSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal",
        		lv_literal_3_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getNumericLiteralAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getLiteralSignedNumberParserRuleCall_2_1_0()); 
	    }
		lv_literal_5_0=ruleSignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_5_0, 
        		"SignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBodyBlock
entryRuleBodyBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyBlockRule()); }
	 iv_ruleBodyBlock=ruleBodyBlock 
	 { $current=$iv_ruleBodyBlock.current; } 
	 EOF 
;

// Rule BodyBlock
ruleBodyBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='body' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBodyBlockAccess().getBodyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyBlockAccess().getTypeBlockTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleBlockType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyBlockRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"BlockType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResponseBlock
entryRuleResponseBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResponseBlockRule()); }
	 iv_ruleResponseBlock=ruleResponseBlock 
	 { $current=$iv_ruleResponseBlock.current; } 
	 EOF 
;

// Rule ResponseBlock
ruleResponseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResponseBlockAccess().getResponseBlockAction_0(),
            $current);
    }
)	otherlv_1='response' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResponseBlockAccess().getResponseKeyword_1());
    }
(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getResponseBlockAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getResponseBlockRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getResponseBlockAccess().getSuperTypeComplexTypeDeclarationCrossReference_2_1_0()); 
	}

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getResponseBlockAccess().getTypeBlockTypeParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleBlockType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResponseBlockRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"BlockType");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBlockType
entryRuleBlockType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockTypeRule()); }
	 iv_ruleBlockType=ruleBlockType 
	 { $current=$iv_ruleBlockType.current; } 
	 EOF 
;

// Rule BlockType
ruleBlockType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockTypeAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockTypeAccess().getComplexTypeLiteralParserRuleCall_1()); 
    }
    this_ComplexTypeLiteral_1=ruleComplexTypeLiteral
    { 
        $current = $this_ComplexTypeLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getTypedMemberParserRuleCall_0()); 
    }
    this_TypedMember_0=ruleTypedMember
    { 
        $current = $this_TypedMember_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getSkipMemberParserRuleCall_1()); 
    }
    this_SkipMember_1=ruleSkipMember
    { 
        $current = $this_SkipMember_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypedMember
entryRuleTypedMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedMemberRule()); }
	 iv_ruleTypedMember=ruleTypedMember 
	 { $current=$iv_ruleTypedMember.current; } 
	 EOF 
;

// Rule TypedMember
ruleTypedMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getTypedMemberAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_STRING
		{
			newLeafNode(lv_name_0_2, grammarAccess.getTypedMemberAccess().getNameSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"STRING");
	    }

)

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypedMemberAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedMemberAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSkipMember
entryRuleSkipMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSkipMemberRule()); }
	 iv_ruleSkipMember=ruleSkipMember 
	 { $current=$iv_ruleSkipMember.current; } 
	 EOF 
;

// Rule SkipMember
ruleSkipMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getSkipMemberAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSkipMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_STRING
		{
			newLeafNode(lv_name_0_2, grammarAccess.getSkipMemberAccess().getNameSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSkipMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"STRING");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSkipMemberAccess().getLiteralComplexTypeLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleComplexTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSkipMemberRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"ComplexTypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleMember
entryRuleSimpleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleMemberRule()); }
	 iv_ruleSimpleMember=ruleSimpleMember 
	 { $current=$iv_ruleSimpleMember.current; } 
	 EOF 
;

// Rule SimpleMember
ruleSimpleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getSimpleMemberAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_STRING
		{
			newLeafNode(lv_name_0_2, grammarAccess.getSimpleMemberAccess().getNameSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"STRING");
	    }

)

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleMemberAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleMemberAccess().getTypeIntrinsicTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleIntrinsicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"IntrinsicType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getUserTypeParserRuleCall_0()); 
    }
    this_UserType_0=ruleUserType
    { 
        $current = $this_UserType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getIntrinsicTypeParserRuleCall_1()); 
    }
    this_IntrinsicType_1=ruleIntrinsicType
    { 
        $current = $this_IntrinsicType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getGenericListTypeParserRuleCall_2()); 
    }
    this_GenericListType_2=ruleGenericListType
    { 
        $current = $this_GenericListType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGenericListType
entryRuleGenericListType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericListTypeRule()); }
	 iv_ruleGenericListType=ruleGenericListType 
	 { $current=$iv_ruleGenericListType.current; } 
	 EOF 
;

// Rule GenericListType
ruleGenericListType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericListTypeAccess().getElementTypeUserTypeParserRuleCall_0_0_0()); 
	    }
		lv_elementType_0_1=ruleUserType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericListTypeRule());
	        }
       		set(
       			$current, 
       			"elementType",
        		lv_elementType_0_1, 
        		"UserType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGenericListTypeAccess().getElementTypeIntrinsicTypeParserRuleCall_0_0_1()); 
	    }
		lv_elementType_0_2=ruleIntrinsicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericListTypeRule());
	        }
       		set(
       			$current, 
       			"elementType",
        		lv_elementType_0_2, 
        		"IntrinsicType");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		lv_id_1_0=	'[]' 
    {
        newLeafNode(lv_id_1_0, grammarAccess.getGenericListTypeAccess().getIdLeftSquareBracketRightSquareBracketKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericListTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_1_0, "[]");
	    }

)
))
;





// Entry rule entryRuleUserType
entryRuleUserType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserTypeRule()); }
	 iv_ruleUserType=ruleUserType 
	 { $current=$iv_ruleUserType.current; } 
	 EOF 
;

// Rule UserType
ruleUserType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getUserTypeAccess().getDeclarationUserTypeDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleUserTypeDeclaration
entryRuleUserTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserTypeDeclarationRule()); }
	 iv_ruleUserTypeDeclaration=ruleUserTypeDeclaration 
	 { $current=$iv_ruleUserTypeDeclaration.current; } 
	 EOF 
;

// Rule UserTypeDeclaration
ruleUserTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUserTypeDeclarationAccess().getComplexTypeDeclarationParserRuleCall_0()); 
    }
    this_ComplexTypeDeclaration_0=ruleComplexTypeDeclaration
    { 
        $current = $this_ComplexTypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUserTypeDeclarationAccess().getEnumTypeDeclarationParserRuleCall_1()); 
    }
    this_EnumTypeDeclaration_1=ruleEnumTypeDeclaration
    { 
        $current = $this_EnumTypeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComplexTypeDeclaration
entryRuleComplexTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexTypeDeclarationRule()); }
	 iv_ruleComplexTypeDeclaration=ruleComplexTypeDeclaration 
	 { $current=$iv_ruleComplexTypeDeclaration.current; } 
	 EOF 
;

// Rule ComplexTypeDeclaration
ruleComplexTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_keyword_0_0=	'entity' 
    {
        newLeafNode(lv_keyword_0_0, grammarAccess.getComplexTypeDeclarationAccess().getKeywordEntityKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexTypeDeclarationRule());
	        }
       		setWithLastConsumed($current, "keyword", lv_keyword_0_0, "entity");
	    }

)
)(
(
		lv_gen_1_0=	'generate' 
    {
        newLeafNode(lv_gen_1_0, grammarAccess.getComplexTypeDeclarationAccess().getGenGenerateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexTypeDeclarationRule());
	        }
       		setWithLastConsumed($current, "gen", true, "generate");
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getComplexTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexTypeDeclarationAccess().getLiteralComplexTypeLiteralParserRuleCall_3_0()); 
	    }
		lv_literal_3_0=ruleComplexTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_3_0, 
        		"ComplexTypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEnumTypeDeclaration
entryRuleEnumTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumTypeDeclarationRule()); }
	 iv_ruleEnumTypeDeclaration=ruleEnumTypeDeclaration 
	 { $current=$iv_ruleEnumTypeDeclaration.current; } 
	 EOF 
;

// Rule EnumTypeDeclaration
ruleEnumTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_keyword_0_0=	'enum' 
    {
        newLeafNode(lv_keyword_0_0, grammarAccess.getEnumTypeDeclarationAccess().getKeywordEnumKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeDeclarationRule());
	        }
       		setWithLastConsumed($current, "keyword", lv_keyword_0_0, "enum");
	    }

)
)(
(
		lv_gen_1_0=	'generate' 
    {
        newLeafNode(lv_gen_1_0, grammarAccess.getEnumTypeDeclarationAccess().getGenGenerateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeDeclarationRule());
	        }
       		setWithLastConsumed($current, "gen", true, "generate");
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEnumTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumTypeDeclarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeDeclarationAccess().getSuperTypeIntegerTypeParserRuleCall_3_1_0()); 
	    }
		lv_superType_4_0=ruleIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_4_0, 
        		"IntegerType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeDeclarationAccess().getLiteralEnumTypeLiteralParserRuleCall_4_0()); 
	    }
		lv_literal_5_0=ruleEnumTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_5_0, 
        		"EnumTypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEnumTypeLiteral
entryRuleEnumTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumTypeLiteralRule()); }
	 iv_ruleEnumTypeLiteral=ruleEnumTypeLiteral 
	 { $current=$iv_ruleEnumTypeLiteral.current; } 
	 EOF 
;

// Rule EnumTypeLiteral
ruleEnumTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumTypeLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeLiteralAccess().getMembersEnumMemberParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleEnumMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"EnumMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumTypeLiteralAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeLiteralAccess().getMembersEnumMemberParserRuleCall_2_1_0()); 
	    }
		lv_members_3_0=ruleEnumMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"EnumMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumTypeLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleEnumMember
entryRuleEnumMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumMemberRule()); }
	 iv_ruleEnumMember=ruleEnumMember 
	 { $current=$iv_ruleEnumMember.current; } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
(
		lv_assignment_1_0=	'=' 
    {
        newLeafNode(lv_assignment_1_0, grammarAccess.getEnumMemberAccess().getAssignmentEqualsSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumMemberRule());
	        }
       		setWithLastConsumed($current, "assignment", true, "=");
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getEnumMemberAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleComplexTypeLiteral
entryRuleComplexTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexTypeLiteralRule()); }
	 iv_ruleComplexTypeLiteral=ruleComplexTypeLiteral 
	 { $current=$iv_ruleComplexTypeLiteral.current; } 
	 EOF 
;

// Rule ComplexTypeLiteral
ruleComplexTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComplexTypeLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexTypeLiteralAccess().getMembersMemberParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComplexTypeLiteralAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexTypeLiteralAccess().getMembersMemberParserRuleCall_2_1_0()); 
	    }
		lv_members_3_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComplexTypeLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleIntrinsicType
entryRuleIntrinsicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntrinsicTypeRule()); }
	 iv_ruleIntrinsicType=ruleIntrinsicType 
	 { $current=$iv_ruleIntrinsicType.current; } 
	 EOF 
;

// Rule IntrinsicType
ruleIntrinsicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntrinsicTypeAccess().getStringTypeParserRuleCall_0()); 
    }
    this_StringType_0=ruleStringType
    { 
        $current = $this_StringType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntrinsicTypeAccess().getBooleanTypeParserRuleCall_1()); 
    }
    this_BooleanType_1=ruleBooleanType
    { 
        $current = $this_BooleanType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntrinsicTypeAccess().getNumericTypeParserRuleCall_2()); 
    }
    this_NumericType_2=ruleNumericType
    { 
        $current = $this_NumericType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=	'String' 
    {
        newLeafNode(lv_id_0_0, grammarAccess.getStringTypeAccess().getIdStringKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_0_0, "String");
	    }

)
)
;





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=	'boolean' 
    {
        newLeafNode(lv_id_0_0, grammarAccess.getBooleanTypeAccess().getIdBooleanKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_0_0, "boolean");
	    }

)
)
;





// Entry rule entryRuleNumericType
entryRuleNumericType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericTypeRule()); }
	 iv_ruleNumericType=ruleNumericType 
	 { $current=$iv_ruleNumericType.current; } 
	 EOF 
;

// Rule NumericType
ruleNumericType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getIntegerTypeParserRuleCall_0()); 
    }
    this_IntegerType_0=ruleIntegerType
    { 
        $current = $this_IntegerType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getLongTypeParserRuleCall_1()); 
    }
    this_LongType_1=ruleLongType
    { 
        $current = $this_LongType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getDoubleTypeParserRuleCall_2()); 
    }
    this_DoubleType_2=ruleDoubleType
    { 
        $current = $this_DoubleType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	 iv_ruleIntegerType=ruleIntegerType 
	 { $current=$iv_ruleIntegerType.current; } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=	'int' 
    {
        newLeafNode(lv_id_0_0, grammarAccess.getIntegerTypeAccess().getIdIntKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_0_0, "int");
	    }

)
)
;





// Entry rule entryRuleLongType
entryRuleLongType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongTypeRule()); }
	 iv_ruleLongType=ruleLongType 
	 { $current=$iv_ruleLongType.current; } 
	 EOF 
;

// Rule LongType
ruleLongType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=	'long' 
    {
        newLeafNode(lv_id_0_0, grammarAccess.getLongTypeAccess().getIdLongKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_0_0, "long");
	    }

)
)
;





// Entry rule entryRuleDoubleType
entryRuleDoubleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleTypeRule()); }
	 iv_ruleDoubleType=ruleDoubleType 
	 { $current=$iv_ruleDoubleType.current; } 
	 EOF 
;

// Rule DoubleType
ruleDoubleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=	'double' 
    {
        newLeafNode(lv_id_0_0, grammarAccess.getDoubleTypeAccess().getIdDoubleKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleTypeRule());
	        }
       		setWithLastConsumed($current, "id", lv_id_0_0, "double");
	    }

)
)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleSignedNumber
entryRuleSignedNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedNumberRule()); } 
	 iv_ruleSignedNumber=ruleSignedNumber 
	 { $current=$iv_ruleSignedNumber.current.getText(); }  
	 EOF 
;

// Rule SignedNumber
ruleSignedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedNumberAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getSignedNumberAccess().getNUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Rule HttpMethodType
ruleHttpMethodType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='get' 
	{
        $current = grammarAccess.getHttpMethodTypeAccess().getGetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getHttpMethodTypeAccess().getGetEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='put' 
	{
        $current = grammarAccess.getHttpMethodTypeAccess().getPutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getHttpMethodTypeAccess().getPutEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='post' 
	{
        $current = grammarAccess.getHttpMethodTypeAccess().getPostEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getHttpMethodTypeAccess().getPostEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='delete' 
	{
        $current = grammarAccess.getHttpMethodTypeAccess().getDeleteEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getHttpMethodTypeAccess().getDeleteEnumLiteralDeclaration_3()); 
    }
));



// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1()); 
    }
));



RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : '$$$don\'t use this anymore$$$';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


