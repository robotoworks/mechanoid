grammar com.robotoworks.mechanoid.net.NetModel with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate netModel "http://www.robotoworks.com/mechanoid/net/NetModel"

Model:
	"package" packageName=FQN
	(declarations+=Declaration)*
;

Declaration:
	UserTypeDeclaration | Client
;

Client:
	'client' name=ID baseUrl=STRING? '{'
		blocks+=ClientBlock*
	'}'
;

ClientBlock:
	HeaderBlock | ParamsBlock | HttpMethod
;

HeaderBlock:
	'headers' headers+=Header (',' headers+=Header)*
;

Header:
	name=STRING ':' value=STRING
;

HttpMethod:
	type=HttpMethodType name=ID path=Path? '{' 
		blocks += HttpMethodBlock*
	'}'
;

HttpMethodBlock:
	HeaderBlock | ParamsBlock | BodyBlock | ResponseBlock
;

enum HttpMethodType:
	get | put | post | delete
;

Path:
	{Path}
	'/' (ID|params+=SimpleMemberAssignment) ('/' (ID|params+=SimpleMemberAssignment))*
;

ParamsBlock:
	{ParamsBlock}
	'params' params+=SimpleMemberAssignment (',' params+=SimpleMemberAssignment)*
;

SimpleMemberAssignment:
	member=SimpleMember ("=" defaultValue=Literal)?
;

Literal:
	{BooleanLiteral} literal=BooleanValue |
	{StringLiteral} literal=STRING |
	{NumericLiteral} literal=SignedNumber
;

BodyBlock:
	'body' type=BlockType
;

ResponseBlock:
	{ResponseBlock}
	'response' ('extends' superType=[ComplexTypeDeclaration])? (type=BlockType)?
;

BlockType:
	Type | ComplexTypeLiteral
;

Member:
	(TypedMember | SkipMember) /*('=' defaultValue=Value)?  */
;

TypedMember:
	name=(ID|STRING) ':' type=Type
;

SkipMember :
	name=(ID|STRING) literal=ComplexTypeLiteral
;

SimpleMember:
	name=(ID|STRING) ':' type=IntrinsicType
;

Type:
	UserType | IntrinsicType | GenericListType
;

GenericListType:
	elementType=(UserType|IntrinsicType) id='[]'
;

UserType:
	declaration = [UserTypeDeclaration] 
;

UserTypeDeclaration:
	ComplexTypeDeclaration | EnumTypeDeclaration
;

ComplexTypeDeclaration:
	keyword='entity' (gen?='generate')? name=ID (literal=ComplexTypeLiteral)?
;

EnumTypeDeclaration:
	keyword='enum' (gen?='generate')? name=ID ('extends' superType=IntegerType)? (literal=EnumTypeLiteral)?
;

EnumTypeLiteral:
	('{' members+=EnumMember (',' members+=EnumMember)* '}')
;

EnumMember:
	name=ID (assignment?='=' value=INT)?
;

ComplexTypeLiteral:
	('{' members+=Member (',' members+=Member)* '}')
;

IntrinsicType:
	StringType | BooleanType | NumericType
;

StringType:
	id="String"
;

BooleanType:
	id="boolean"
;

NumericType:
	IntegerType | LongType | DoubleType
;
	
IntegerType:
	id="int"
;

LongType:
	id="long"
;

DoubleType:
	id="double"
;

FQN:
	ID ("." ID)*;
	
enum BooleanValue:
	true|false
;

SignedNumber returns ecore::EBigDecimal:
'-'?NUMBER
;	

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	
terminal INT returns ecore::EInt: 
	"$$$don't use this anymore$$$";