package com.robotoworks.mechanoid.sharedprefs.generator


import static extension com.robotoworks.mechanoid.common.util.Strings.*
import com.robotoworks.mechanoid.sharedprefs.sharedPreferencesModel.Model

import static extension com.robotoworks.mechanoid.sharedprefs.generator.Extensions.*

class SharedPreferencesGenerator {
		def CharSequence generate(Model model) '''
			«var sp = model.preferencesBlock»
			/*
			 * Generated by Robotoworks Mechanoid
			 */
			package «model.packageName»;
			
			import android.annotation.TargetApi;
			import android.content.Context;
			import android.content.SharedPreferences;
			import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
			import com.robotoworks.mechanoid.Mechanoid;
			
			public class «sp.name.pascalize»Preferences {
				
				public static final String PREFERENCES_NAME = "«sp.name.pascalize»Preferences";
			
				public interface Keys {
					«FOR p : sp.prefs»
					String «p.name.underscore.toUpperCase» = "«p.name.underscore.toUpperCase»";
					«ENDFOR»	
				}
			
				private final SharedPreferences mPreferences;
			
				private static «sp.name.pascalize»Preferences sInstance;
			
				public static «sp.name.pascalize»Preferences getInstance() {
					if(sInstance == null) {
						sInstance = new «sp.name.pascalize»Preferences(Mechanoid.getApplicationContext());
					}
					
					return sInstance;
				}
				
				private «sp.name.pascalize»Preferences(Context context) {
					mPreferences = context.getSharedPreferences(PREFERENCES_NAME, 0);
				}
			
				«FOR p : sp.prefs»
				public «p.type.toTypeLiteral» get«p.name.pascalize»() {
					return mPreferences.«p.type.toGetMethodName»(Keys.«p.name.underscore.toUpperCase», «p.type.defaultValue»);
				}
				«ENDFOR»
			
				public SharedPreferences getSharedPreferences() {
					return mPreferences;
				}
			
				public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
					mPreferences.registerOnSharedPreferenceChangeListener(listener);
				}
			
				public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
					mPreferences.unregisterOnSharedPreferenceChangeListener(listener);
				}
			
				public «sp.name.pascalize»PreferencesEditor edit() {
					return new «sp.name.pascalize»PreferencesEditor(mPreferences.edit());
				}
			
				public class «sp.name.pascalize»PreferencesEditor {
					private SharedPreferences.Editor mEditor;
			
					public «sp.name.pascalize»PreferencesEditor(SharedPreferences.Editor editor) {
						mEditor = editor;
					}
			
					public boolean commit() {
						return mEditor.commit();
					}
			
					@TargetApi(9)
					public void apply() {
						mEditor.apply();
					}
			
					public «sp.name.pascalize»PreferencesEditor clear() {
						mEditor.clear();
						return this;
					}
					«FOR p : sp.prefs»
					public «sp.name.pascalize»PreferencesEditor put«p.name.pascalize»(«p.type.toTypeLiteral» value) {
						mEditor.«p.type.toPutMethodName»(Keys.«p.name.underscore.toUpperCase», value);
						return this;
					}
					«ENDFOR»
				}
			}
			'''
}