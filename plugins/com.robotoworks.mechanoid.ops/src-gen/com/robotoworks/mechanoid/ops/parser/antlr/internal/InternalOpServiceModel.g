/*
* generated by Xtext
*/
grammar InternalOpServiceModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.robotoworks.mechanoid.ops.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.robotoworks.mechanoid.ops.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.robotoworks.mechanoid.ops.services.OpServiceModelGrammarAccess;

}

@parser::members {

 	private OpServiceModelGrammarAccess grammarAccess;
 	
    public InternalOpServiceModelParser(TokenStream input, OpServiceModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected OpServiceModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getServiceServiceBlockParserRuleCall_2_0()); 
	    }
		lv_service_2_0=ruleServiceBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"service",
        		lv_service_2_0, 
        		"ServiceBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleServiceBlock
entryRuleServiceBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceBlockRule()); }
	 iv_ruleServiceBlock=ruleServiceBlock 
	 { $current=$iv_ruleServiceBlock.current; } 
	 EOF 
;

// Rule ServiceBlock
ruleServiceBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceBlockAccess().getServiceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getServiceBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceBlockAccess().getOpsOperationParserRuleCall_3_0()); 
	    }
		lv_ops_3_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceBlockRule());
	        }
       		add(
       			$current, 
       			"ops",
        		lv_ops_3_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getOperationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getArgsOperationArgParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleOperationArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"OperationArg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getArgsOperationArgParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleOperationArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"OperationArg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getUniqueClauseUniqueClauseParserRuleCall_5_0()); 
	    }
		lv_uniqueClause_7_0=ruleUniqueClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"uniqueClause",
        		lv_uniqueClause_7_0, 
        		"UniqueClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleOperationArg
entryRuleOperationArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationArgRule()); }
	 iv_ruleOperationArg=ruleOperationArg 
	 { $current=$iv_ruleOperationArg.current; } 
	 EOF 
;

// Rule OperationArg
ruleOperationArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationArgAccess().getTypeOpArgTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleOpArgType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"OpArgType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationArgAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleUniqueClause
entryRuleUniqueClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUniqueClauseRule()); }
	 iv_ruleUniqueClause=ruleUniqueClause 
	 { $current=$iv_ruleUniqueClause.current; } 
	 EOF 
;

// Rule UniqueClause
ruleUniqueClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUniqueClauseAccess().getNotUniqueAction_0_0(),
            $current);
    }
)	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUniqueClauseAccess().getNotKeyword_0_1());
    }
	otherlv_2='unique' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUniqueClauseAccess().getUniqueKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUniqueClauseAccess().getUniqueDeclarationAction_1_0(),
            $current);
    }
)	otherlv_4='unique' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUniqueClauseAccess().getUniqueKeyword_1_1());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUniqueClauseAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUniqueClauseRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getUniqueClauseAccess().getArgsOperationArgCrossReference_1_3_0()); 
	}

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUniqueClauseAccess().getCommaKeyword_1_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUniqueClauseRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getUniqueClauseAccess().getArgsOperationArgCrossReference_1_4_1_0()); 
	}

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUniqueClauseAccess().getRightParenthesisKeyword_1_5());
    }
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule OpArgType
ruleOpArgType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOpArgTypeAccess().getBooleanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='String' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOpArgTypeAccess().getStringEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='int' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOpArgTypeAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='float' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getFloatEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOpArgTypeAccess().getFloatEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='double' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getDoubleEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOpArgTypeAccess().getDoubleEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='long' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getLongEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOpArgTypeAccess().getLongEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Parcelable' 
	{
        $current = grammarAccess.getOpArgTypeAccess().getParcelableEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOpArgTypeAccess().getParcelableEnumLiteralDeclaration_6()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


