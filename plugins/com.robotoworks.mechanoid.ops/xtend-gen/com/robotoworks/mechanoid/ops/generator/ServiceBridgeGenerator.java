package com.robotoworks.mechanoid.ops.generator;

import com.google.common.base.Objects;
import com.robotoworks.mechanoid.common.util.Strings;
import com.robotoworks.mechanoid.ops.generator.Extensions;
import com.robotoworks.mechanoid.ops.opServiceModel.Model;
import com.robotoworks.mechanoid.ops.opServiceModel.OpArgType;
import com.robotoworks.mechanoid.ops.opServiceModel.Operation;
import com.robotoworks.mechanoid.ops.opServiceModel.OperationArg;
import com.robotoworks.mechanoid.ops.opServiceModel.ServiceBlock;
import com.robotoworks.mechanoid.ops.opServiceModel.WithUniqueBlock;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ServiceBridgeGenerator {
  public CharSequence generate(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    ServiceBlock svc = model.getService();
    _builder.newLineIfNotEmpty();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Robotoworks Mechanoid");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.ops.OperationServiceBridge;");
    _builder.newLine();
    _builder.append("import ");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "");
    _builder.append(".");
    String _name = svc.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("Service;");
    _builder.newLineIfNotEmpty();
    _builder.append("import android.content.Intent;");
    _builder.newLine();
    _builder.append("import com.robotoworks.mechanoid.Mechanoid;\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Abstract");
    String _name_1 = svc.getName();
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append("ServiceBridge extends OperationServiceBridge {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final Class<?> SERVICE_CLASS = ");
    String _name_2 = svc.getName();
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "	");
    _builder.append("Service.class;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Abstract");
    String _name_3 = svc.getName();
    String _pascalize_3 = Strings.pascalize(_name_3);
    _builder.append(_pascalize_3, "	");
    _builder.append("ServiceBridge(boolean enableLogging){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(enableLogging);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Class<?> getServiceClass() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return SERVICE_CLASS;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Operation> _ops = svc.getOps();
      for(final Operation op : _ops) {
        _builder.append("\t");
        _builder.append("public int execute");
        String _name_4 = op.getName();
        String _pascalize_4 = Strings.pascalize(_name_4);
        _builder.append(_pascalize_4, "	");
        _builder.append("Operation(");
        {
          EList<OperationArg> _args = op.getArgs();
          boolean _hasElements = false;
          for(final OperationArg arg : _args) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "	");
            }
            OpArgType _type = arg.getType();
            String _typeLiteral = Extensions.toTypeLiteral(_type);
            _builder.append(_typeLiteral, "	");
            _builder.append(" ");
            String _name_5 = arg.getName();
            String _camelize = Strings.camelize(_name_5);
            _builder.append(_camelize, "	");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("Intent intent = Abstract");
        String _name_6 = op.getName();
        String _pascalize_5 = Strings.pascalize(_name_6);
        _builder.append(_pascalize_5, "		");
        _builder.append("Operation.create");
        String _name_7 = op.getName();
        String _pascalize_6 = Strings.pascalize(_name_7);
        _builder.append(_pascalize_6, "		");
        _builder.append("Intent(");
        {
          EList<OperationArg> _args_1 = op.getArgs();
          boolean _hasElements_1 = false;
          for(final OperationArg arg_1 : _args_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "		");
            }
            String _name_8 = arg_1.getName();
            String _camelize_1 = Strings.camelize(_name_8);
            _builder.append(_camelize_1, "		");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        {
          boolean _and = false;
          WithUniqueBlock _unique = op.getUnique();
          boolean _notEquals = (!Objects.equal(_unique, null));
          if (!_notEquals) {
            _and = false;
          } else {
            WithUniqueBlock _unique_1 = op.getUnique();
            EList<OperationArg> _args_2 = _unique_1.getArgs();
            int _size = _args_2.size();
            boolean _greaterThan = (_size > 0);
            _and = (_notEquals && _greaterThan);
          }
          if (_and) {
            _builder.append("\t\t");
            _builder.append("android.os.Bundle matcher = new android.os.Bundle();");
            _builder.newLine();
            {
              WithUniqueBlock _unique_2 = op.getUnique();
              EList<OperationArg> _args_3 = _unique_2.getArgs();
              for(final OperationArg uarg : _args_3) {
                _builder.append("\t\t");
                _builder.append("matcher.");
                OpArgType _type_1 = uarg.getType();
                String _bundlePutMethodName = Extensions.toBundlePutMethodName(_type_1);
                _builder.append(_bundlePutMethodName, "		");
                _builder.append("(Abstract");
                String _name_9 = op.getName();
                String _pascalize_7 = Strings.pascalize(_name_9);
                _builder.append(_pascalize_7, "		");
                _builder.append("Operation.EXTRA_");
                String _name_10 = uarg.getName();
                String _underscore = Strings.underscore(_name_10);
                String _upperCase = _underscore.toUpperCase();
                _builder.append(_upperCase, "		");
                _builder.append(", ");
                String _name_11 = uarg.getName();
                String _camelize_2 = Strings.camelize(_name_11);
                _builder.append(_camelize_2, "		");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("Intent existingRequest = findPendingRequestByActionWithExtras(Abstract");
            String _name_12 = op.getName();
            String _pascalize_8 = Strings.pascalize(_name_12);
            _builder.append(_pascalize_8, "		");
            _builder.append("Operation.ACTION_");
            String _name_13 = op.getName();
            String _underscore_1 = Strings.underscore(_name_13);
            String _upperCase_1 = _underscore_1.toUpperCase();
            _builder.append(_upperCase_1, "		");
            _builder.append(", matcher);");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("Intent existingRequest = findPendingRequestByActionWithExtras(Abstract");
            String _name_14 = op.getName();
            String _pascalize_9 = Strings.pascalize(_name_14);
            _builder.append(_pascalize_9, "		");
            _builder.append("Operation.ACTION_");
            String _name_15 = op.getName();
            String _underscore_2 = Strings.underscore(_name_15);
            String _upperCase_2 = _underscore_2.toUpperCase();
            _builder.append(_upperCase_2, "		");
            _builder.append(", intent.getExtras());");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if(existingRequest != null) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("return extractRequestId(existingRequest);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("int requestId = createServiceRequest(intent);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("Mechanoid.startService(intent);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return requestId;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStub(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    ServiceBlock svc = model.getService();
    _builder.newLineIfNotEmpty();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Robotoworks Mechanoid");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name = svc.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, "");
    _builder.append("ServiceBridge extends Abstract");
    String _name_1 = svc.getName();
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append("ServiceBridge {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ");
    String _name_2 = svc.getName();
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "	");
    _builder.append("ServiceBridge instance;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    String _name_3 = svc.getName();
    String _pascalize_3 = Strings.pascalize(_name_3);
    _builder.append(_pascalize_3, "	");
    _builder.append("ServiceBridge getInstance() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(instance == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("instance = new ");
    String _name_4 = svc.getName();
    String _pascalize_4 = Strings.pascalize(_name_4);
    _builder.append(_pascalize_4, "			");
    _builder.append("ServiceBridge();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_5 = svc.getName();
    String _pascalize_5 = Strings.pascalize(_name_5);
    _builder.append(_pascalize_5, "	");
    _builder.append("ServiceBridge(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
