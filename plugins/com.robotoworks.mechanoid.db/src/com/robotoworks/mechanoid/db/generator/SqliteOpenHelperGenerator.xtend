package com.robotoworks.mechanoid.db.generator

import com.google.inject.Inject
import com.robotoworks.mechanoid.db.sqliteModel.Model

import static extension com.robotoworks.mechanoid.text.Strings.*
import static extension com.robotoworks.mechanoid.db.util.ModelUtil.*

class SqliteOpenHelperGenerator {
		@Inject extension SqliteDatabaseStatementGenerator
		
		def CharSequence generate(Model model, SqliteDatabaseSnapshot snapshot) '''
				/*
				 * Generated by Robotoworks Mechanoid
				 */
				package «model.packageName»;
				
				import android.content.Context;
				import android.database.sqlite.SQLiteDatabase;
				import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;
				import com.robotoworks.mechanoid.db.SQLiteMigration;
				
				«IF model.database.migrations.size > 0»
				«var version = 0»
				«FOR migration : model.database.migrations»
				import «model.packageName».migrations.Default«model.database.name.pascalize»MigrationV«version=version+1»;
				«ENDFOR»
				«ENDIF»
				
				public abstract class Abstract«model.database.name.pascalize()»OpenHelper extends MechanoidSQLiteOpenHelper {
					private static final String DATABASE_NAME = "«model.database.name».db";
				
					public static final int VERSION = «model.database.migrations.size»;
				
					public interface Sources {
						«FOR table : snapshot.tables»
						String «table.name.underscore.toUpperCase» = "«table.name»";
						«ENDFOR»
						«FOR view : snapshot.views»
						String «view.name.underscore.toUpperCase» = "«view.name»";
						«ENDFOR»
						«FOR table : model.configInitTables»
						String «table.name.underscore.toUpperCase» = "«table.name»";
						«ENDFOR»
						«FOR view : model.configInitViews»
						String «view.name.underscore.toUpperCase» = "«view.name»";
						«ENDFOR»
					}
				
					public Abstract«model.database.name.pascalize()»OpenHelper(Context context) {
						super(context, DATABASE_NAME, null, VERSION);
					}

					public Abstract«model.database.name.pascalize()»OpenHelper(Context context, String name) {
						super(context, name, null, VERSION);
					}

					@Override
					public void onCreate(SQLiteDatabase db) {
						applyMigrations(db, 0, VERSION);
					}
					
					«IF model.database.init != null»
					@Override
					public void onOpen(SQLiteDatabase db) {
						super.onOpen(db);
						
						«model.database.init.statements.generateStatements»
					}
					«ENDIF»
				
					@Override
					protected SQLiteMigration createMigration(int version) {
						«IF model.database.migrations.size > 0»
						«var version = -1»
						switch(version) {
							«FOR migration : model.database.migrations»
							case «version=version+1»:
								return create«model.database.name.pascalize»MigrationV«version + 1»();
							«ENDFOR»
							default:
								throw new IllegalStateException("No migration for version " + version);
						}
						«ELSE»
						throw new IllegalStateException("No migrations for any version");
						«ENDIF»
					}
					
					«IF model.database.migrations.size > 0»
					«var version = 0»
					«FOR migration : model.database.migrations»
					protected SQLiteMigration create«model.database.name.pascalize»MigrationV«version=version+1»() {
						return new Default«model.database.name.pascalize»MigrationV«version»();
					}
					«ENDFOR»
					«ENDIF»
				}
		'''
			
		def CharSequence generateStub(Model model, SqliteDatabaseSnapshot snapshot) '''
				/*
				 * Generated by Robotoworks Mechanoid
				 */
				package «model.packageName»;
				
				import android.content.Context;
				import «model.packageName».Abstract«model.database.name.pascalize()»OpenHelper;

				
				public class «model.database.name.pascalize()»OpenHelper extends Abstract«model.database.name.pascalize()»OpenHelper {
					public «model.database.name.pascalize()»OpenHelper(Context context) {
						super(context);
					}
				}
		'''
}