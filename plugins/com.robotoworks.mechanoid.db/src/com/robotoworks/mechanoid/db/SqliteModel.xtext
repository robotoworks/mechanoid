grammar com.robotoworks.mechanoid.db.SqliteModel with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sqliteModel "http://www.robotoworks.com/mechanoid/db/SqliteModel"

/***********************************************************************
 *                                                                     *
 * CORE                                                                *
 *                                                                     *
 ***********************************************************************/
Model:
	'package' packageName=QualifiedName
	database=DatabaseBlock;

DatabaseBlock:
	'database' name=ID '{' (config=ConfigBlock)? (migrations+=MigrationBlock)* '}';

ConfigBlock:
	{ConfigBlock}
	'config' '{' statements+=ConfigurationStatement* '}'
;

ConfigurationStatement:
	{ActionStatement} 'action' name=ID uri=ContentUri
;

ContentUri:
	'/' type=ID ('/' segments+=ContentUriSegment)*
;

ContentUriSegment:
	name=ID |
	{ContentUriParamSegment} '{'name=ID':'(num?="#"|text?="*")'}'
;

MigrationBlock:
	{MigrationBlock}
	'migration' '{' (statements+=DDLStatement ';')* '}';
	
/***********************************************************************
 *                                                                     *
 * EXPRESSIONS                                                         *
 *                                                                     *
 ***********************************************************************/
SqlExpression returns Expression:
	ExprConcat
;

ExprConcat returns Expression:
	ExprMult ({ExprConcat.left=current} op='||' right=ExprMult)*
;

ExprMult returns Expression:
	ExprAdd ({ExprMult.left=current} op=('*'|'/'|'%') right=ExprAdd)*
;

ExprAdd returns Expression:
	ExprBit ({ExprAdd.left=current} op=('+'|'-') right=ExprBit)*
;

ExprBit returns Expression:
	ExprRelate ({ExprBit.left=current} op=('<<'|'>>'|'&'|'|') right=ExprRelate)*
;

ExprRelate returns Expression:
	ExprEqual ({ExprRelate.left=current} op=('<'|'<='|'>'|'>=') right=ExprEqual)*
;

ExprEqual returns Expression:
	ExprAnd ({ExprEqual.left=current} 
		op=('='|'=='|'!='|'<>'|'is'|'is not'|'in'|'not in'|'like'|'glob'|'match'|'regexp') 
		right=ExprAnd
	)*
;

ExprAnd returns Expression:
	ExprOr ({ExprAnd.left=current} op='and' right=ExprOr)*
;

ExprOr returns Expression:
	NullCheckExpression ({ExprOr.left=current} op='or' right=NullCheckExpression)*
;

NullCheckExpression returns Expression:
	PrimaryExpression ({NullCheckExpression.left=current} right=NullExpression)?
;

NullExpression returns Expression:
	{IsNull} 'is null' |
	{NotNull} ('not null'|'notnull')
;

PrimaryExpression returns Expression:
	{NewColumn} 'new.' column=[ColumnSource] |
	{OldColumn} 'old.' column=[ColumnSource] |
	{ColumnSourceRef} (=>source=[SelectSource]'.'|source=[SelectSource]'.'(all?='*'|column=[ColumnSource])|column=[ColumnSource]) |
	{Literal} literalValue=LiteralValue|
	{NestedExpression} '(' expression=SqlExpression ')'|
	{SelectStatementExpression} not?='not'? exists?='exists'? '(' select=SelectStatement ')' |
	{CaseExpression} 'case' caseExpression=SqlExpression? 
			cases+=Case+
			('else' elseExpression=SqlExpression)? 'end' |
	{Function} name=ID '(' (all?='*'|arguments+=SqlExpression (',' arguments+=SqlExpression)*) ')' |
	{CastExpression} 'cast' '(' expression=SqlExpression 'as' type=SqliteDataType ')'
;

Case:
'when' whenExpression=SqlExpression 'then' thenExpression=SqlExpression
;

SelectStatement:
	core=SelectCore
	('order by'  orderby=OrderingTermList)?
	('limit' limit=SqlExpression ( ('offset'|',') limitOffset=SqlExpression)?)?
;

OrderingTermList:
	orderingTerms+=OrderingTerm (',' orderingTerms+=OrderingTerm)*
;


SelectCore returns SelectCoreExpression:
	SelectExpression ({SelectCore.left = current} op=CompoundOperator right=SelectExpression)*
;

SelectExpression returns SelectCoreExpression:
	{SelectExpression}
	'select' (distinct?='distinct'|all?='all')? (allColumns?='*'|selectList=SelectList)
	('from' source=JoinSource)?
	('where' where=WhereExpressions)?
	('group by' groupBy=GroupByExpressions)?
	('having' having=HavingExpressions)?
;

SelectList:
	resultColumns+=ResultColumn (',' resultColumns+=ResultColumn)*
;

WhereExpressions:
	expression=SqlExpression
;

GroupByExpressions:
	groupByExpressions+=SqlExpression (',' groupByExpressions+=SqlExpression)*
;

HavingExpressions:
	expression=SqlExpression
;


enum CompoundOperator:
	unionall='union all' | union='union' | intersect='intersect' | except='except'
;

OrderingTerm:
	expression=SqlExpression (asc?='asc'|desc?='desc')?
;

JoinSource:
	source=SingleSource joinStatements+=JoinStatement*
;

SingleSource:
	SingleSourceTable | SingleSourceSelectStatement | SingleSourceJoin
;

SingleSourceTable returns SelectSource:
	 {SingleSourceTable} 
	 tableReference=[TableDefinition|ID] ('as' name=ID)?;
	 
SingleSourceSelectStatement returns SelectSource: 
	{SingleSourceSelectStatement} 
	'(' selectStatement=SelectStatement ')' ('as' name=ID)?
;

SingleSourceJoin: 
	'(' joinSource=JoinSource ')';

JoinStatement:
	{JoinStatement}
	natural?='natural'? ((left?='left' outer?='outer'?) | inner?='inner' | cross?='cross')? 'join' singleSource=SingleSource 'on' expression=SqlExpression;
	

ResultColumn returns ColumnSource:
	{ResultColumn}
	expression=SqlExpression ('as' name=ID)?
;
	
LiteralValue:
	{NumericLiteral} number=SignedNumber |
	{StringLiteral} literal=STRING |
	{NullLiteral} literal='null' |
	{CurrentTimeLiteral} literal='current_time' |
	{CurrentDateLiteral} literal='current_date' |
	{CurrentTimeStampLiteral} literal='current_timestamp'
;

enum SqliteDataType:
	text | integer | real | blob | none | numeric;

/***********************************************************************
 *                                                                     *
 * DDL                                                                 *
 *                                                                     *
 ***********************************************************************/

DDLStatement:
	CreateTableStatement
	| CreateViewStatement
	| CreateTriggerStatement
	| AlterTableRenameStatement
	| AlterTableAddColumnStatement
	| DropTableStatement
	| DropTriggerStatement
	| DropViewStatement
;

CreateTableStatement returns TableDefinition: 
	{CreateTableStatement} 'create' 'table' name=ID '(' 
		columnDefs+=ColumnDef (',' columnDefs+=ColumnDef)* 
		(',' constraints+=TableConstraint)* 
	')';

CreateViewStatement returns TableDefinition: 
	{CreateViewStatement}
	'create' 'view' name=ID 'as' selectStatement=SelectStatement;
	
CreateTriggerStatement: 
	'create' 'trigger' name=ID when=('before'|'after'|'instead of')?
	  (eventType='delete'|eventType='insert'|eventType='update' ('of' updateColumnNames+=ID (',' updateColumnNames+=ID)*)?)
	  'on' table=[TableDefinition|ID] forEachRow=('for each row')? ('when' whenExpression=SqlExpression)?
	  'begin' (statements+=DMLStatement ';' (statements+=DMLStatement ';')*)? 'end';
	  
AlterTableRenameStatement returns TableDefinition:
	{AlterTableRenameStatement} 
	'alter' 'table' table=[TableDefinition|ID] 'rename to' name=ID
;

AlterTableAddColumnStatement: 
	'alter' 'table' table=[TableDefinition|ID] 'add column' columnDef=ColumnDef
;

DropTableStatement: 
	'drop' 'table' ifExists?=('if exists')? table=[TableDefinition|ID];
	
DropTriggerStatement: 
	'drop' 'trigger' ifExists?=('if exists')? trigger=[CreateTriggerStatement|ID];

DropViewStatement: 
	'drop' 'view' ifExists?=('if exists')? view=[CreateViewStatement|ID];

ColumnDef returns ColumnSource:
	{ColumnDef}
	name=ID type=ColumnType constraints+=ColumnConstraint*;

ColumnConstraint:
	{PrimaryKeyColumnConstraint} 'primary key' (asc?='asc'|desc?='desc')? autoincrement?='autoincrement'? |
	{NotNullConstraint} 'not null' conflictClause=ConflictClause? |
	{DefaultConstraint} 'default' defaultValue=DefaultValue
;

TableConstraint:
	UniqueTableConstraint | PrimaryConstraint | CheckTableConstraint
;

UniqueTableConstraint: 
	('constraint' name=ID)? 'unique' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' conflictClause=ConflictClause
;

PrimaryConstraint: 
	('constraint' name=ID)? 'primary key' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' conflictClause=ConflictClause
;

CheckTableConstraint: 
	('constraint' name=ID)? 'check' '(' expression=SqlExpression ')'
;

IndexedColumn:
	columnReference=[ColumnDef] (asc?='asc'|desc?='desc')?;

DefaultValue:
	{LiteralDefaultValue} literal=LiteralValue |
	{ExpressionDefaultValue} '(' expression=SqlExpression ')'
;

ConflictClause:
	'on' 'conflict' resolution=ConflictResolution;

enum ColumnType:
	text | integer | real | blob | boolean;
	
enum ConflictResolution:
	rollback | abort | fail | ignore | replace;
	
/***********************************************************************
 *                                                                     *
 * DML                                                                 *
 *                                                                     *
 ***********************************************************************/

DMLStatement:
	SelectStatement 
	| InsertStatement 
	| UpdateStatement 
	| DeleteStatement
;

DeleteStatement:
	'delete' 'from' table=[TableDefinition|ID] ('where' expression=SqlExpression)?	
;

InsertStatement:
	('insert' ('or' (conflictResolution=ConflictResolution))?|'replace') 'into' table=[TableDefinition|ID]
	('(' columnNames+=[ColumnDef] (',' columnNames+=[ColumnDef])* ')')? 
	(('values' 
		'(' expressions+=SqlExpression (',' expressions+=SqlExpression)* ')'
		| selectStatement=SelectStatement
	)|'default' 'values')
;

UpdateStatement:
	'update' ('or' (conflictResolution=ConflictResolution))? table=[TableDefinition|ID]
	'set' updateColumnExpressions+=UpdateColumnExpression (',' updateColumnExpressions+=UpdateColumnExpression)*
	('where' whereExpression=SqlExpression)?
;

UpdateColumnExpression:
	columnName=[ColumnDef] '=' expression=SqlExpression
;

/***********************************************************************
 *                                                                     *
 * DATATYPE & TERMINAL RULES                                           *
 *                                                                     *
 ***********************************************************************/
 
SignedNumber returns ecore::EBigDecimal:
	'-'?NUMBER
;	

QualifiedName:
	ID ("." ID)*;

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	
terminal INT returns ecore::EInt: 
	"$$$don't use this anymore$$$";
	
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
	