/*
 * Generated by Robotoworks Mechanoid
 */
package com.robotoworks.example.recipes.content;

import java.util.ArrayList;
import java.util.List;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import com.robotoworks.mechanoid.content.MechanoidContentProvider;
import com.robotoworks.mechanoid.sqlite.MechanoidSQLiteOpenHelper;
import com.robotoworks.mechanoid.sqlite.ActiveRecord;
import com.robotoworks.mechanoid.sqlite.SQuery;
import com.robotoworks.mechanoid.content.DefaultContentProviderActions;
import com.robotoworks.mechanoid.content.ContentProviderActions;
import com.robotoworks.example.recipes.content.AbstractRecipesDBOpenHelper.Sources;
import com.robotoworks.example.recipes.content.RecipesRecord;
import com.robotoworks.example.recipes.content.AuthorsRecord;
import com.robotoworks.example.recipes.content.IngredientsRecord;

public abstract class AbstractRecipesDBContentProvider extends MechanoidContentProvider {

    private static final UriMatcher sUriMatcher;
	private static final String[] sContentTypes;
    
	private static final int RECIPES = 0;
	private static final int RECIPES_ID = 1;
	private static final int AUTHORS = 2;
	private static final int AUTHORS_ID = 3;
	private static final int INGREDIENTS = 4;
	private static final int INGREDIENTS_ID = 5;

	private static final int RECIPES_WITH_AUTHORS = 6;
	private static final int RECIPES_WITH_AUTHORS_ID = 7;
	private static final int RECIPES_AND_INGREDIENTS = 8;
	private static final int RECIPES_AND_INGREDIENTS_ID = 9;
	
	public static final int NUM_URI_MATCHERS = 10;

	static {
		sUriMatcher = buildUriMatcher();
	
		sContentTypes = new String[NUM_URI_MATCHERS];

		sContentTypes[RECIPES] = RecipesDBContract.Recipes.CONTENT_TYPE;
		sContentTypes[RECIPES_ID] = RecipesDBContract.Recipes.ITEM_CONTENT_TYPE;
		sContentTypes[AUTHORS] = RecipesDBContract.Authors.CONTENT_TYPE;
		sContentTypes[AUTHORS_ID] = RecipesDBContract.Authors.ITEM_CONTENT_TYPE;
		sContentTypes[INGREDIENTS] = RecipesDBContract.Ingredients.CONTENT_TYPE;
		sContentTypes[INGREDIENTS_ID] = RecipesDBContract.Ingredients.ITEM_CONTENT_TYPE;
		sContentTypes[RECIPES_WITH_AUTHORS] = RecipesDBContract.RecipesWithAuthors.CONTENT_TYPE;
		sContentTypes[RECIPES_WITH_AUTHORS_ID] = RecipesDBContract.RecipesWithAuthors.ITEM_CONTENT_TYPE;
		sContentTypes[RECIPES_AND_INGREDIENTS] = RecipesDBContract.RecipesAndIngredients.CONTENT_TYPE;
		sContentTypes[RECIPES_AND_INGREDIENTS_ID] = RecipesDBContract.RecipesAndIngredients.ITEM_CONTENT_TYPE;
	}
	
    private static UriMatcher buildUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = RecipesDBContract.CONTENT_AUTHORITY;

		// Sources
		matcher.addURI(authority, "recipes", RECIPES);
		matcher.addURI(authority, "recipes/#", RECIPES_ID);
		matcher.addURI(authority, "authors", AUTHORS);
		matcher.addURI(authority, "authors/#", AUTHORS_ID);
		matcher.addURI(authority, "ingredients", INGREDIENTS);
		matcher.addURI(authority, "ingredients/#", INGREDIENTS_ID);

		// Views
		matcher.addURI(authority, "recipes_with_authors", RECIPES_WITH_AUTHORS);
		matcher.addURI(authority, "recipes_with_authors/#", RECIPES_WITH_AUTHORS_ID);
		matcher.addURI(authority, "recipes_and_ingredients", RECIPES_AND_INGREDIENTS);
		matcher.addURI(authority, "recipes_and_ingredients/#", RECIPES_AND_INGREDIENTS_ID);

		// User Actions
        return matcher;
    }

	@Override
	public String getType(Uri uri) {
        final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return sContentTypes[match];
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).delete(this, uri, selection, selectionArgs);
		
		if(affected > 0) {
			tryNotifyChange(uri);
		}
		
		return affected;
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {

		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		Uri newUri = createActions(match).insert(this, uri, values);
		
		if(newUri != null) {
			tryNotifyChange(uri);
		}
		
		return newUri;
	}
	
	@Override
    public int bulkInsert(Uri uri, ContentValues[] values) {
    	
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).bulkInsert(this, uri, values);
		
		if(affected > 0) {
			tryNotifyChange(uri);
		}
		
		return affected;
    }

	@Override
	protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {
        return new RecipesDBOpenHelper(context);
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		Cursor cursor = createActions(match).query(this, uri, projection, selection, selectionArgs, sortOrder);

		trySetNotificationUri(cursor, uri);
		
		return cursor;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).update(this, uri, values, selection, selectionArgs);

		if(affected > 0) {
			tryNotifyChange(uri);
		}

		return affected;
	}

    public <T extends ActiveRecord> List<T> selectRecords(Uri uri, SQuery sQuery, String sortOrder) {
        final int match = sUriMatcher.match(uri);

        if(match == UriMatcher.NO_MATCH) {
            throw new UnsupportedOperationException("Unknown uri: " + uri);
        }
        
        return createActions(match).selectRecords(this, uri, sQuery, sortOrder);
    }
    
    @Override
    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)
            throws OperationApplicationException {
        final SQLiteDatabase db = getOpenHelper().getWritableDatabase();
        db.beginTransaction();
        try {
            final int numOperations = operations.size();
            final ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                results[i] = operations.get(i).apply(this, results, i);
            }
            db.setTransactionSuccessful();
            return results;
        } finally {
            db.endTransaction();
        }
    }
    
    @Override
    protected ContentProviderActions createActions(int id) {
    	switch(id) {
			case RECIPES: 
				return createRecipesActions();
			case RECIPES_ID:
				return createRecipesByIdActions();
			case AUTHORS: 
				return createAuthorsActions();
			case AUTHORS_ID:
				return createAuthorsByIdActions();
			case INGREDIENTS: 
				return createIngredientsActions();
			case INGREDIENTS_ID:
				return createIngredientsByIdActions();
			case RECIPES_WITH_AUTHORS:
				return createRecipesWithAuthorsActions();
			case RECIPES_WITH_AUTHORS_ID: 
				return createRecipesWithAuthorsByIdActions();
			case RECIPES_AND_INGREDIENTS:
				return createRecipesAndIngredientsActions();
			case RECIPES_AND_INGREDIENTS_ID: 
				return createRecipesAndIngredientsByIdActions();
			default:
				throw new UnsupportedOperationException("Unknown id: " + id);
    	}
    }
    
    protected ContentProviderActions createRecipesByIdActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES, true, RecipesRecord.getFactory());
    }
    
    protected ContentProviderActions createRecipesActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES, false, RecipesRecord.getFactory());
    }
    
    protected ContentProviderActions createAuthorsByIdActions() {
    	return new DefaultContentProviderActions(Sources.AUTHORS, true, AuthorsRecord.getFactory());
    }
    
    protected ContentProviderActions createAuthorsActions() {
    	return new DefaultContentProviderActions(Sources.AUTHORS, false, AuthorsRecord.getFactory());
    }
    
    protected ContentProviderActions createIngredientsByIdActions() {
    	return new DefaultContentProviderActions(Sources.INGREDIENTS, true, IngredientsRecord.getFactory());
    }
    
    protected ContentProviderActions createIngredientsActions() {
    	return new DefaultContentProviderActions(Sources.INGREDIENTS, false, IngredientsRecord.getFactory());
    }
    
    protected ContentProviderActions createRecipesWithAuthorsByIdActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES_WITH_AUTHORS, true, RecipesWithAuthorsRecord.getFactory());
    }
    
    protected ContentProviderActions createRecipesWithAuthorsActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES_WITH_AUTHORS, false, RecipesWithAuthorsRecord.getFactory());
    }
    
    protected ContentProviderActions createRecipesAndIngredientsByIdActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES_AND_INGREDIENTS, true, RecipesAndIngredientsRecord.getFactory());
    }
    
    protected ContentProviderActions createRecipesAndIngredientsActions() {
    	return new DefaultContentProviderActions(Sources.RECIPES_AND_INGREDIENTS, false, RecipesAndIngredientsRecord.getFactory());
    }
    
}
