/*
 * Generated by Robotoworks Mechanoid
 */
package com.robotoworks.example.movies.db;

import java.util.ArrayList;
import java.util.List;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import com.robotoworks.mechanoid.db.MechanoidContentProvider;
import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.SQuery;
import com.robotoworks.mechanoid.db.DefaultContentProviderActions;
import com.robotoworks.mechanoid.db.ContentProviderActions;
import com.robotoworks.example.movies.db.AbstractMovieDBOpenHelper.Sources;
import com.robotoworks.example.movies.db.MoviesRecord;

public abstract class AbstractMovieDBContentProvider extends MechanoidContentProvider {

    private static final UriMatcher sUriMatcher;
	private static final String[] sContentTypes;
    
	private static final int MOVIES = 0;
	private static final int MOVIES_ID = 1;

	
	public static final int NUM_URI_MATCHERS = 2;

	static {
		sUriMatcher = buildUriMatcher();
	
		sContentTypes = new String[NUM_URI_MATCHERS];

		sContentTypes[MOVIES] = MovieDBContract.Movies.CONTENT_TYPE;
		sContentTypes[MOVIES_ID] = MovieDBContract.Movies.ITEM_CONTENT_TYPE;
	}
	
    private static UriMatcher buildUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = MovieDBContract.CONTENT_AUTHORITY;

		// Sources
		matcher.addURI(authority, "movies", MOVIES);
		matcher.addURI(authority, "movies/#", MOVIES_ID);

		// Views

		// User Actions
        return matcher;
    }

	@Override
	public String getType(Uri uri) {
        final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return sContentTypes[match];
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).delete(this, uri, selection, selectionArgs);
		
		if(affected > 0) {
			tryNotifyChange(uri);
		}
		
		return affected;
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {

		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		Uri newUri = createActions(match).insert(this, uri, values);
		
		if(newUri != null) {
			tryNotifyChange(uri);
		}
		
		return newUri;
	}
	
	@Override
    public int bulkInsert(Uri uri, ContentValues[] values) {
    	
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).bulkInsert(this, uri, values);
		
		if(affected > 0) {
			tryNotifyChange(uri);
		}
		
		return affected;
    }

	@Override
	protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {
        return new MovieDBOpenHelper(context);
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		Cursor cursor = createActions(match).query(this, uri, projection, selection, selectionArgs, sortOrder);

		trySetNotificationUri(cursor, uri);
		
		return cursor;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		int affected = createActions(match).update(this, uri, values, selection, selectionArgs);

		if(affected > 0) {
			tryNotifyChange(uri);
		}

		return affected;
	}

    public <T extends ActiveRecord> List<T> selectRecords(Uri uri, SQuery sQuery, String sortOrder) {
        final int match = sUriMatcher.match(uri);

        if(match == UriMatcher.NO_MATCH) {
            throw new UnsupportedOperationException("Unknown uri: " + uri);
        }
        
        return createActions(match).selectRecords(this, uri, sQuery, sortOrder);
    }
    
    @Override
    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)
            throws OperationApplicationException {
        final SQLiteDatabase db = getOpenHelper().getWritableDatabase();
        db.beginTransaction();
        try {
            final int numOperations = operations.size();
            final ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                results[i] = operations.get(i).apply(this, results, i);
            }
            db.setTransactionSuccessful();
            return results;
        } finally {
            db.endTransaction();
        }
    }
    
    @Override
    protected ContentProviderActions createActions(int id) {
    	switch(id) {
			case MOVIES: 
				return createMoviesActions();
			case MOVIES_ID:
				return createMoviesByIdActions();
			default:
				throw new UnsupportedOperationException("Unknown id: " + id);
    	}
    }
    
    protected ContentProviderActions createMoviesByIdActions() {
    	return new DefaultContentProviderActions(Sources.MOVIES, true, MoviesRecord.getFactory());
    }
    
    protected ContentProviderActions createMoviesActions() {
    	return new DefaultContentProviderActions(Sources.MOVIES, false, MoviesRecord.getFactory());
    }
    
}
